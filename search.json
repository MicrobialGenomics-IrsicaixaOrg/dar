[{"path":[]},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement fcatala@iriscaixa.es. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to dar","title":"Contributing to dar","text":"outlines propose change dar. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to dar","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to dar","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to dar","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"MicrobialGenomics-IrsicaixaOrg/dar\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to dar","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to dar","text":"Please note dar project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Francesc Català-Moll Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/articles/article.html","id":"load-dar-package-and-data","dir":"Articles","previous_headings":"","what":"Load dar package and data","title":"Workflow with real data","text":"","code":"library(dar) # suppressPackageStartupMessages(library(plotly)) data(\"metaHIV_phy\")  metaHIV_phy #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 451 taxa and 156 samples ] #> sample_data() Sample Data:       [ 156 samples by 3 sample variables ] #> tax_table()   Taxonomy Table:    [ 451 taxa by 7 taxonomic ranks ]"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/articles/article.html","id":"recipe-initialization","dir":"Articles","previous_headings":"","what":"Recipe initialization","title":"Workflow with real data","text":"begin analysis process ‘dar’ package, first step initialize recipe object, S4 class. recipe object serves blueprint data preparation steps required differential abundance analysis. initialization recipe object done function recipe(), takes inputs phyloseq object, name categorical variable interest taxonomic level differential abundance analyses performed. previously mentioned, use data set (Noguera-Julian, M., et al. 2016) variable interest “RiskGroup2” containing categories: men sex men (msm), non-MSM (hts) people inject drugs (pwid) perform analysis species level.","code":"## Recipe initialization rec <- recipe(metaHIV_phy, var_info = \"RiskGroup2\", tax_info = \"Species\") rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/articles/article.html","id":"recipe-qc-and-preprocessing-steps-definition","dir":"Articles","previous_headings":"","what":"Recipe QC and preprocessing steps definition","title":"Workflow with real data","text":"recipe object initialized, next step populate steps. Steps methods applied data stored recipe. two types steps: preprocessing (prepro) differential abundance (da) steps. Initially, focus prepro steps used modify data loaded recipe, used da steps. ‘dar’ package includes 3 main preprocessing functionalities: step_subset_taxa, used subsetting columns values taxon table connected phyloseq object, step_filter_taxa, used filter OTUs, step_rarefaction, used resample OTU table ensure samples library size. functionalities allow high level flexibility customization data preparation process performing differential abundance analysis. addition preprocessing steps, ‘dar’ package also incorporates function phy_qc() returns table set metrics allow informed decisions made data preprocessing done. case, decided use step_subset_taxa function retain observations annotated within realm bacteria archaea. also used step_filter_taxa function retain OTUs least 1% samples values greater 0. approach ensured working high-quality, informative subset data, improved overall accuracy reliability differential abundance analysis.","code":"## QC  phy_qc(rec) #> # A tibble: 4 × 10 #>   var_levels     n n_zero pct_zero pct_all_zero pct_singletons pct_doubletons #>   <chr>      <int>  <int>    <dbl>        <dbl>          <dbl>          <dbl> #> 1 all        70356  57632     81.9          0             20.6           8.87 #> 2 hts        18491  15108     81.7         24.2           22.8           8.43 #> 3 msm        45100  37019     82.1         16.0           20.2           9.53 #> 4 pwid        6765   5505     81.4         41.2           16.6           9.31 #> # ℹ 3 more variables: count_mean <dbl>, count_min <dbl>, count_max <dbl>  ## Adding prepro steps rec <-    rec %>%    step_subset_taxa(expr = 'Kingdom %in% c(\"Bacteria\", \"Archaea\")') %>%    step_filter_taxa(.f = \"function(x) sum(x > 0) >= (0.1 * length(x))\")  rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Preporcessing steps: #>  #>      ◉ step_subset_taxa() id = subset_taxa__Masan  #>      ◉ step_filter_taxa() id = filter_taxa__Schuxen  #>  #> DA steps:"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/articles/article.html","id":"define-differential-analysis-da-steps","dir":"Articles","previous_headings":"","what":"Define Differential Analysis (DA) steps","title":"Workflow with real data","text":"data preprocessed cleaned, next step add da steps. ‘dar’ package incorporates multiple methods analyze data, including: ALDEx2, ANCOM-BC, corncob, DESeq2, Lefse, MAaslin2, MetagenomeSeq, Wilcox. methods provide range options uncovering potential microbial biomarkers associated variable interest. ensure consistency across methods, decided use default parameters, set min_prevalence parameter 0 MAaslin2, rm_zeros parameter 0.01 MetagenomeSeq, since observed pct_all_zeros value equal 0 levels categorical variable results phy_qc(). approach ensured analysis consistent across methods results interpretable.","code":"## DA steps definition rec <- rec %>%    step_ancom() %>%   step_aldex() %>%   step_deseq() %>%   step_corncob(filter_discriminant = FALSE) %>%   step_metagenomeseq(rm_zeros = 0.01) %>%   step_maaslin(min_prevalence = 0) %>%   step_lefse() %>%    step_wilcox()  rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Preporcessing steps: #>  #>      ◉ step_subset_taxa() id = subset_taxa__Masan  #>      ◉ step_filter_taxa() id = filter_taxa__Schuxen  #>  #> DA steps: #>  #>      ◉ step_ancom() id = ancom__Boyoz  #>      ◉ step_aldex() id = aldex__Danish_pastry  #>      ◉ step_deseq() id = deseq__Pannekoek  #>      ◉ step_corncob() id = corncob__Sou  #>      ◉ step_metagenomeseq() id = metagenomeseq__Chatti_Pathiri  #>      ◉ step_maaslin() id = maaslin__Tortell  #>      ◉ step_lefse() id = lefse__Nazook  #>      ◉ step_wilcox() id = wilcox__Turnover"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/articles/article.html","id":"prep-recipe","dir":"Articles","previous_headings":"","what":"Prep recipe","title":"Workflow with real data","text":"recipe defined, next step execute steps defined recipe. done function prep(). Internally, first executes preprocessing steps, modify phyloseq object stored recipe. , using modified phyloseq, executes defined differential abundance methods. speed execution time, prep() function includes option run parallel. resulting object class ‘prep_recipe’ printed terminal, displays number taxa detected significant methods also total number taxa shared across methods. allows provisional overview results comparison methods.","code":"## Execute in parallel da_results <- prep(rec, parallel = FALSE) #> Warning in sqrt(sweep(var_hat, 2, var_delta, \"*\")): NaNs produced da_results #> ── DAR Results ───────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 174 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Results: #>  #>      ✔ ancom__Boyoz diff_taxa = 67  #>      ✔ aldex__Danish_pastry diff_taxa = 113  #>      ✔ deseq__Pannekoek diff_taxa = 92  #>      ✔ corncob__Sou diff_taxa = 125  #>      ✔ metagenomeseq__Chatti_Pathiri diff_taxa = 136  #>      ✔ maaslin__Tortell diff_taxa = 148  #>      ✔ lefse__Nazook diff_taxa = 121  #>      ✔ wilcox__Turnover diff_taxa = 123  #>  #>      ℹ 28 taxa are present in all tested methods"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/articles/article.html","id":"default-results-extraction","dir":"Articles","previous_headings":"","what":"Default results extraction","title":"Workflow with real data","text":"point, extract taxa shared across methods using function bake() define default consensus strategy cool() extract results. However, ‘dar’ allows complex consensus strategies based obtained results. end, user access different functions graphically represent different types information. feature allows -depth analysis results better understanding underlying patterns data.","code":"## Default DA taxa results results <-    bake(da_results) %>%    cool()  results #> # A tibble: 28 × 2 #>    taxa_id taxa                         #>    <chr>   <chr>                        #>  1 Otu_35  Collinsella_aerofaciens      #>  2 Otu_48  Bacteroides_clarus           #>  3 Otu_63  Bacteroides_plebeius         #>  4 Otu_69  Bacteroides_sp_CAG_530       #>  5 Otu_78  Bacteroides_uniformis        #>  6 Otu_82  Barnesiella_intestinihominis #>  7 Otu_88  Odoribacter_splanchnicus     #>  8 Otu_96  Prevotella_copri             #>  9 Otu_102 Prevotella_sp_AM42_24        #> 10 Otu_109 Prevotella_sp_CAG_5226       #> # ℹ 18 more rows"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/articles/article.html","id":"exploration-for-consensus-strategie-definition","dir":"Articles","previous_headings":"","what":"Exploration for consensus strategie definition","title":"Workflow with real data","text":"example, intersection_plt() gives overview overlaps methods creating upSet plot. case, function shown 25 taxa shared across methods used. However, changing consensus strategy using lower count_cutoff value, can see number shared taxa increases 25 80.  addition intersection_plt() function, ‘dar’ also function exclusion_plt() provides information number OTUs shared methods. function allows identify OTUs specific method also ones shared among method.  Besides previously mentioned functions, ‘dar’ also includes function corr_heatmap(), allows visualization overlap significant OTUs tested methods. function can provide similar information previous plots, cases may easier interpret. Using function data set, can observe although tested methods return similar results, DESeq2 ANCOM lower correlation methods. result can also observed plot generated intersection_plt() function, providing comprehensive view results. Finally, ‘dar’ also includes function mutual_plt(), plots number differential abundant features mutually found defined number methods, colored differential abundance direction separated comparison. resulting graph allows us see features detected correspond mainly comparisons hts vs msm msm vs pwid. Additionally, graph also allows us observe direction effect; whether specific OTU enriched depleted comparison.","code":"## Intersection plot  intersection_plt(da_results, ordered_by = \"degree\", font_size = 1) ## Exclusion plot  exclusion_plt(da_results) ## Correlation heatmap corr_heat <- corr_heatmap(da_results, font_size = 10)  corr_heat ## Mutual plot mutual_plt(   da_results,    count_cutoff = length(steps_ids(da_results, type = \"da\")) )"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/articles/article.html","id":"define-a-consesus-strategy-using-bake","dir":"Articles","previous_headings":"","what":"Define a consesus strategy using bake","title":"Workflow with real data","text":"visually inspecting results running differential analysis methods data, necessary information define consensus strategy fits dataset. case, since DESeq2 returns results quite different methods, exclude results obtained method keep differentially abundant features present 7 methods. Additionally, bake() function allows refine consensus strategy parameters, count_cutoff, indicates minimum number methods OTU must present, weights, named vector ponderation value method. However, simplicity, parameters used example.","code":"## Extract id for deseq step to_exclude <-    steps_ids(da_results, type = \"da\") %>%    .[stringr::str_detect(., \"deseq\")]  ## Define consensus strategy da_results <- bake(da_results, exclude = to_exclude, ) da_results #> ── DAR Results ───────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 174 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Results: #>  #>      ✔ ancom__Boyoz diff_taxa = 67  #>      ✔ aldex__Danish_pastry diff_taxa = 113  #>      ✔ deseq__Pannekoek diff_taxa = 92  #>      ✔ corncob__Sou diff_taxa = 125  #>      ✔ metagenomeseq__Chatti_Pathiri diff_taxa = 136  #>      ✔ maaslin__Tortell diff_taxa = 148  #>      ✔ lefse__Nazook diff_taxa = 121  #>      ✔ wilcox__Turnover diff_taxa = 123  #>  #>      ℹ 28 taxa are present in all tested methods  #>  #> Bakes: #>  #>      ◉ 1 -> count_cutoff: NULL, weights: NULL, exclude: deseq__Pannekoek, id: bake__Cherry_pie"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/articles/article.html","id":"extract-results","dir":"Articles","previous_headings":"","what":"Extract results","title":"Workflow with real data","text":"conclude, can extract final results using cool() function. function takes prep-recipe object ID bake used input (default 1, multiple consensus strategies, can change extract desired results). visualize results, abundance_plt() function can utilized visualize differences abundance differential abundant taxa.","code":"## Extract results for bake id 1 f_results <- cool(da_results, bake = 1)  f_results #> # A tibble: 69 × 2 #>    taxa_id taxa                         #>    <chr>   <chr>                        #>  1 Otu_35  Collinsella_aerofaciens      #>  2 Otu_46  Bacteroides_caccae           #>  3 Otu_47  Bacteroides_cellulosilyticus #>  4 Otu_48  Bacteroides_clarus           #>  5 Otu_51  Bacteroides_dorei            #>  6 Otu_52  Bacteroides_eggerthii        #>  7 Otu_54  Bacteroides_faecis           #>  8 Otu_62  Bacteroides_ovatus           #>  9 Otu_63  Bacteroides_plebeius         #> 10 Otu_64  Bacteroides_salyersiae       #> # ℹ 59 more rows ## Ids for Bacteroide and Provotella species  ids <-    f_results %>%    dplyr::filter(stringr::str_detect(taxa, \"Bacteroi.*|Prevote.*\")) %>%    dplyr::pull(taxa_id)   ## Abundance plot as boxplot abundance_plt(da_results, taxa_ids = ids, type = \"boxplot\")"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/articles/article.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Workflow with real data","text":"","code":"devtools::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.3.1 (2023-06-16) #>  os       Ubuntu 22.04.3 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  en_US.UTF-8 #>  ctype    en_US.UTF-8 #>  tz       UTC #>  date     2023-09-21 #>  pandoc   3.1.1 @ /usr/local/bin/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package                  * version       date (UTC) lib source #>  abind                      1.4-5         2016-07-21 [1] CRAN (R 4.3.1) #>  ade4                       1.7-22        2023-02-06 [1] CRAN (R 4.3.1) #>  ALDEx2                     1.33.0        2023-04-25 [1] Bioconductor #>  ANCOMBC                    2.3.1         2023-07-06 [1] Bioconductor #>  ape                        5.7-1         2023-03-13 [1] CRAN (R 4.3.1) #>  ashr                       2.2-63        2023-08-21 [1] CRAN (R 4.3.1) #>  assertthat                 0.2.1         2019-03-21 [1] CRAN (R 4.3.1) #>  backports                  1.4.1         2021-12-13 [1] CRAN (R 4.3.1) #>  base64enc                  0.1-3         2015-07-28 [2] CRAN (R 4.3.1) #>  beachmat                   2.17.16       2023-09-03 [1] Bioconductor #>  beeswarm                   0.4.0         2021-06-01 [1] CRAN (R 4.3.1) #>  biglm                      0.9-2.1       2020-11-27 [1] CRAN (R 4.3.1) #>  Biobase                    2.61.0        2023-04-25 [1] Bioconductor #>  BiocGenerics               0.47.0        2023-04-25 [1] Bioconductor #>  BiocNeighbors              1.19.0        2023-04-25 [1] Bioconductor #>  BiocParallel               1.35.4        2023-08-17 [1] Bioconductor #>  BiocSingular               1.17.1        2023-07-09 [1] Bioconductor #>  biomformat                 1.29.1        2023-08-02 [1] Bioconductor #>  Biostrings                 2.69.2        2023-07-02 [1] Bioconductor #>  bit                        4.0.5         2022-11-15 [1] CRAN (R 4.3.1) #>  bit64                      4.0.5         2020-08-30 [1] CRAN (R 4.3.1) #>  bitops                     1.0-7         2021-04-24 [1] CRAN (R 4.3.1) #>  blob                       1.2.4         2023-03-17 [1] CRAN (R 4.3.1) #>  bluster                    1.11.4        2023-08-02 [1] Bioconductor #>  boot                       1.3-28.1      2022-11-22 [3] CRAN (R 4.3.1) #>  brio                       1.1.3         2021-11-30 [2] CRAN (R 4.3.1) #>  broom                      1.0.5         2023-06-09 [1] CRAN (R 4.3.1) #>  bslib                      0.5.1         2023-08-11 [2] CRAN (R 4.3.1) #>  ca                         0.71.1        2020-01-24 [1] CRAN (R 4.3.1) #>  cachem                     1.0.8         2023-05-01 [2] CRAN (R 4.3.1) #>  callr                      3.7.3         2022-11-02 [2] CRAN (R 4.3.1) #>  car                        3.1-2         2023-03-30 [1] CRAN (R 4.3.1) #>  carData                    3.0-5         2022-01-06 [1] CRAN (R 4.3.1) #>  caTools                    1.18.2        2021-03-28 [1] CRAN (R 4.3.1) #>  cellranger                 1.1.0         2016-07-27 [1] CRAN (R 4.3.1) #>  checkmate                  2.2.0         2023-04-27 [1] CRAN (R 4.3.1) #>  class                      7.3-22        2023-05-03 [3] CRAN (R 4.3.1) #>  cli                        3.6.1         2023-03-23 [2] CRAN (R 4.3.1) #>  cluster                    2.1.4         2022-08-22 [3] CRAN (R 4.3.1) #>  codetools                  0.2-19        2023-02-01 [3] CRAN (R 4.3.1) #>  coin                       1.4-2         2021-10-08 [1] CRAN (R 4.3.1) #>  colorspace                 2.1-0         2023-01-23 [1] CRAN (R 4.3.1) #>  corncob                    0.3.2         2023-08-31 [1] CRAN (R 4.3.1) #>  crayon                     1.5.2         2022-09-29 [2] CRAN (R 4.3.1) #>  crosstalk                  1.2.0         2021-11-04 [1] CRAN (R 4.3.1) #>  CVXR                       1.0-11        2022-10-30 [1] CRAN (R 4.3.1) #>  dar                      * 0.99.0        2023-09-21 [1] Bioconductor #>  data.table                 1.14.8        2023-02-17 [1] CRAN (R 4.3.1) #>  DBI                        1.1.3         2022-06-18 [1] CRAN (R 4.3.1) #>  DECIPHER                   2.29.0        2023-04-25 [1] Bioconductor #>  decontam                   1.21.0        2023-04-25 [1] Bioconductor #>  DelayedArray               0.27.10       2023-07-28 [1] Bioconductor #>  DelayedMatrixStats         1.23.4        2023-08-09 [1] Bioconductor #>  dendextend                 1.17.1        2023-03-25 [1] CRAN (R 4.3.1) #>  DEoptimR                   1.1-2         2023-08-28 [1] CRAN (R 4.3.1) #>  desc                       1.4.2         2022-09-08 [2] CRAN (R 4.3.1) #>  DescTools                  0.99.50       2023-09-06 [1] CRAN (R 4.3.1) #>  DESeq2                     1.41.10       2023-09-05 [1] Bioconductor #>  detectseparation           0.3           2022-08-26 [1] CRAN (R 4.3.1) #>  devtools                   2.4.5         2022-10-11 [2] CRAN (R 4.3.1) #>  digest                     0.6.33        2023-07-07 [2] CRAN (R 4.3.1) #>  DirichletMultinomial       1.43.0        2023-04-25 [1] Bioconductor #>  doParallel                 1.0.17        2022-02-07 [1] CRAN (R 4.3.1) #>  doRNG                    * 1.8.6         2023-01-16 [1] CRAN (R 4.3.1) #>  dplyr                      1.1.3         2023-09-03 [1] CRAN (R 4.3.1) #>  e1071                      1.7-13        2023-02-01 [1] CRAN (R 4.3.1) #>  ellipsis                   0.3.2         2021-04-29 [2] CRAN (R 4.3.1) #>  energy                     1.7-11        2022-12-22 [1] CRAN (R 4.3.1) #>  evaluate                   0.21          2023-05-05 [2] CRAN (R 4.3.1) #>  Exact                      3.2           2022-09-25 [1] CRAN (R 4.3.1) #>  expm                       0.999-7       2023-01-09 [1] CRAN (R 4.3.1) #>  fansi                      1.0.4         2023-01-22 [2] CRAN (R 4.3.1) #>  farver                     2.1.1         2022-07-06 [1] CRAN (R 4.3.1) #>  fastmap                    1.1.1         2023-02-24 [2] CRAN (R 4.3.1) #>  foreach                  * 1.5.2         2022-02-02 [1] CRAN (R 4.3.1) #>  foreign                    0.8-85        2023-09-09 [2] CRAN (R 4.3.1) #>  Formula                    1.2-5         2023-02-24 [1] CRAN (R 4.3.1) #>  fs                         1.6.3         2023-07-20 [2] CRAN (R 4.3.1) #>  generics                   0.1.3         2022-07-05 [1] CRAN (R 4.3.1) #>  GenomeInfoDb               1.37.4        2023-09-07 [1] Bioconductor #>  GenomeInfoDbData           1.2.10        2023-09-07 [1] Bioconductor #>  GenomicRanges              1.53.1        2023-05-04 [1] Bioconductor #>  getopt                     1.20.3        2019-03-22 [1] CRAN (R 4.3.1) #>  ggbeeswarm                 0.7.2         2023-04-29 [1] CRAN (R 4.3.1) #>  ggplot2                    3.4.3         2023-08-14 [1] CRAN (R 4.3.1) #>  ggrepel                    0.9.3         2023-02-03 [1] CRAN (R 4.3.1) #>  gld                        2.6.6         2022-10-23 [1] CRAN (R 4.3.1) #>  glmnet                     4.1-8         2023-08-22 [1] CRAN (R 4.3.1) #>  glue                       1.6.2         2022-02-24 [2] CRAN (R 4.3.1) #>  gmp                        0.7-2         2023-07-01 [1] CRAN (R 4.3.1) #>  gplots                     3.1.3         2022-04-25 [1] CRAN (R 4.3.1) #>  gridExtra                  2.3           2017-09-09 [1] CRAN (R 4.3.1) #>  gsl                        2.1-8         2023-01-24 [1] CRAN (R 4.3.1) #>  gtable                     0.3.4         2023-08-21 [1] CRAN (R 4.3.1) #>  gtools                     3.9.4         2022-11-27 [1] CRAN (R 4.3.1) #>  hash                       2.2.6.3       2023-08-19 [1] CRAN (R 4.3.1) #>  heatmaply                  1.4.2         2023-01-07 [1] CRAN (R 4.3.1) #>  Hmisc                      5.1-1         2023-09-12 [1] CRAN (R 4.3.1) #>  htmlTable                  2.4.1         2022-07-07 [1] CRAN (R 4.3.1) #>  htmltools                  0.5.6         2023-08-10 [2] CRAN (R 4.3.1) #>  htmlwidgets                1.6.2         2023-03-17 [2] CRAN (R 4.3.1) #>  httpuv                     1.6.11        2023-05-11 [2] CRAN (R 4.3.1) #>  httr                       1.4.7         2023-08-15 [2] CRAN (R 4.3.1) #>  igraph                     1.5.1         2023-08-10 [1] CRAN (R 4.3.1) #>  invgamma                   1.1           2017-05-07 [1] CRAN (R 4.3.1) #>  IRanges                    2.35.2        2023-06-22 [1] Bioconductor #>  irlba                      2.3.5.1       2022-10-03 [1] CRAN (R 4.3.1) #>  iterators                  1.0.14        2022-02-05 [1] CRAN (R 4.3.1) #>  jquerylib                  0.1.4         2021-04-26 [2] CRAN (R 4.3.1) #>  jsonlite                   1.8.7         2023-06-29 [2] CRAN (R 4.3.1) #>  KernSmooth                 2.23-22       2023-07-10 [2] CRAN (R 4.3.1) #>  knitr                      1.44          2023-09-11 [2] CRAN (R 4.3.1) #>  labeling                   0.4.3         2023-08-29 [1] CRAN (R 4.3.1) #>  later                      1.3.1         2023-05-02 [2] CRAN (R 4.3.1) #>  lattice                    0.21-8        2023-04-05 [3] CRAN (R 4.3.1) #>  lazyeval                   0.2.2         2019-03-15 [1] CRAN (R 4.3.1) #>  lefser                     1.11.2        2023-08-18 [1] Bioconductor #>  libcoin                    1.0-9         2021-09-27 [1] CRAN (R 4.3.1) #>  lifecycle                  1.0.3         2022-10-07 [2] CRAN (R 4.3.1) #>  limma                      3.57.7        2023-08-02 [1] Bioconductor #>  lme4                       1.1-34        2023-07-04 [1] CRAN (R 4.3.1) #>  lmerTest                   3.1-3         2020-10-23 [1] CRAN (R 4.3.1) #>  lmom                       3.0           2023-08-29 [1] CRAN (R 4.3.1) #>  locfit                     1.5-9.8       2023-06-11 [1] CRAN (R 4.3.1) #>  logging                    0.10-108      2019-07-14 [1] CRAN (R 4.3.1) #>  lpSolveAPI                 5.5.2.0-17.10 2023-09-03 [1] CRAN (R 4.3.1) #>  Maaslin2                   1.15.1        2023-06-07 [1] Bioconductor #>  magrittr                   2.0.3         2022-03-30 [2] CRAN (R 4.3.1) #>  MASS                       7.3-60        2023-05-04 [3] CRAN (R 4.3.1) #>  Matrix                     1.6-1.1       2023-09-18 [2] CRAN (R 4.3.1) #>  MatrixGenerics             1.13.1        2023-07-25 [1] Bioconductor #>  matrixStats                1.0.0         2023-06-02 [1] CRAN (R 4.3.1) #>  memoise                    2.0.1         2021-11-26 [2] CRAN (R 4.3.1) #>  metagenomeSeq              1.43.0        2023-04-25 [1] Bioconductor #>  mgcv                       1.9-0         2023-07-11 [2] CRAN (R 4.3.1) #>  mia                        1.9.12        2023-08-30 [1] Bioconductor #>  microbiome                 1.23.0        2023-04-25 [1] Bioconductor #>  mime                       0.12          2021-09-28 [2] CRAN (R 4.3.1) #>  miniUI                     0.1.1.1       2018-05-18 [2] CRAN (R 4.3.1) #>  minqa                      1.2.6         2023-09-11 [1] CRAN (R 4.3.1) #>  mixsqp                     0.3-48        2022-11-16 [1] CRAN (R 4.3.1) #>  modeltools                 0.2-23        2020-03-05 [1] CRAN (R 4.3.1) #>  multcomp                   1.4-25        2023-06-20 [1] CRAN (R 4.3.1) #>  MultiAssayExperiment       1.27.5        2023-08-25 [1] Bioconductor #>  multtest                   2.57.0        2023-04-25 [1] Bioconductor #>  munsell                    0.5.0         2018-06-12 [1] CRAN (R 4.3.1) #>  mvtnorm                    1.2-3         2023-08-25 [1] CRAN (R 4.3.1) #>  NADA                       1.6-1.1       2020-03-22 [1] CRAN (R 4.3.1) #>  nlme                       3.1-163       2023-08-09 [2] CRAN (R 4.3.1) #>  nloptr                     2.0.3         2022-05-26 [1] CRAN (R 4.3.1) #>  nnet                       7.3-19        2023-05-03 [3] CRAN (R 4.3.1) #>  numDeriv                   2016.8-1.1    2019-06-06 [1] CRAN (R 4.3.1) #>  optparse                   1.7.3         2022-07-20 [1] CRAN (R 4.3.1) #>  pbapply                    1.7-2         2023-06-27 [1] CRAN (R 4.3.1) #>  pcaPP                      2.0-3         2022-10-24 [1] CRAN (R 4.3.1) #>  permute                    0.9-7         2022-01-27 [1] CRAN (R 4.3.1) #>  phyloseq                   1.45.0        2023-04-25 [1] Bioconductor #>  pillar                     1.9.0         2023-03-22 [2] CRAN (R 4.3.1) #>  pkgbuild                   1.4.2         2023-06-26 [2] CRAN (R 4.3.1) #>  pkgconfig                  2.0.3         2019-09-22 [2] CRAN (R 4.3.1) #>  pkgdown                    2.0.7.9000    2023-09-19 [1] Github (r-lib/pkgdown@c920680) #>  pkgload                    1.3.2.1       2023-07-08 [2] CRAN (R 4.3.1) #>  plotly                     4.10.2        2023-06-03 [1] CRAN (R 4.3.1) #>  plyr                       1.8.8         2022-11-11 [1] CRAN (R 4.3.1) #>  prettyunits                1.1.1         2020-01-24 [2] CRAN (R 4.3.1) #>  processx                   3.8.2         2023-06-30 [2] CRAN (R 4.3.1) #>  profvis                    0.3.8         2023-05-02 [2] CRAN (R 4.3.1) #>  promises                   1.2.1         2023-08-10 [2] CRAN (R 4.3.1) #>  proxy                      0.4-27        2022-06-09 [1] CRAN (R 4.3.1) #>  ps                         1.7.5         2023-04-18 [2] CRAN (R 4.3.1) #>  purrr                      1.0.2         2023-08-10 [2] CRAN (R 4.3.1) #>  R6                         2.5.1         2021-08-19 [2] CRAN (R 4.3.1) #>  ragg                       1.2.5         2023-01-12 [2] CRAN (R 4.3.1) #>  rbibutils                  2.2.15        2023-08-21 [1] CRAN (R 4.3.1) #>  RColorBrewer               1.1-3         2022-04-03 [1] CRAN (R 4.3.1) #>  Rcpp                       1.0.11        2023-07-06 [2] CRAN (R 4.3.1) #>  RcppZiggurat               0.1.6         2020-10-20 [1] CRAN (R 4.3.1) #>  RCurl                      1.98-1.12     2023-03-27 [1] CRAN (R 4.3.1) #>  Rdpack                     2.5           2023-08-21 [1] CRAN (R 4.3.1) #>  readxl                     1.4.3         2023-07-06 [1] CRAN (R 4.3.1) #>  registry                   0.5-1         2019-03-05 [1] CRAN (R 4.3.1) #>  remotes                    2.4.2.1       2023-07-18 [1] CRAN (R 4.3.1) #>  reshape2                   1.4.4         2020-04-09 [1] CRAN (R 4.3.1) #>  Rfast                      2.0.8         2023-07-03 [1] CRAN (R 4.3.1) #>  rhdf5                      2.45.1        2023-07-10 [1] Bioconductor #>  rhdf5filters               1.13.5        2023-07-19 [1] Bioconductor #>  Rhdf5lib                   1.23.2        2023-09-10 [1] Bioconductor #>  rlang                      1.1.1         2023-04-28 [2] CRAN (R 4.3.1) #>  rmarkdown                  2.25          2023-09-18 [2] CRAN (R 4.3.1) #>  Rmpfr                      0.9-3         2023-08-08 [1] CRAN (R 4.3.1) #>  rngtools                 * 1.5.2         2021-09-20 [1] CRAN (R 4.3.1) #>  robustbase                 0.99-0        2023-06-16 [1] CRAN (R 4.3.1) #>  ROI                        1.0-1         2023-04-20 [1] CRAN (R 4.3.1) #>  ROI.plugin.lpsolve         1.0-2         2023-07-07 [1] CRAN (R 4.3.1) #>  rootSolve                  1.8.2.3       2021-09-29 [1] CRAN (R 4.3.1) #>  rpart                      4.1.19        2022-10-21 [3] CRAN (R 4.3.1) #>  rprojroot                  2.0.3         2022-04-02 [2] CRAN (R 4.3.1) #>  RSQLite                    2.3.1         2023-04-03 [1] CRAN (R 4.3.1) #>  rstatix                    0.7.2         2023-02-01 [1] CRAN (R 4.3.1) #>  rstudioapi                 0.15.0        2023-07-07 [2] CRAN (R 4.3.1) #>  rsvd                       1.0.5         2021-04-16 [1] CRAN (R 4.3.1) #>  Rtsne                      0.16          2022-04-17 [1] CRAN (R 4.3.1) #>  S4Arrays                   1.1.6         2023-08-30 [1] Bioconductor #>  S4Vectors                  0.39.1        2023-05-03 [1] Bioconductor #>  sandwich                   3.0-2         2022-06-15 [1] CRAN (R 4.3.1) #>  sass                       0.4.7         2023-07-15 [2] CRAN (R 4.3.1) #>  ScaledMatrix               1.9.1         2023-05-03 [1] Bioconductor #>  scales                     1.2.1         2022-08-20 [1] CRAN (R 4.3.1) #>  scater                     1.29.4        2023-08-24 [1] Bioconductor #>  scuttle                    1.11.2        2023-08-03 [1] Bioconductor #>  seriation                  1.5.1         2023-07-20 [1] CRAN (R 4.3.1) #>  sessioninfo                1.2.2         2021-12-06 [2] CRAN (R 4.3.1) #>  shape                      1.4.6         2021-05-19 [1] CRAN (R 4.3.1) #>  shiny                      1.7.5         2023-08-12 [2] CRAN (R 4.3.1) #>  SingleCellExperiment       1.23.0        2023-04-25 [1] Bioconductor #>  slam                       0.1-50        2022-01-08 [1] CRAN (R 4.3.1) #>  SparseArray                1.1.12        2023-08-31 [1] Bioconductor #>  sparseMatrixStats          1.13.4        2023-08-11 [1] Bioconductor #>  SQUAREM                    2021.1        2021-01-13 [1] CRAN (R 4.3.1) #>  statmod                    1.5.0         2023-01-06 [1] CRAN (R 4.3.1) #>  stringi                    1.7.12        2023-01-11 [2] CRAN (R 4.3.1) #>  stringr                    1.5.0         2022-12-02 [2] CRAN (R 4.3.1) #>  SummarizedExperiment       1.31.1        2023-05-01 [1] Bioconductor #>  survival                   3.5-7         2023-08-14 [2] CRAN (R 4.3.1) #>  systemfonts                1.0.4         2022-02-11 [2] CRAN (R 4.3.1) #>  testthat                   3.1.10        2023-07-06 [2] CRAN (R 4.3.1) #>  textshaping                0.3.6         2021-10-13 [2] CRAN (R 4.3.1) #>  TH.data                    1.1-2         2023-04-17 [1] CRAN (R 4.3.1) #>  tibble                     3.2.1         2023-03-20 [2] CRAN (R 4.3.1) #>  tidyr                      1.3.0         2023-01-24 [1] CRAN (R 4.3.1) #>  tidyselect                 1.2.0         2022-10-10 [1] CRAN (R 4.3.1) #>  tidytree                   0.4.5         2023-08-10 [1] CRAN (R 4.3.1) #>  treeio                     1.25.4        2023-08-25 [1] Bioconductor #>  TreeSummarizedExperiment   2.9.0         2023-04-25 [1] Bioconductor #>  truncnorm                  1.0-9         2023-03-20 [1] CRAN (R 4.3.1) #>  trust                      0.1-8         2020-01-10 [1] CRAN (R 4.3.1) #>  TSP                        1.2-4         2023-04-04 [1] CRAN (R 4.3.1) #>  UpSetR                     1.4.0         2019-05-22 [1] CRAN (R 4.3.1) #>  urlchecker                 1.0.1         2021-11-30 [2] CRAN (R 4.3.1) #>  usethis                    2.2.2         2023-07-06 [2] CRAN (R 4.3.1) #>  utf8                       1.2.3         2023-01-31 [2] CRAN (R 4.3.1) #>  vctrs                      0.6.3         2023-06-14 [2] CRAN (R 4.3.1) #>  vegan                      2.6-4         2022-10-11 [1] CRAN (R 4.3.1) #>  VGAM                       1.1-9         2023-09-19 [1] CRAN (R 4.3.1) #>  vipor                      0.4.5         2017-03-22 [1] CRAN (R 4.3.1) #>  viridis                    0.6.4         2023-07-22 [1] CRAN (R 4.3.1) #>  viridisLite                0.4.2         2023-05-02 [1] CRAN (R 4.3.1) #>  webshot                    0.5.5         2023-06-26 [1] CRAN (R 4.3.1) #>  withr                      2.5.0         2022-03-03 [2] CRAN (R 4.3.1) #>  Wrench                     1.19.0        2023-04-25 [1] Bioconductor #>  xfun                       0.40          2023-08-09 [2] CRAN (R 4.3.1) #>  xtable                     1.8-4         2019-04-21 [2] CRAN (R 4.3.1) #>  XVector                    0.41.1        2023-05-03 [1] Bioconductor #>  yaml                       2.3.7         2023-01-23 [2] CRAN (R 4.3.1) #>  yulab.utils                0.1.0         2023-09-20 [1] CRAN (R 4.3.1) #>  zCompositions              1.4.1         2023-08-23 [1] CRAN (R 4.3.1) #>  zlibbioc                   1.47.0        2023-04-25 [1] Bioconductor #>  zoo                        1.8-12        2023-04-13 [1] CRAN (R 4.3.1) #>  #>  [1] /__w/_temp/Library #>  [2] /usr/local/lib/R/site-library #>  [3] /usr/local/lib/R/library #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/articles/dar.html","id":"an-example","dir":"Articles","previous_headings":"","what":"An Example","title":"Introduction to dar","text":"package contains data set Noguera-Julian, M., et al. 2016 used find differential abundant microbial species among men sex men (MSM) non-MSM (hts). data stored inside object class phyloseq, standard input format creating recipes dar. first load data inspect :","code":"library(dar)  data(\"metaHIV_phy\", package = \"dar\")  metaHIV_phy #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 451 taxa and 156 samples ] #> sample_data() Sample Data:       [ 156 samples by 3 sample variables ] #> tax_table()   Taxonomy Table:    [ 451 taxa by 7 taxonomic ranks ]"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/articles/dar.html","id":"an-initial-recipe","dir":"Articles","previous_headings":"","what":"An Initial Recipe","title":"Introduction to dar","text":"First, create recipe object original data specify processing differential analysis steps. Recipes can created manually sequentially adding roles variables data set. easiest way create initial recipe : var_info argument corresponds variable considered modeling process tax_info indicates taxonomic level used analyses.","code":"rec_obj <- recipe(metaHIV_phy, var_info = \"RiskGroup2\", tax_info = \"Species\")  rec_obj #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/articles/dar.html","id":"preprocessing-steps","dir":"Articles","previous_headings":"","what":"Preprocessing Steps","title":"Introduction to dar","text":", preprocessing steps step X can added sequentially one two ways: Note step_ancom functions always return updated recipes. two types steps, charge processing (prepro) destined define methods differential analysis (da). prepro steps used modify data loaded recipe used da steps. ‘dar’ package include 3 main preprocessing functionalities. step_subset_taxa: used subsetting columns values within tax_table. step_filter_taxa: used filtering OTUs recipe objects. step_rarefaction: used resample OTU table samples library size. data, can add operation preprocessing data stored initial recpie. First, use step_subset_taxa retain Bacteria Archaea OTUs Kingdom taxonomic level. filter OTUs least 3% samples counts greater 0.","code":"rec_obj <- step_{X}(rec_obj, arguments)    ## or rec_obj <- rec_obj %>% step_{X}(arguments) rec_obj <- rec_obj %>%    step_subset_taxa(expr = 'Kingdom %in% c(\"Bacteria\", \"Archaea\")') %>%    step_filter_taxa(.f = \"function(x) sum(x > 0) >= (0.3 * length(x))\")    rec_obj #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Preporcessing steps: #>  #>      ◉ step_subset_taxa() id = subset_taxa__Marry_girl_cake  #>      ◉ step_filter_taxa() id = filter_taxa__Palmier  #>  #> DA steps:"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/articles/dar.html","id":"differential-analysis","dir":"Articles","previous_headings":"","what":"Differential Analysis","title":"Introduction to dar","text":"Now defined preprocessing input data da methods used, need define . introduction use metagenomeSeq, maaslin2 DESeq2 methods default parameters (defined authors method). ‘dar’ package includes da steps defined . full list:","code":"rec_obj <- rec_obj %>%    step_deseq() %>%    step_metagenomeseq(rm_zeros = 0.01) %>%    step_maaslin()  rec_obj #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Preporcessing steps: #>  #>      ◉ step_subset_taxa() id = subset_taxa__Marry_girl_cake  #>      ◉ step_filter_taxa() id = filter_taxa__Palmier  #>  #> DA steps: #>  #>      ◉ step_deseq() id = deseq__Crocetta_of_Caltanissetta  #>      ◉ step_metagenomeseq() id = metagenomeseq__Zeeuwse_bolus  #>      ◉ step_maaslin() id = maaslin__Inipit grep(\"^step_\", ls(\"package:dar\"), value = TRUE) %>%    grep(     \"_new|_to_expr|filter|subset|rarefaction\", ., value = TRUE, invert = TRUE   ) #> [1] \"step_aldex\"         \"step_ancom\"         \"step_corncob\"       #> [4] \"step_deseq\"         \"step_lefse\"         \"step_maaslin\"       #> [7] \"step_metagenomeseq\" \"step_wilcox\""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/articles/dar.html","id":"prep","dir":"Articles","previous_headings":"","what":"Prep","title":"Introduction to dar","text":"ensure reproducibility consistency generated results, steps defined recipe executed time using prep function. Note resulting object print shows information amount differentially abundant OTUs methods, well number OTUs detected methods (consensus).","code":"da_results <- prep(rec_obj, parallel = TRUE) da_results #> ── DAR Results ───────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 101 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Results: #>  #>      ✔ deseq__Crocetta_of_Caltanissetta diff_taxa = 53  #>      ✔ metagenomeseq__Zeeuwse_bolus diff_taxa = 69  #>      ✔ maaslin__Inipit diff_taxa = 86  #>  #>      ℹ 46 taxa are present in all tested methods"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/articles/dar.html","id":"bake-and-cool","dir":"Articles","previous_headings":"","what":"Bake and cool","title":"Introduction to dar","text":"Now results need extract , however first need define consensus strategy bake. example interested OTUs detected differentially abundant three methods used. Finally can extract table results using cool function.","code":"## Number of used methods count <- steps_ids(da_results, type = \"da\") %>% length()  ## Define the bake  da_results <- bake(da_results, count_cutoff = count) cool(da_results) #> # A tibble: 46 × 2 #>    taxa_id taxa                         #>    <chr>   <chr>                        #>  1 Otu_34  Olsenella_scatoligenes       #>  2 Otu_35  Collinsella_aerofaciens      #>  3 Otu_37  Collinsella_stercoris        #>  4 Otu_45  Slackia_isoflavoniconvertens #>  5 Otu_47  Bacteroides_cellulosilyticus #>  6 Otu_51  Bacteroides_dorei            #>  7 Otu_52  Bacteroides_eggerthii        #>  8 Otu_62  Bacteroides_ovatus           #>  9 Otu_69  Bacteroides_sp_CAG_530       #> 10 Otu_78  Bacteroides_uniformis        #> # ℹ 36 more rows"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/articles/dar.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Introduction to dar","text":"","code":"devtools::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.3.1 (2023-06-16) #>  os       Ubuntu 22.04.3 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  en_US.UTF-8 #>  ctype    en_US.UTF-8 #>  tz       UTC #>  date     2023-09-21 #>  pandoc   3.1.1 @ /usr/local/bin/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package          * version    date (UTC) lib source #>  ade4               1.7-22     2023-02-06 [1] CRAN (R 4.3.1) #>  ape                5.7-1      2023-03-13 [1] CRAN (R 4.3.1) #>  assertthat         0.2.1      2019-03-21 [1] CRAN (R 4.3.1) #>  Biobase            2.61.0     2023-04-25 [1] Bioconductor #>  BiocGenerics       0.47.0     2023-04-25 [1] Bioconductor #>  biomformat         1.29.1     2023-08-02 [1] Bioconductor #>  Biostrings         2.69.2     2023-07-02 [1] Bioconductor #>  bitops             1.0-7      2021-04-24 [1] CRAN (R 4.3.1) #>  brio               1.1.3      2021-11-30 [2] CRAN (R 4.3.1) #>  bslib              0.5.1      2023-08-11 [2] CRAN (R 4.3.1) #>  ca                 0.71.1     2020-01-24 [1] CRAN (R 4.3.1) #>  cachem             1.0.8      2023-05-01 [2] CRAN (R 4.3.1) #>  callr              3.7.3      2022-11-02 [2] CRAN (R 4.3.1) #>  cli                3.6.1      2023-03-23 [2] CRAN (R 4.3.1) #>  cluster            2.1.4      2022-08-22 [3] CRAN (R 4.3.1) #>  codetools          0.2-19     2023-02-01 [3] CRAN (R 4.3.1) #>  colorspace         2.1-0      2023-01-23 [1] CRAN (R 4.3.1) #>  crayon             1.5.2      2022-09-29 [2] CRAN (R 4.3.1) #>  dar              * 0.99.0     2023-09-21 [1] Bioconductor #>  data.table         1.14.8     2023-02-17 [1] CRAN (R 4.3.1) #>  dendextend         1.17.1     2023-03-25 [1] CRAN (R 4.3.1) #>  desc               1.4.2      2022-09-08 [2] CRAN (R 4.3.1) #>  devtools           2.4.5      2022-10-11 [2] CRAN (R 4.3.1) #>  digest             0.6.33     2023-07-07 [2] CRAN (R 4.3.1) #>  dplyr              1.1.3      2023-09-03 [1] CRAN (R 4.3.1) #>  ellipsis           0.3.2      2021-04-29 [2] CRAN (R 4.3.1) #>  evaluate           0.21       2023-05-05 [2] CRAN (R 4.3.1) #>  fansi              1.0.4      2023-01-22 [2] CRAN (R 4.3.1) #>  fastmap            1.1.1      2023-02-24 [2] CRAN (R 4.3.1) #>  foreach            1.5.2      2022-02-02 [1] CRAN (R 4.3.1) #>  fs                 1.6.3      2023-07-20 [2] CRAN (R 4.3.1) #>  furrr              0.3.1      2022-08-15 [1] CRAN (R 4.3.1) #>  future             1.33.0     2023-07-01 [1] CRAN (R 4.3.1) #>  generics           0.1.3      2022-07-05 [1] CRAN (R 4.3.1) #>  GenomeInfoDb       1.37.4     2023-09-07 [1] Bioconductor #>  GenomeInfoDbData   1.2.10     2023-09-07 [1] Bioconductor #>  ggplot2            3.4.3      2023-08-14 [1] CRAN (R 4.3.1) #>  globals            0.16.2     2022-11-21 [1] CRAN (R 4.3.1) #>  glue               1.6.2      2022-02-24 [2] CRAN (R 4.3.1) #>  gridExtra          2.3        2017-09-09 [1] CRAN (R 4.3.1) #>  gtable             0.3.4      2023-08-21 [1] CRAN (R 4.3.1) #>  heatmaply          1.4.2      2023-01-07 [1] CRAN (R 4.3.1) #>  htmltools          0.5.6      2023-08-10 [2] CRAN (R 4.3.1) #>  htmlwidgets        1.6.2      2023-03-17 [2] CRAN (R 4.3.1) #>  httpuv             1.6.11     2023-05-11 [2] CRAN (R 4.3.1) #>  httr               1.4.7      2023-08-15 [2] CRAN (R 4.3.1) #>  igraph             1.5.1      2023-08-10 [1] CRAN (R 4.3.1) #>  IRanges            2.35.2     2023-06-22 [1] Bioconductor #>  iterators          1.0.14     2022-02-05 [1] CRAN (R 4.3.1) #>  jquerylib          0.1.4      2021-04-26 [2] CRAN (R 4.3.1) #>  jsonlite           1.8.7      2023-06-29 [2] CRAN (R 4.3.1) #>  knitr              1.44       2023-09-11 [2] CRAN (R 4.3.1) #>  later              1.3.1      2023-05-02 [2] CRAN (R 4.3.1) #>  lattice            0.21-8     2023-04-05 [3] CRAN (R 4.3.1) #>  lazyeval           0.2.2      2019-03-15 [1] CRAN (R 4.3.1) #>  lifecycle          1.0.3      2022-10-07 [2] CRAN (R 4.3.1) #>  listenv            0.9.0      2022-12-16 [1] CRAN (R 4.3.1) #>  magrittr           2.0.3      2022-03-30 [2] CRAN (R 4.3.1) #>  MASS               7.3-60     2023-05-04 [3] CRAN (R 4.3.1) #>  Matrix             1.6-1.1    2023-09-18 [2] CRAN (R 4.3.1) #>  memoise            2.0.1      2021-11-26 [2] CRAN (R 4.3.1) #>  mgcv               1.9-0      2023-07-11 [2] CRAN (R 4.3.1) #>  mime               0.12       2021-09-28 [2] CRAN (R 4.3.1) #>  miniUI             0.1.1.1    2018-05-18 [2] CRAN (R 4.3.1) #>  multtest           2.57.0     2023-04-25 [1] Bioconductor #>  munsell            0.5.0      2018-06-12 [1] CRAN (R 4.3.1) #>  nlme               3.1-163    2023-08-09 [2] CRAN (R 4.3.1) #>  parallelly         1.36.0     2023-05-26 [1] CRAN (R 4.3.1) #>  permute            0.9-7      2022-01-27 [1] CRAN (R 4.3.1) #>  phyloseq           1.45.0     2023-04-25 [1] Bioconductor #>  pillar             1.9.0      2023-03-22 [2] CRAN (R 4.3.1) #>  pkgbuild           1.4.2      2023-06-26 [2] CRAN (R 4.3.1) #>  pkgconfig          2.0.3      2019-09-22 [2] CRAN (R 4.3.1) #>  pkgdown            2.0.7.9000 2023-09-19 [1] Github (r-lib/pkgdown@c920680) #>  pkgload            1.3.2.1    2023-07-08 [2] CRAN (R 4.3.1) #>  plotly             4.10.2     2023-06-03 [1] CRAN (R 4.3.1) #>  plyr               1.8.8      2022-11-11 [1] CRAN (R 4.3.1) #>  prettyunits        1.1.1      2020-01-24 [2] CRAN (R 4.3.1) #>  processx           3.8.2      2023-06-30 [2] CRAN (R 4.3.1) #>  profvis            0.3.8      2023-05-02 [2] CRAN (R 4.3.1) #>  promises           1.2.1      2023-08-10 [2] CRAN (R 4.3.1) #>  ps                 1.7.5      2023-04-18 [2] CRAN (R 4.3.1) #>  purrr              1.0.2      2023-08-10 [2] CRAN (R 4.3.1) #>  R6                 2.5.1      2021-08-19 [2] CRAN (R 4.3.1) #>  ragg               1.2.5      2023-01-12 [2] CRAN (R 4.3.1) #>  RColorBrewer       1.1-3      2022-04-03 [1] CRAN (R 4.3.1) #>  Rcpp               1.0.11     2023-07-06 [2] CRAN (R 4.3.1) #>  RCurl              1.98-1.12  2023-03-27 [1] CRAN (R 4.3.1) #>  registry           0.5-1      2019-03-05 [1] CRAN (R 4.3.1) #>  remotes            2.4.2.1    2023-07-18 [1] CRAN (R 4.3.1) #>  reshape2           1.4.4      2020-04-09 [1] CRAN (R 4.3.1) #>  rhdf5              2.45.1     2023-07-10 [1] Bioconductor #>  rhdf5filters       1.13.5     2023-07-19 [1] Bioconductor #>  Rhdf5lib           1.23.2     2023-09-10 [1] Bioconductor #>  rlang              1.1.1      2023-04-28 [2] CRAN (R 4.3.1) #>  rmarkdown          2.25       2023-09-18 [2] CRAN (R 4.3.1) #>  rprojroot          2.0.3      2022-04-02 [2] CRAN (R 4.3.1) #>  S4Vectors          0.39.1     2023-05-03 [1] Bioconductor #>  sass               0.4.7      2023-07-15 [2] CRAN (R 4.3.1) #>  scales             1.2.1      2022-08-20 [1] CRAN (R 4.3.1) #>  seriation          1.5.1      2023-07-20 [1] CRAN (R 4.3.1) #>  sessioninfo        1.2.2      2021-12-06 [2] CRAN (R 4.3.1) #>  shiny              1.7.5      2023-08-12 [2] CRAN (R 4.3.1) #>  stringi            1.7.12     2023-01-11 [2] CRAN (R 4.3.1) #>  stringr            1.5.0      2022-12-02 [2] CRAN (R 4.3.1) #>  survival           3.5-7      2023-08-14 [2] CRAN (R 4.3.1) #>  systemfonts        1.0.4      2022-02-11 [2] CRAN (R 4.3.1) #>  testthat           3.1.10     2023-07-06 [2] CRAN (R 4.3.1) #>  textshaping        0.3.6      2021-10-13 [2] CRAN (R 4.3.1) #>  tibble             3.2.1      2023-03-20 [2] CRAN (R 4.3.1) #>  tidyr              1.3.0      2023-01-24 [1] CRAN (R 4.3.1) #>  tidyselect         1.2.0      2022-10-10 [1] CRAN (R 4.3.1) #>  TSP                1.2-4      2023-04-04 [1] CRAN (R 4.3.1) #>  UpSetR             1.4.0      2019-05-22 [1] CRAN (R 4.3.1) #>  urlchecker         1.0.1      2021-11-30 [2] CRAN (R 4.3.1) #>  usethis            2.2.2      2023-07-06 [2] CRAN (R 4.3.1) #>  utf8               1.2.3      2023-01-31 [2] CRAN (R 4.3.1) #>  vctrs              0.6.3      2023-06-14 [2] CRAN (R 4.3.1) #>  vegan              2.6-4      2022-10-11 [1] CRAN (R 4.3.1) #>  viridis            0.6.4      2023-07-22 [1] CRAN (R 4.3.1) #>  viridisLite        0.4.2      2023-05-02 [1] CRAN (R 4.3.1) #>  webshot            0.5.5      2023-06-26 [1] CRAN (R 4.3.1) #>  withr              2.5.0      2022-03-03 [2] CRAN (R 4.3.1) #>  xfun               0.40       2023-08-09 [2] CRAN (R 4.3.1) #>  xtable             1.8-4      2019-04-21 [2] CRAN (R 4.3.1) #>  XVector            0.41.1     2023-05-03 [1] Bioconductor #>  yaml               2.3.7      2023-01-23 [2] CRAN (R 4.3.1) #>  zlibbioc           1.47.0     2023-04-25 [1] Bioconductor #>  #>  [1] /__w/_temp/Library #>  [2] /usr/local/lib/R/site-library #>  [3] /usr/local/lib/R/library #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/articles/data_import.html","id":"converting-data-in-biome-format-to-phyloseq","dir":"Articles","previous_headings":"","what":"Converting Data in “biome” Format to Phyloseq","title":"Converting Common Data Formats to Phyloseq","text":"convert data “biome” format phyloseq format, can use phyloseq::import_biom() function. ’s step--step example perform conversion: example, read_biom() function used read data “biome” format file, import_biom() used convert phyloseq format. may need adjust parameters according specific details data. conversion complete, important inspect phyloseq object identify variable interest taxonomic level initializing recipe. provided code snippet, sample_data() tax_table() functions allow inspect sample metadata taxonomic information, respectively, within phyloseq object. inspection aids selecting appropriate variables initializing recipe. following steps, successfully converted data “biome” format phyloseq format initialized recipe differential abundance analysis.","code":"library(phyloseq)  # Example of a rich dense biom file rich_dense_biom  <-   system.file(\"extdata\", \"rich_dense_otu_table.biom\",  package = \"phyloseq\")  # Import biom as a phyloseq-class object phy <- phyloseq::import_biom(   rich_dense_biom,     parseFunction = parse_taxonomy_greengenes )  phy #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 5 taxa and 6 samples ] #> sample_data() Sample Data:       [ 6 samples by 4 sample variables ] #> tax_table()   Taxonomy Table:    [ 5 taxa by 7 taxonomic ranks ] # Print sample_data phyloseq::sample_data(phy) #>         BarcodeSequence  LinkerPrimerSequence BODY_SITE Description #> Sample1    CGCTTATCGAGA CATGCTGCCTCCCGTAGGAGT       gut   human gut #> Sample2    CATACCAGTAGC CATGCTGCCTCCCGTAGGAGT       gut   human gut #> Sample3    CTCTCTACCTGT CATGCTGCCTCCCGTAGGAGT       gut   human gut #> Sample4    CTCTCGGCCTGT CATGCTGCCTCCCGTAGGAGT      skin  human skin #> Sample5    CTCTCTACCAAT CATGCTGCCTCCCGTAGGAGT      skin  human skin #> Sample6    CTAACTACCAAT CATGCTGCCTCCCGTAGGAGT      skin  human skin  # Print tax_table phyloseq::tax_table(phy) #> Taxonomy Table:     [5 taxa by 7 taxonomic ranks]: #>          Kingdom    Phylum           Class                 Order               #> GG_OTU_1 \"Bacteria\" \"Proteobacteria\" \"Gammaproteobacteria\" \"Enterobacteriales\" #> GG_OTU_2 \"Bacteria\" \"Cyanobacteria\"  \"Nostocophycideae\"    \"Nostocales\"        #> GG_OTU_3 \"Archaea\"  \"Euryarchaeota\"  \"Methanomicrobia\"     \"Methanosarcinales\" #> GG_OTU_4 \"Bacteria\" \"Firmicutes\"     \"Clostridia\"          \"Halanaerobiales\"   #> GG_OTU_5 \"Bacteria\" \"Proteobacteria\" \"Gammaproteobacteria\" \"Enterobacteriales\" #>          Family               Genus            Species                        #> GG_OTU_1 \"Enterobacteriaceae\" \"Escherichia\"    NA                             #> GG_OTU_2 \"Nostocaceae\"        \"Dolichospermum\" NA                             #> GG_OTU_3 \"Methanosarcinaceae\" \"Methanosarcina\" NA                             #> GG_OTU_4 \"Halanaerobiaceae\"   \"Halanaerobium\"  \"Halanaerobiumsaccharolyticum\" #> GG_OTU_5 \"Enterobacteriaceae\" \"Escherichia\"    NA  # Recipe init rec <- dar::recipe(phy, var_info = \"BODY_SITE\", tax_info = \"Genus\")  rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 5 taxa and 6 samples  #>      ℹ variable of interes BODY_SITE (class: character, levels: gut, skin)  #>      ℹ taxonomic level Genus"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/articles/data_import.html","id":"converting-data-in-the-form-of-a-treesummarizedexperiment-to-phyloseq","dir":"Articles","previous_headings":"","what":"Converting Data in the Form of a “TreeSummarizedExperiment” to Phyloseq","title":"Converting Common Data Formats to Phyloseq","text":"dealing data form “TreeSummarizedExperiment”, makePhyloseqFromTreeSummarizedExperiment() function “mia” package can used conversion. ’s example : example, first load necessary packages obtain “TreeSummarizedExperiment” object called tse. use makePhyloseqFromTreeSummarizedExperiment() function convert tse phyloseq object, stored variable phy. resulting phyloseq object can printed inspect structure contents. Additionally, tables available within “TreeSummarizedExperiment” object, relative abundances, can choose using assay.type parameter. code snippet, demonstrate create phyloseq object relative abundance table transforming counts using transformCounts() function performing conversion. following steps, can successfully convert data form “TreeSummarizedExperiment” phyloseq format, allowing leverage rich functionalities phyloseq package analysis.","code":"library(mia)  # Get tse object data(GlobalPatterns) tse <- GlobalPatterns  # Create a phyloseq object from it phy <- mia::makePhyloseqFromTreeSummarizedExperiment(tse)  phy #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 19216 taxa and 26 samples ] #> sample_data() Sample Data:       [ 26 samples by 7 sample variables ] #> tax_table()   Taxonomy Table:    [ 19216 taxa by 7 taxonomic ranks ] #> phy_tree()    Phylogenetic Tree: [ 19216 tips and 19215 internal nodes ]  # By default the chosen table is counts, but if there are other tables, # they can be chosen with assay.type.  # Counts relative abundances table tse <- mia::transformAssay(tse, method = \"relabundance\") phy2 <- mia::makePhyloseqFromTreeSummarizedExperiment(   tse,   assay.type = \"relabundance\" )  phy2 #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 19216 taxa and 26 samples ] #> sample_data() Sample Data:       [ 26 samples by 7 sample variables ] #> tax_table()   Taxonomy Table:    [ 19216 taxa by 7 taxonomic ranks ] #> phy_tree()    Phylogenetic Tree: [ 19216 tips and 19215 internal nodes ]"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/articles/data_import.html","id":"conclusions","dir":"Articles","previous_headings":"","what":"Conclusions","title":"Converting Common Data Formats to Phyloseq","text":"vignette presented process converting data “biome” format form “TreeSummarizedExperiment” phyloseq format. providing users ability convert data required format differential abundance analysis, promotes integration different data sources facilitates comparative analysis microbiomes.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/articles/data_import.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Converting Common Data Formats to Phyloseq","text":"","code":"devtools::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.3.1 (2023-06-16) #>  os       Ubuntu 22.04.3 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  en_US.UTF-8 #>  ctype    en_US.UTF-8 #>  tz       UTC #>  date     2023-09-21 #>  pandoc   3.1.1 @ /usr/local/bin/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package                  * version    date (UTC) lib source #>  abind                      1.4-5      2016-07-21 [1] CRAN (R 4.3.1) #>  ade4                       1.7-22     2023-02-06 [1] CRAN (R 4.3.1) #>  ape                        5.7-1      2023-03-13 [1] CRAN (R 4.3.1) #>  assertthat                 0.2.1      2019-03-21 [1] CRAN (R 4.3.1) #>  beachmat                   2.17.16    2023-09-03 [1] Bioconductor #>  beeswarm                   0.4.0      2021-06-01 [1] CRAN (R 4.3.1) #>  Biobase                  * 2.61.0     2023-04-25 [1] Bioconductor #>  BiocGenerics             * 0.47.0     2023-04-25 [1] Bioconductor #>  BiocNeighbors              1.19.0     2023-04-25 [1] Bioconductor #>  BiocParallel               1.35.4     2023-08-17 [1] Bioconductor #>  BiocSingular               1.17.1     2023-07-09 [1] Bioconductor #>  biomformat                 1.29.1     2023-08-02 [1] Bioconductor #>  Biostrings               * 2.69.2     2023-07-02 [1] Bioconductor #>  bit                        4.0.5      2022-11-15 [1] CRAN (R 4.3.1) #>  bit64                      4.0.5      2020-08-30 [1] CRAN (R 4.3.1) #>  bitops                     1.0-7      2021-04-24 [1] CRAN (R 4.3.1) #>  blob                       1.2.4      2023-03-17 [1] CRAN (R 4.3.1) #>  bluster                    1.11.4     2023-08-02 [1] Bioconductor #>  bslib                      0.5.1      2023-08-11 [2] CRAN (R 4.3.1) #>  ca                         0.71.1     2020-01-24 [1] CRAN (R 4.3.1) #>  cachem                     1.0.8      2023-05-01 [2] CRAN (R 4.3.1) #>  callr                      3.7.3      2022-11-02 [2] CRAN (R 4.3.1) #>  cli                        3.6.1      2023-03-23 [2] CRAN (R 4.3.1) #>  cluster                    2.1.4      2022-08-22 [3] CRAN (R 4.3.1) #>  codetools                  0.2-19     2023-02-01 [3] CRAN (R 4.3.1) #>  colorspace                 2.1-0      2023-01-23 [1] CRAN (R 4.3.1) #>  crayon                     1.5.2      2022-09-29 [2] CRAN (R 4.3.1) #>  dar                        0.99.0     2023-09-21 [1] Bioconductor #>  data.table                 1.14.8     2023-02-17 [1] CRAN (R 4.3.1) #>  DBI                        1.1.3      2022-06-18 [1] CRAN (R 4.3.1) #>  DECIPHER                   2.29.0     2023-04-25 [1] Bioconductor #>  decontam                   1.21.0     2023-04-25 [1] Bioconductor #>  DelayedArray               0.27.10    2023-07-28 [1] Bioconductor #>  DelayedMatrixStats         1.23.4     2023-08-09 [1] Bioconductor #>  dendextend                 1.17.1     2023-03-25 [1] CRAN (R 4.3.1) #>  desc                       1.4.2      2022-09-08 [2] CRAN (R 4.3.1) #>  devtools                   2.4.5      2022-10-11 [2] CRAN (R 4.3.1) #>  digest                     0.6.33     2023-07-07 [2] CRAN (R 4.3.1) #>  DirichletMultinomial       1.43.0     2023-04-25 [1] Bioconductor #>  dplyr                      1.1.3      2023-09-03 [1] CRAN (R 4.3.1) #>  ellipsis                   0.3.2      2021-04-29 [2] CRAN (R 4.3.1) #>  evaluate                   0.21       2023-05-05 [2] CRAN (R 4.3.1) #>  fansi                      1.0.4      2023-01-22 [2] CRAN (R 4.3.1) #>  fastmap                    1.1.1      2023-02-24 [2] CRAN (R 4.3.1) #>  foreach                    1.5.2      2022-02-02 [1] CRAN (R 4.3.1) #>  fs                         1.6.3      2023-07-20 [2] CRAN (R 4.3.1) #>  generics                   0.1.3      2022-07-05 [1] CRAN (R 4.3.1) #>  GenomeInfoDb             * 1.37.4     2023-09-07 [1] Bioconductor #>  GenomeInfoDbData           1.2.10     2023-09-07 [1] Bioconductor #>  GenomicRanges            * 1.53.1     2023-05-04 [1] Bioconductor #>  ggbeeswarm                 0.7.2      2023-04-29 [1] CRAN (R 4.3.1) #>  ggplot2                    3.4.3      2023-08-14 [1] CRAN (R 4.3.1) #>  ggrepel                    0.9.3      2023-02-03 [1] CRAN (R 4.3.1) #>  glue                       1.6.2      2022-02-24 [2] CRAN (R 4.3.1) #>  gridExtra                  2.3        2017-09-09 [1] CRAN (R 4.3.1) #>  gtable                     0.3.4      2023-08-21 [1] CRAN (R 4.3.1) #>  heatmaply                  1.4.2      2023-01-07 [1] CRAN (R 4.3.1) #>  htmltools                  0.5.6      2023-08-10 [2] CRAN (R 4.3.1) #>  htmlwidgets                1.6.2      2023-03-17 [2] CRAN (R 4.3.1) #>  httpuv                     1.6.11     2023-05-11 [2] CRAN (R 4.3.1) #>  httr                       1.4.7      2023-08-15 [2] CRAN (R 4.3.1) #>  igraph                     1.5.1      2023-08-10 [1] CRAN (R 4.3.1) #>  IRanges                  * 2.35.2     2023-06-22 [1] Bioconductor #>  irlba                      2.3.5.1    2022-10-03 [1] CRAN (R 4.3.1) #>  iterators                  1.0.14     2022-02-05 [1] CRAN (R 4.3.1) #>  jquerylib                  0.1.4      2021-04-26 [2] CRAN (R 4.3.1) #>  jsonlite                   1.8.7      2023-06-29 [2] CRAN (R 4.3.1) #>  knitr                      1.44       2023-09-11 [2] CRAN (R 4.3.1) #>  later                      1.3.1      2023-05-02 [2] CRAN (R 4.3.1) #>  lattice                    0.21-8     2023-04-05 [3] CRAN (R 4.3.1) #>  lazyeval                   0.2.2      2019-03-15 [1] CRAN (R 4.3.1) #>  lifecycle                  1.0.3      2022-10-07 [2] CRAN (R 4.3.1) #>  magrittr                   2.0.3      2022-03-30 [2] CRAN (R 4.3.1) #>  MASS                       7.3-60     2023-05-04 [3] CRAN (R 4.3.1) #>  Matrix                     1.6-1.1    2023-09-18 [2] CRAN (R 4.3.1) #>  MatrixGenerics           * 1.13.1     2023-07-25 [1] Bioconductor #>  matrixStats              * 1.0.0      2023-06-02 [1] CRAN (R 4.3.1) #>  memoise                    2.0.1      2021-11-26 [2] CRAN (R 4.3.1) #>  mgcv                       1.9-0      2023-07-11 [2] CRAN (R 4.3.1) #>  mia                      * 1.9.12     2023-08-30 [1] Bioconductor #>  mime                       0.12       2021-09-28 [2] CRAN (R 4.3.1) #>  miniUI                     0.1.1.1    2018-05-18 [2] CRAN (R 4.3.1) #>  MultiAssayExperiment     * 1.27.5     2023-08-25 [1] Bioconductor #>  multtest                   2.57.0     2023-04-25 [1] Bioconductor #>  munsell                    0.5.0      2018-06-12 [1] CRAN (R 4.3.1) #>  nlme                       3.1-163    2023-08-09 [2] CRAN (R 4.3.1) #>  permute                    0.9-7      2022-01-27 [1] CRAN (R 4.3.1) #>  phyloseq                 * 1.45.0     2023-04-25 [1] Bioconductor #>  pillar                     1.9.0      2023-03-22 [2] CRAN (R 4.3.1) #>  pkgbuild                   1.4.2      2023-06-26 [2] CRAN (R 4.3.1) #>  pkgconfig                  2.0.3      2019-09-22 [2] CRAN (R 4.3.1) #>  pkgdown                    2.0.7.9000 2023-09-19 [1] Github (r-lib/pkgdown@c920680) #>  pkgload                    1.3.2.1    2023-07-08 [2] CRAN (R 4.3.1) #>  plotly                     4.10.2     2023-06-03 [1] CRAN (R 4.3.1) #>  plyr                       1.8.8      2022-11-11 [1] CRAN (R 4.3.1) #>  prettyunits                1.1.1      2020-01-24 [2] CRAN (R 4.3.1) #>  processx                   3.8.2      2023-06-30 [2] CRAN (R 4.3.1) #>  profvis                    0.3.8      2023-05-02 [2] CRAN (R 4.3.1) #>  promises                   1.2.1      2023-08-10 [2] CRAN (R 4.3.1) #>  ps                         1.7.5      2023-04-18 [2] CRAN (R 4.3.1) #>  purrr                      1.0.2      2023-08-10 [2] CRAN (R 4.3.1) #>  R6                         2.5.1      2021-08-19 [2] CRAN (R 4.3.1) #>  ragg                       1.2.5      2023-01-12 [2] CRAN (R 4.3.1) #>  RColorBrewer               1.1-3      2022-04-03 [1] CRAN (R 4.3.1) #>  Rcpp                       1.0.11     2023-07-06 [2] CRAN (R 4.3.1) #>  RCurl                      1.98-1.12  2023-03-27 [1] CRAN (R 4.3.1) #>  registry                   0.5-1      2019-03-05 [1] CRAN (R 4.3.1) #>  remotes                    2.4.2.1    2023-07-18 [1] CRAN (R 4.3.1) #>  reshape2                   1.4.4      2020-04-09 [1] CRAN (R 4.3.1) #>  rhdf5                      2.45.1     2023-07-10 [1] Bioconductor #>  rhdf5filters               1.13.5     2023-07-19 [1] Bioconductor #>  Rhdf5lib                   1.23.2     2023-09-10 [1] Bioconductor #>  rlang                      1.1.1      2023-04-28 [2] CRAN (R 4.3.1) #>  rmarkdown                  2.25       2023-09-18 [2] CRAN (R 4.3.1) #>  rprojroot                  2.0.3      2022-04-02 [2] CRAN (R 4.3.1) #>  RSQLite                    2.3.1      2023-04-03 [1] CRAN (R 4.3.1) #>  rsvd                       1.0.5      2021-04-16 [1] CRAN (R 4.3.1) #>  S4Arrays                   1.1.6      2023-08-30 [1] Bioconductor #>  S4Vectors                * 0.39.1     2023-05-03 [1] Bioconductor #>  sass                       0.4.7      2023-07-15 [2] CRAN (R 4.3.1) #>  ScaledMatrix               1.9.1      2023-05-03 [1] Bioconductor #>  scales                     1.2.1      2022-08-20 [1] CRAN (R 4.3.1) #>  scater                     1.29.4     2023-08-24 [1] Bioconductor #>  scuttle                    1.11.2     2023-08-03 [1] Bioconductor #>  seriation                  1.5.1      2023-07-20 [1] CRAN (R 4.3.1) #>  sessioninfo                1.2.2      2021-12-06 [2] CRAN (R 4.3.1) #>  shiny                      1.7.5      2023-08-12 [2] CRAN (R 4.3.1) #>  SingleCellExperiment     * 1.23.0     2023-04-25 [1] Bioconductor #>  SparseArray                1.1.12     2023-08-31 [1] Bioconductor #>  sparseMatrixStats          1.13.4     2023-08-11 [1] Bioconductor #>  stringi                    1.7.12     2023-01-11 [2] CRAN (R 4.3.1) #>  stringr                    1.5.0      2022-12-02 [2] CRAN (R 4.3.1) #>  SummarizedExperiment     * 1.31.1     2023-05-01 [1] Bioconductor #>  survival                   3.5-7      2023-08-14 [2] CRAN (R 4.3.1) #>  systemfonts                1.0.4      2022-02-11 [2] CRAN (R 4.3.1) #>  textshaping                0.3.6      2021-10-13 [2] CRAN (R 4.3.1) #>  tibble                     3.2.1      2023-03-20 [2] CRAN (R 4.3.1) #>  tidyr                      1.3.0      2023-01-24 [1] CRAN (R 4.3.1) #>  tidyselect                 1.2.0      2022-10-10 [1] CRAN (R 4.3.1) #>  tidytree                   0.4.5      2023-08-10 [1] CRAN (R 4.3.1) #>  treeio                     1.25.4     2023-08-25 [1] Bioconductor #>  TreeSummarizedExperiment * 2.9.0      2023-04-25 [1] Bioconductor #>  TSP                        1.2-4      2023-04-04 [1] CRAN (R 4.3.1) #>  UpSetR                     1.4.0      2019-05-22 [1] CRAN (R 4.3.1) #>  urlchecker                 1.0.1      2021-11-30 [2] CRAN (R 4.3.1) #>  usethis                    2.2.2      2023-07-06 [2] CRAN (R 4.3.1) #>  utf8                       1.2.3      2023-01-31 [2] CRAN (R 4.3.1) #>  vctrs                      0.6.3      2023-06-14 [2] CRAN (R 4.3.1) #>  vegan                      2.6-4      2022-10-11 [1] CRAN (R 4.3.1) #>  vipor                      0.4.5      2017-03-22 [1] CRAN (R 4.3.1) #>  viridis                    0.6.4      2023-07-22 [1] CRAN (R 4.3.1) #>  viridisLite                0.4.2      2023-05-02 [1] CRAN (R 4.3.1) #>  webshot                    0.5.5      2023-06-26 [1] CRAN (R 4.3.1) #>  withr                      2.5.0      2022-03-03 [2] CRAN (R 4.3.1) #>  xfun                       0.40       2023-08-09 [2] CRAN (R 4.3.1) #>  xtable                     1.8-4      2019-04-21 [2] CRAN (R 4.3.1) #>  XVector                  * 0.41.1     2023-05-03 [1] Bioconductor #>  yaml                       2.3.7      2023-01-23 [2] CRAN (R 4.3.1) #>  yulab.utils                0.1.0      2023-09-20 [1] CRAN (R 4.3.1) #>  zlibbioc                   1.47.0     2023-04-25 [1] Bioconductor #>  #>  [1] /__w/_temp/Library #>  [2] /usr/local/lib/R/site-library #>  [3] /usr/local/lib/R/library #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/articles/import_export_recipes.html","id":"exporting-steps-of-a-recipe","dir":"Articles","previous_headings":"","what":"Exporting Steps of a Recipe","title":"Reproducibility in Microbiome Data Analysis","text":"export_steps function facilitates export recipe’s steps JSON file. useful documenting sharing parameters used analysis. ’s example use export_steps function: example, recipe multiple steps created, steps exported JSON file using export_steps function.","code":"library(dar) data(metaHIV_phy)  # Create a recipe with steps rec <-    recipe(metaHIV_phy, \"RiskGroup2\", \"Species\") %>%   step_subset_taxa(expr = 'Kingdom %in% c(\"Bacteria\", \"Archaea\")') %>%   step_filter_taxa(.f = \"function(x) sum(x > 0) >= (0.3 * length(x))\") %>%   step_maaslin()  # Export the steps to a JSON file out_file <- tempfile(fileext = \".json\") export_steps(rec, out_file)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/articles/import_export_recipes.html","id":"importing-steps-from-a-json-file","dir":"Articles","previous_headings":"","what":"Importing Steps from a JSON File","title":"Reproducibility in Microbiome Data Analysis","text":"import_steps function allows import steps JSON file add existing recipe. useful want reuse previously saved set steps incorporate steps another recipe current analysis. ’s example use import_steps function: example, empty recipe initialized, steps imported JSON file using import_steps function. imported steps added existing recipe. recipe imported, can choose add steps execute code using prep function. case, choose execute prep directly.","code":"# Initialize a recipe with a phyloseq object rec <- recipe(metaHIV_phy, \"RiskGroup2\", \"Species\")  # Import the steps from a JSON file json_file <- out_file rec <- import_steps(rec, json_file) rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Preporcessing steps: #>  #>      ◉ step_subset_taxa() id = subset_taxa__Bridie  #>      ◉ step_filter_taxa() id = filter_taxa__Karakudamono  #>  #> DA steps: #>  #>      ◉ step_maaslin() id = maaslin__Knish ## Execute da_results <- prep(rec, parallel = FALSE) %>% bake() da_results #> ── DAR Results ───────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 101 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Results: #>  #>      ✔ maaslin__Knish diff_taxa = 86  #>  #>      ℹ 86 taxa are present in all tested methods  #>  #> Bakes: #>  #>      ◉ 1 -> count_cutoff: NULL, weights: NULL, exclude: NULL, id: bake__Bossche_bol"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/articles/import_export_recipes.html","id":"limitations-and-considerations","dir":"Articles","previous_headings":"","what":"Limitations and Considerations","title":"Reproducibility in Microbiome Data Analysis","text":"’s important note limitations considerations using export_steps import_steps functions: JSON files generated export_steps contain parameters recipe steps bakes, original data used analysis. Therefore, importing steps JSON file, ensure access data originally used. export_steps import_steps functions specific dar package designed use microbiome data analysis. applicable types analyses packages. importing steps JSON file, ’s important check file contains “bake” steps. , recipe automatically prepared importing steps. may implications runtime resource requirements analysis. Make sure correct versions dependencies dar package exporting importing recipe steps. Updates dependencies can affect compatibility reproducibility analyses.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/articles/import_export_recipes.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Reproducibility in Microbiome Data Analysis","text":"Reproducibility essential microbiome data analysis, dar package facilitates aspect providing export_steps import_steps functions. functions allow export steps recipe JSON file import reproduce analysis different environment. tools, can effectively document share analyses, increasing transparency reliability results.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/articles/import_export_recipes.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Reproducibility in Microbiome Data Analysis","text":"","code":"devtools::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.3.1 (2023-06-16) #>  os       Ubuntu 22.04.3 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  en_US.UTF-8 #>  ctype    en_US.UTF-8 #>  tz       UTC #>  date     2023-09-21 #>  pandoc   3.1.1 @ /usr/local/bin/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package          * version    date (UTC) lib source #>  ade4               1.7-22     2023-02-06 [1] CRAN (R 4.3.1) #>  ape                5.7-1      2023-03-13 [1] CRAN (R 4.3.1) #>  assertthat         0.2.1      2019-03-21 [1] CRAN (R 4.3.1) #>  biglm              0.9-2.1    2020-11-27 [1] CRAN (R 4.3.1) #>  Biobase            2.61.0     2023-04-25 [1] Bioconductor #>  BiocGenerics       0.47.0     2023-04-25 [1] Bioconductor #>  biomformat         1.29.1     2023-08-02 [1] Bioconductor #>  Biostrings         2.69.2     2023-07-02 [1] Bioconductor #>  bit                4.0.5      2022-11-15 [1] CRAN (R 4.3.1) #>  bit64              4.0.5      2020-08-30 [1] CRAN (R 4.3.1) #>  bitops             1.0-7      2021-04-24 [1] CRAN (R 4.3.1) #>  brio               1.1.3      2021-11-30 [2] CRAN (R 4.3.1) #>  bslib              0.5.1      2023-08-11 [2] CRAN (R 4.3.1) #>  ca                 0.71.1     2020-01-24 [1] CRAN (R 4.3.1) #>  cachem             1.0.8      2023-05-01 [2] CRAN (R 4.3.1) #>  callr              3.7.3      2022-11-02 [2] CRAN (R 4.3.1) #>  cli                3.6.1      2023-03-23 [2] CRAN (R 4.3.1) #>  cluster            2.1.4      2022-08-22 [3] CRAN (R 4.3.1) #>  codetools          0.2-19     2023-02-01 [3] CRAN (R 4.3.1) #>  colorspace         2.1-0      2023-01-23 [1] CRAN (R 4.3.1) #>  crayon             1.5.2      2022-09-29 [2] CRAN (R 4.3.1) #>  dar              * 0.99.0     2023-09-21 [1] Bioconductor #>  data.table         1.14.8     2023-02-17 [1] CRAN (R 4.3.1) #>  DBI                1.1.3      2022-06-18 [1] CRAN (R 4.3.1) #>  dendextend         1.17.1     2023-03-25 [1] CRAN (R 4.3.1) #>  DEoptimR           1.1-2      2023-08-28 [1] CRAN (R 4.3.1) #>  desc               1.4.2      2022-09-08 [2] CRAN (R 4.3.1) #>  devtools           2.4.5      2022-10-11 [2] CRAN (R 4.3.1) #>  digest             0.6.33     2023-07-07 [2] CRAN (R 4.3.1) #>  dplyr              1.1.3      2023-09-03 [1] CRAN (R 4.3.1) #>  ellipsis           0.3.2      2021-04-29 [2] CRAN (R 4.3.1) #>  evaluate           0.21       2023-05-05 [2] CRAN (R 4.3.1) #>  fansi              1.0.4      2023-01-22 [2] CRAN (R 4.3.1) #>  fastmap            1.1.1      2023-02-24 [2] CRAN (R 4.3.1) #>  foreach            1.5.2      2022-02-02 [1] CRAN (R 4.3.1) #>  fs                 1.6.3      2023-07-20 [2] CRAN (R 4.3.1) #>  generics           0.1.3      2022-07-05 [1] CRAN (R 4.3.1) #>  GenomeInfoDb       1.37.4     2023-09-07 [1] Bioconductor #>  GenomeInfoDbData   1.2.10     2023-09-07 [1] Bioconductor #>  getopt             1.20.3     2019-03-22 [1] CRAN (R 4.3.1) #>  ggplot2            3.4.3      2023-08-14 [1] CRAN (R 4.3.1) #>  glue               1.6.2      2022-02-24 [2] CRAN (R 4.3.1) #>  gridExtra          2.3        2017-09-09 [1] CRAN (R 4.3.1) #>  gtable             0.3.4      2023-08-21 [1] CRAN (R 4.3.1) #>  hash               2.2.6.3    2023-08-19 [1] CRAN (R 4.3.1) #>  heatmaply          1.4.2      2023-01-07 [1] CRAN (R 4.3.1) #>  hms                1.1.3      2023-03-21 [1] CRAN (R 4.3.1) #>  htmltools          0.5.6      2023-08-10 [2] CRAN (R 4.3.1) #>  htmlwidgets        1.6.2      2023-03-17 [2] CRAN (R 4.3.1) #>  httpuv             1.6.11     2023-05-11 [2] CRAN (R 4.3.1) #>  httr               1.4.7      2023-08-15 [2] CRAN (R 4.3.1) #>  igraph             1.5.1      2023-08-10 [1] CRAN (R 4.3.1) #>  IRanges            2.35.2     2023-06-22 [1] Bioconductor #>  iterators          1.0.14     2022-02-05 [1] CRAN (R 4.3.1) #>  jquerylib          0.1.4      2021-04-26 [2] CRAN (R 4.3.1) #>  jsonlite           1.8.7      2023-06-29 [2] CRAN (R 4.3.1) #>  knitr              1.44       2023-09-11 [2] CRAN (R 4.3.1) #>  later              1.3.1      2023-05-02 [2] CRAN (R 4.3.1) #>  lattice            0.21-8     2023-04-05 [3] CRAN (R 4.3.1) #>  lazyeval           0.2.2      2019-03-15 [1] CRAN (R 4.3.1) #>  lifecycle          1.0.3      2022-10-07 [2] CRAN (R 4.3.1) #>  logging            0.10-108   2019-07-14 [1] CRAN (R 4.3.1) #>  Maaslin2           1.15.1     2023-06-07 [1] Bioconductor #>  magrittr           2.0.3      2022-03-30 [2] CRAN (R 4.3.1) #>  MASS               7.3-60     2023-05-04 [3] CRAN (R 4.3.1) #>  Matrix             1.6-1.1    2023-09-18 [2] CRAN (R 4.3.1) #>  memoise            2.0.1      2021-11-26 [2] CRAN (R 4.3.1) #>  mgcv               1.9-0      2023-07-11 [2] CRAN (R 4.3.1) #>  mime               0.12       2021-09-28 [2] CRAN (R 4.3.1) #>  miniUI             0.1.1.1    2018-05-18 [2] CRAN (R 4.3.1) #>  multtest           2.57.0     2023-04-25 [1] Bioconductor #>  munsell            0.5.0      2018-06-12 [1] CRAN (R 4.3.1) #>  mvtnorm            1.2-3      2023-08-25 [1] CRAN (R 4.3.1) #>  nlme               3.1-163    2023-08-09 [2] CRAN (R 4.3.1) #>  optparse           1.7.3      2022-07-20 [1] CRAN (R 4.3.1) #>  pbapply            1.7-2      2023-06-27 [1] CRAN (R 4.3.1) #>  pcaPP              2.0-3      2022-10-24 [1] CRAN (R 4.3.1) #>  permute            0.9-7      2022-01-27 [1] CRAN (R 4.3.1) #>  phyloseq           1.45.0     2023-04-25 [1] Bioconductor #>  pillar             1.9.0      2023-03-22 [2] CRAN (R 4.3.1) #>  pkgbuild           1.4.2      2023-06-26 [2] CRAN (R 4.3.1) #>  pkgconfig          2.0.3      2019-09-22 [2] CRAN (R 4.3.1) #>  pkgdown            2.0.7.9000 2023-09-19 [1] Github (r-lib/pkgdown@c920680) #>  pkgload            1.3.2.1    2023-07-08 [2] CRAN (R 4.3.1) #>  plotly             4.10.2     2023-06-03 [1] CRAN (R 4.3.1) #>  plyr               1.8.8      2022-11-11 [1] CRAN (R 4.3.1) #>  prettyunits        1.1.1      2020-01-24 [2] CRAN (R 4.3.1) #>  processx           3.8.2      2023-06-30 [2] CRAN (R 4.3.1) #>  profvis            0.3.8      2023-05-02 [2] CRAN (R 4.3.1) #>  promises           1.2.1      2023-08-10 [2] CRAN (R 4.3.1) #>  ps                 1.7.5      2023-04-18 [2] CRAN (R 4.3.1) #>  purrr              1.0.2      2023-08-10 [2] CRAN (R 4.3.1) #>  R6                 2.5.1      2021-08-19 [2] CRAN (R 4.3.1) #>  ragg               1.2.5      2023-01-12 [2] CRAN (R 4.3.1) #>  RColorBrewer       1.1-3      2022-04-03 [1] CRAN (R 4.3.1) #>  Rcpp               1.0.11     2023-07-06 [2] CRAN (R 4.3.1) #>  RCurl              1.98-1.12  2023-03-27 [1] CRAN (R 4.3.1) #>  readr              2.1.4      2023-02-10 [1] CRAN (R 4.3.1) #>  registry           0.5-1      2019-03-05 [1] CRAN (R 4.3.1) #>  remotes            2.4.2.1    2023-07-18 [1] CRAN (R 4.3.1) #>  reshape2           1.4.4      2020-04-09 [1] CRAN (R 4.3.1) #>  rhdf5              2.45.1     2023-07-10 [1] Bioconductor #>  rhdf5filters       1.13.5     2023-07-19 [1] Bioconductor #>  Rhdf5lib           1.23.2     2023-09-10 [1] Bioconductor #>  rlang              1.1.1      2023-04-28 [2] CRAN (R 4.3.1) #>  rmarkdown          2.25       2023-09-18 [2] CRAN (R 4.3.1) #>  robustbase         0.99-0     2023-06-16 [1] CRAN (R 4.3.1) #>  rprojroot          2.0.3      2022-04-02 [2] CRAN (R 4.3.1) #>  S4Vectors          0.39.1     2023-05-03 [1] Bioconductor #>  sass               0.4.7      2023-07-15 [2] CRAN (R 4.3.1) #>  scales             1.2.1      2022-08-20 [1] CRAN (R 4.3.1) #>  seriation          1.5.1      2023-07-20 [1] CRAN (R 4.3.1) #>  sessioninfo        1.2.2      2021-12-06 [2] CRAN (R 4.3.1) #>  shiny              1.7.5      2023-08-12 [2] CRAN (R 4.3.1) #>  stringi            1.7.12     2023-01-11 [2] CRAN (R 4.3.1) #>  stringr            1.5.0      2022-12-02 [2] CRAN (R 4.3.1) #>  survival           3.5-7      2023-08-14 [2] CRAN (R 4.3.1) #>  systemfonts        1.0.4      2022-02-11 [2] CRAN (R 4.3.1) #>  testthat           3.1.10     2023-07-06 [2] CRAN (R 4.3.1) #>  textshaping        0.3.6      2021-10-13 [2] CRAN (R 4.3.1) #>  tibble             3.2.1      2023-03-20 [2] CRAN (R 4.3.1) #>  tidyr              1.3.0      2023-01-24 [1] CRAN (R 4.3.1) #>  tidyselect         1.2.0      2022-10-10 [1] CRAN (R 4.3.1) #>  TSP                1.2-4      2023-04-04 [1] CRAN (R 4.3.1) #>  tzdb               0.4.0      2023-05-12 [1] CRAN (R 4.3.1) #>  UpSetR             1.4.0      2019-05-22 [1] CRAN (R 4.3.1) #>  urlchecker         1.0.1      2021-11-30 [2] CRAN (R 4.3.1) #>  usethis            2.2.2      2023-07-06 [2] CRAN (R 4.3.1) #>  utf8               1.2.3      2023-01-31 [2] CRAN (R 4.3.1) #>  vctrs              0.6.3      2023-06-14 [2] CRAN (R 4.3.1) #>  vegan              2.6-4      2022-10-11 [1] CRAN (R 4.3.1) #>  viridis            0.6.4      2023-07-22 [1] CRAN (R 4.3.1) #>  viridisLite        0.4.2      2023-05-02 [1] CRAN (R 4.3.1) #>  vroom              1.6.3      2023-04-28 [1] CRAN (R 4.3.1) #>  webshot            0.5.5      2023-06-26 [1] CRAN (R 4.3.1) #>  withr              2.5.0      2022-03-03 [2] CRAN (R 4.3.1) #>  xfun               0.40       2023-08-09 [2] CRAN (R 4.3.1) #>  xtable             1.8-4      2019-04-21 [2] CRAN (R 4.3.1) #>  XVector            0.41.1     2023-05-03 [1] Bioconductor #>  yaml               2.3.7      2023-01-23 [2] CRAN (R 4.3.1) #>  zlibbioc           1.47.0     2023-04-25 [1] Bioconductor #>  #>  [1] /__w/_temp/Library #>  [2] /usr/local/lib/R/site-library #>  [3] /usr/local/lib/R/library #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Francesc Catala-Moll. Author, maintainer.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Catala-Moll F (2023). dar: Differential Abundance Analysis Consensus. https://github.com/MicrobialGenomics-IrsicaixaOrg/dar, https://microbialgenomics-irsicaixaorg.github.io/dar/.","code":"@Manual{,   title = {dar: Differential Abundance Analysis by Consensus},   author = {Francesc Catala-Moll},   year = {2023},   note = {https://github.com/MicrobialGenomics-IrsicaixaOrg/dar, https://microbialgenomics-irsicaixaorg.github.io/dar/}, }"},{"path":[]},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Differential Abundance Analysis by Consensus","text":"Differential abundance testing microbiome data challenges parametric non-parametric statistical methods, due sparsity, high variability compositional nature. Microbiome-specific statistical methods often assume classical distribution models take account compositional specifics. produce results range within specificity vs sensitivity space way type type II error difficult ascertain real microbiome data single method used. Recently, consensus approach based multiple differential abundance (DA) methods recently suggested order increase robustness. dar, can use dplyr-like pipeable sequences DA methods apply different consensus strategies. way can obtain reliable results fast, consistent reproducible way.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Differential Abundance Analysis by Consensus","text":"can install development version dar GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"MicrobialGenomics-IrsicaixaOrg/dar\")"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Differential Abundance Analysis by Consensus","text":"","code":"library(dar) #> Registered S3 methods overwritten by 'vegan': #>   method         from       #>   reorder.hclust seriation  #>   rev.hclust     dendextend data(\"metaHIV_phy\")  ## Define recipe rec <-   recipe(metaHIV_phy, var_info = \"RiskGroup2\", tax_info = \"Species\") %>%   step_subset_taxa(expr = 'Kingdom %in% c(\"Bacteria\", \"Archaea\")') %>%   step_filter_taxa(.f = \"function(x) sum(x > 0) >= (0.03 * length(x))\") %>%   step_metagenomeseq(rm_zeros = 0.01) %>%   step_maaslin()  rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Preporcessing steps: #>  #>      ◉ step_subset_taxa() id = subset_taxa__Milhoja  #>      ◉ step_filter_taxa() id = filter_taxa__Papanași  #>  #> DA steps: #>  #>      ◉ step_metagenomeseq() id = metagenomeseq__Schaumrolle  #>      ◉ step_maaslin() id = maaslin__Punschkrapfen  ## Prep recipe da_results <- prep(rec, parallel = TRUE) da_results #> ── DAR Results ───────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 278 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Results: #>  #>      ✔ metagenomeseq__Schaumrolle diff_taxa = 236  #>      ✔ maaslin__Punschkrapfen diff_taxa = 146  #>  #>      ℹ 124 taxa are present in all tested methods  ## Consensus strategy n_methods <- 2 da_results <- bake(da_results, count_cutoff = n_methods) da_results #> ── DAR Results ───────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 278 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Results: #>  #>      ✔ metagenomeseq__Schaumrolle diff_taxa = 236  #>      ✔ maaslin__Punschkrapfen diff_taxa = 146  #>  #>      ℹ 124 taxa are present in all tested methods  #>  #> Bakes: #>  #>      ◉ 1 -> count_cutoff: 2, weights: NULL, exclude: NULL, id: bake__Belokranjska_povitica  ## Results cool(da_results) #> ℹ Bake for count_cutoff = 2 #> # A tibble: 124 × 2 #>    taxa_id taxa                    #>    <chr>   <chr>                   #>  1 Otu_63  Bacteroides_plebeius    #>  2 Otu_216 Clostridium_sp_CAG_632  #>  3 Otu_441 Brachyspira_sp_CAG_700  #>  4 Otu_108 Prevotella_sp_CAG_520   #>  5 Otu_257 Butyrivibrio_sp_CAG_318 #>  6 Otu_104 Prevotella_sp_CAG_1092  #>  7 Otu_69  Bacteroides_sp_CAG_530  #>  8 Otu_102 Prevotella_sp_AM42_24   #>  9 Otu_159 Lactobacillus_ruminis   #> 10 Otu_117 Alistipes_inops         #> # ℹ 114 more rows"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Differential Abundance Analysis by Consensus","text":"think encountered bug, please submit issue. Either way, learn create share reprex (minimal, reproducible example), clearly communicate code. Working first Pull Request? can learn free series Contribute Open Source Project GitHub","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Differential Abundance Analysis by Consensus","text":"Please note dar project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/abundance_plt.html","id":null,"dir":"Reference","previous_headings":"","what":"Abundance boxplot — abundance_plt","title":"Abundance boxplot — abundance_plt","text":"Abundance boxplot","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/abundance_plt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abundance boxplot — abundance_plt","text":"","code":"abundance_plt(   rec,   taxa_ids = NULL,   type = \"boxplot\",   transform = \"compositional\",   scale = 1,   top_n = 20 )  # S4 method for recipe abundance_plt(   rec,   taxa_ids = NULL,   type = \"boxplot\",   transform = \"compositional\",   scale = 1,   top_n = 20 )  # S4 method for prep_recipe abundance_plt(   rec,   taxa_ids = NULL,   type = \"boxplot\",   transform = \"compositional\",   scale = 1,   top_n = 20 )"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/abundance_plt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abundance boxplot — abundance_plt","text":"rec recipe recipe step. taxa_ids Character vector taxa_ids plot. taxa_ids NULL significant characteristics present executed methods plotted. type Character vector indicating type result. Options: c(\"boxoplot\", \"heatmap\"). transform Transformation apply. options include: 'compositional' (ie relative abundance), 'Z', 'log10', 'log10p', 'hellinger', 'identity', 'clr', 'alr', method vegan::decostand function. value NULL, normalization applied works raw counts. scale Scaling constant abundance values transform = \"scale\". top_n Maximum number taxa represent. Default: 20.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/abundance_plt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Abundance boxplot — abundance_plt","text":"ggplot2","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/abundance_plt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Abundance boxplot — abundance_plt","text":"","code":"data(test_prep_rec)  ## Running the function returns a boxplot, abundance_plt(test_prep_rec) #> ! Taxa present in all methods are greater than the cutoff top_n = 20 #> ℹ The top 20 significant taxa with the greatest overlap between methods will be used   ## Giving the value \"heatmap\" to the type parameter, the resulting graph ## a heatmap. abundance_plt(test_prep_rec, type = \"heatmap\") #> ! Taxa present in all methods are greater than the cutoff top_n = 20 #> ℹ The top 20 significant taxa with the greatest overlap between methods will be used   ## By default, those taxa significant in all methods are plotted. If you want ## to graph some determined features, you can pass them as vector through the ## taxa_ids parameter. taxa_ids <- c(\"Otu_96\", \"Otu_78\", \"Otu_88\", \"Otu_35\", \"Otu_94\", \"Otu_34\") abundance_plt(test_prep_rec, taxa_ids = taxa_ids)  abundance_plt(test_prep_rec, taxa_ids = taxa_ids, type = \"heatmap\")   ## abundance_plt function needs a prep-recipe. If you pass a a non-prep ## recipe the output is an error. data(test_rec) err <- testthat::expect_error(abundance_plt(test_rec)) err #> <error/rlang_error> #> Error in `abundance_plt()`: #> ! This function needs a prep recipe! #> • Run prep(rec) and then try with abundance_plt() #> --- #> Backtrace: #>      ▆ #>   1. └─pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE) #>   2.   └─pkgdown::build_site(...) #>   3.     └─pkgdown:::build_site_local(...) #>   4.       └─pkgdown::build_reference(...) #>   5.         └─purrr::map(...) #>   6.           └─purrr:::map_(\"list\", .x, .f, ..., .progress = .progress) #>   7.             ├─purrr:::with_indexed_errors(...) #>   8.             │ └─base::withCallingHandlers(...) #>   9.             ├─purrr:::call_with_cleanup(...) #>  10.             └─pkgdown (local) .f(.x[[i]], ...) #>  11.               ├─base::withCallingHandlers(...) #>  12.               └─pkgdown:::data_reference_topic(...) #>  13.                 └─pkgdown:::run_examples(...) #>  14.                   └─pkgdown:::highlight_examples(code, topic, env = env) #>  15.                     └─downlit::evaluate_and_highlight(...) #>  16.                       └─evaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #>  17.                         └─evaluate:::evaluate_call(...) #>  18.                           ├─evaluate (local) timing_fn(...) #>  19.                           ├─evaluate (local) handle(...) #>  20.                           │ └─base::try(f, silent = TRUE) #>  21.                           │   └─base::tryCatch(...) #>  22.                           │     └─base (local) tryCatchList(expr, classes, parentenv, handlers) #>  23.                           │       └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  24.                           │         └─base (local) doTryCatch(return(expr), name, parentenv, handler) #>  25.                           ├─base::withCallingHandlers(...) #>  26.                           ├─base::withVisible(...) #>  27.                           └─evaluate:::eval_with_user_handlers(expr, envir, enclos, user_handlers) #>  28.                             └─base::eval(expr, envir, enclos) #>  29.                               └─base::eval(expr, envir, enclos) #>  30.                                 ├─testthat::expect_error(abundance_plt(test_rec)) #>  31.                                 │ └─testthat:::expect_condition_matching(...) #>  32.                                 │   └─testthat:::quasi_capture(...) #>  33.                                 │     ├─testthat (local) .capture(...) #>  34.                                 │     │ └─base::withCallingHandlers(...) #>  35.                                 │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo)) #>  36.                                 ├─dar::abundance_plt(test_rec) #>  37.                                 └─dar::abundance_plt(test_rec)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/add_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a New Operation to the Current Recipe — add_step","title":"Add a New Operation to the Current Recipe — add_step","text":"add_step adds step last location recipe. add_check checks.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/add_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a New Operation to the Current Recipe — add_step","text":"","code":"add_step(rec, object)  # S4 method for recipe add_step(rec, object)  # S4 method for prep_recipe add_step(rec, object)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/add_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a New Operation to the Current Recipe — add_step","text":"rec recipe(). object step check object.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/add_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a New Operation to the Current Recipe — add_step","text":"updated recipe() new operation last slot.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/add_tax.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds taxonomic level of interest in the recipe. — add_tax","title":"Adds taxonomic level of interest in the recipe. — add_tax","text":"Adds taxonomic level interest recipe.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/add_tax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds taxonomic level of interest in the recipe. — add_tax","text":"","code":"add_tax(rec, tax_info)  # S4 method for recipe add_tax(rec, tax_info)  # S4 method for prep_recipe add_tax(rec, tax_info)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/add_tax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds taxonomic level of interest in the recipe. — add_tax","text":"rec recipe object. tax_info character string taxonomic levels used context.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/add_tax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds taxonomic level of interest in the recipe. — add_tax","text":"recipe object.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/add_tax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds taxonomic level of interest in the recipe. — add_tax","text":"","code":"data(metaHIV_phy)  ## Define recipe rec <-   recipe(metaHIV_phy)  ## add var info rec <- add_tax(rec, tax_info = \"Species\") rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ✖ undefined variable of interest. Use add_var() to add to recipe!  #>      ℹ taxonomic level Species  #>  #>   ## add tax info to a prep-recipe returns an error data(test_prep_rec) err <- testthat::expect_error(   add_tax(test_prep_rec, tax_info = \"Species\") )  err #> <error/rlang_error> #> Error in `add_tax()`: #> ! tax_info can only be added to a non-prep recipe #> --- #> Backtrace: #>      ▆ #>   1. └─pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE) #>   2.   └─pkgdown::build_site(...) #>   3.     └─pkgdown:::build_site_local(...) #>   4.       └─pkgdown::build_reference(...) #>   5.         └─purrr::map(...) #>   6.           └─purrr:::map_(\"list\", .x, .f, ..., .progress = .progress) #>   7.             ├─purrr:::with_indexed_errors(...) #>   8.             │ └─base::withCallingHandlers(...) #>   9.             ├─purrr:::call_with_cleanup(...) #>  10.             └─pkgdown (local) .f(.x[[i]], ...) #>  11.               ├─base::withCallingHandlers(...) #>  12.               └─pkgdown:::data_reference_topic(...) #>  13.                 └─pkgdown:::run_examples(...) #>  14.                   └─pkgdown:::highlight_examples(code, topic, env = env) #>  15.                     └─downlit::evaluate_and_highlight(...) #>  16.                       └─evaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #>  17.                         └─evaluate:::evaluate_call(...) #>  18.                           ├─evaluate (local) timing_fn(...) #>  19.                           ├─evaluate (local) handle(...) #>  20.                           │ └─base::try(f, silent = TRUE) #>  21.                           │   └─base::tryCatch(...) #>  22.                           │     └─base (local) tryCatchList(expr, classes, parentenv, handlers) #>  23.                           │       └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  24.                           │         └─base (local) doTryCatch(return(expr), name, parentenv, handler) #>  25.                           ├─base::withCallingHandlers(...) #>  26.                           ├─base::withVisible(...) #>  27.                           └─evaluate:::eval_with_user_handlers(expr, envir, enclos, user_handlers) #>  28.                             └─base::eval(expr, envir, enclos) #>  29.                               └─base::eval(expr, envir, enclos) #>  30.                                 ├─testthat::expect_error(add_tax(test_prep_rec, tax_info = \"Species\")) #>  31.                                 │ └─testthat:::expect_condition_matching(...) #>  32.                                 │   └─testthat:::quasi_capture(...) #>  33.                                 │     ├─testthat (local) .capture(...) #>  34.                                 │     │ └─base::withCallingHandlers(...) #>  35.                                 │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo)) #>  36.                                 ├─dar::add_tax(test_prep_rec, tax_info = \"Species\") #>  37.                                 └─dar::add_tax(test_prep_rec, tax_info = \"Species\")"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/add_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds variable of interest to the recipe — add_var","title":"Adds variable of interest to the recipe — add_var","text":"Adds variable interest recipe","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/add_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds variable of interest to the recipe — add_var","text":"","code":"add_var(rec, var_info)  # S4 method for recipe add_var(rec, var_info)  # S4 method for prep_recipe add_var(rec, var_info)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/add_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds variable of interest to the recipe — add_var","text":"rec recipe object. var_info character string column names corresponding variables used context.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/add_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds variable of interest to the recipe — add_var","text":"recipe object.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/add_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds variable of interest to the recipe — add_var","text":"","code":"data(metaHIV_phy)  ## Define recipe rec <- recipe(metaHIV_phy)  ## add var info rec <- add_var(rec, var_info = \"RiskGroup2\") rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ✖ undefined taxonomic level. Use add_tax() to add to recipe!  #>   ## add var info to a prep-recipe returns an error data(test_prep_rec) err <- testthat::expect_error(   add_var(test_prep_rec, var_info = \"RiskGroup2\") )  err #> <error/rlang_error> #> Error in `add_var()`: #> ! var_info can only be added to a non-prep recipe #> --- #> Backtrace: #>      ▆ #>   1. └─pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE) #>   2.   └─pkgdown::build_site(...) #>   3.     └─pkgdown:::build_site_local(...) #>   4.       └─pkgdown::build_reference(...) #>   5.         └─purrr::map(...) #>   6.           └─purrr:::map_(\"list\", .x, .f, ..., .progress = .progress) #>   7.             ├─purrr:::with_indexed_errors(...) #>   8.             │ └─base::withCallingHandlers(...) #>   9.             ├─purrr:::call_with_cleanup(...) #>  10.             └─pkgdown (local) .f(.x[[i]], ...) #>  11.               ├─base::withCallingHandlers(...) #>  12.               └─pkgdown:::data_reference_topic(...) #>  13.                 └─pkgdown:::run_examples(...) #>  14.                   └─pkgdown:::highlight_examples(code, topic, env = env) #>  15.                     └─downlit::evaluate_and_highlight(...) #>  16.                       └─evaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #>  17.                         └─evaluate:::evaluate_call(...) #>  18.                           ├─evaluate (local) timing_fn(...) #>  19.                           ├─evaluate (local) handle(...) #>  20.                           │ └─base::try(f, silent = TRUE) #>  21.                           │   └─base::tryCatch(...) #>  22.                           │     └─base (local) tryCatchList(expr, classes, parentenv, handlers) #>  23.                           │       └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  24.                           │         └─base (local) doTryCatch(return(expr), name, parentenv, handler) #>  25.                           ├─base::withCallingHandlers(...) #>  26.                           ├─base::withVisible(...) #>  27.                           └─evaluate:::eval_with_user_handlers(expr, envir, enclos, user_handlers) #>  28.                             └─base::eval(expr, envir, enclos) #>  29.                               └─base::eval(expr, envir, enclos) #>  30.                                 ├─testthat::expect_error(add_var(test_prep_rec, var_info = \"RiskGroup2\")) #>  31.                                 │ └─testthat:::expect_condition_matching(...) #>  32.                                 │   └─testthat:::quasi_capture(...) #>  33.                                 │     ├─testthat (local) .capture(...) #>  34.                                 │     │ └─base::withCallingHandlers(...) #>  35.                                 │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo)) #>  36.                                 ├─dar::add_var(test_prep_rec, var_info = \"RiskGroup2\") #>  37.                                 └─dar::add_var(test_prep_rec, var_info = \"RiskGroup2\")"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/bake.html","id":null,"dir":"Reference","previous_headings":"","what":"Define consensus strategies from a recipe — bake","title":"Define consensus strategies from a recipe — bake","text":"prep recipe adds consensus strategies use result extraction.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/bake.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define consensus strategies from a recipe — bake","text":"","code":"bake(   rec,   count_cutoff = NULL,   weights = NULL,   exclude = NULL,   id = rand_id(\"bake\") )  # S4 method for prep_recipe bake(   rec,   count_cutoff = NULL,   weights = NULL,   exclude = NULL,   id = rand_id(\"bake\") )  # S4 method for recipe bake(   rec,   count_cutoff = NULL,   weights = NULL,   exclude = NULL,   id = rand_id(\"bake\") )"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/bake.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define consensus strategies from a recipe — bake","text":"rec recipe object. step added sequence operations recipe. count_cutoff Indicates minimum number methods OTU must present (Default: NULL). count_cutoff NULL count_cutoff equal length(steps_ids(rec, \"da\")) - length(exclude) weights Named vector ponderation value method. exclude Method ids exclude. id character string unique step identify .","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/bake.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define consensus strategies from a recipe — bake","text":"object class prep_recipe","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/bake.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define consensus strategies from a recipe — bake","text":"","code":"data(test_prep_rec) rec <- test_prep_rec  ## Default bake extracts common OTUs in all DA tested methods  ## (In this case the recipe contains 3 methods) res <- bake(rec) cool(res) #> ℹ Bake for count_cutoff = 3 #> # A tibble: 23 × 2 #>    taxa_id taxa            #>    <chr>   <chr>           #>  1 Otu_96  Prevotella      #>  2 Otu_340 Holdemanella    #>  3 Otu_332 Catenibacterium #>  4 Otu_119 Alistipes       #>  5 Otu_45  Slackia         #>  6 Otu_82  Barnesiella     #>  7 Otu_78  Bacteroides     #>  8 Otu_88  Odoribacter     #>  9 Otu_259 Coprococcus     #> 10 Otu_35  Collinsella     #> # ℹ 13 more rows  ## bake and cool methods needs a prep-recipe. If you pass a non-prep recipe ## the output is an error. data(test_rec) err <- testthat::expect_error(bake(test_rec)) err #> <error/rlang_error> #> Error in `bake()`: #> ! This function needs a prep recipe! #> • Run prep(rec) and then try with bake() #> --- #> Backtrace: #>      ▆ #>   1. └─pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE) #>   2.   └─pkgdown::build_site(...) #>   3.     └─pkgdown:::build_site_local(...) #>   4.       └─pkgdown::build_reference(...) #>   5.         └─purrr::map(...) #>   6.           └─purrr:::map_(\"list\", .x, .f, ..., .progress = .progress) #>   7.             ├─purrr:::with_indexed_errors(...) #>   8.             │ └─base::withCallingHandlers(...) #>   9.             ├─purrr:::call_with_cleanup(...) #>  10.             └─pkgdown (local) .f(.x[[i]], ...) #>  11.               ├─base::withCallingHandlers(...) #>  12.               └─pkgdown:::data_reference_topic(...) #>  13.                 └─pkgdown:::run_examples(...) #>  14.                   └─pkgdown:::highlight_examples(code, topic, env = env) #>  15.                     └─downlit::evaluate_and_highlight(...) #>  16.                       └─evaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #>  17.                         └─evaluate:::evaluate_call(...) #>  18.                           ├─evaluate (local) timing_fn(...) #>  19.                           ├─evaluate (local) handle(...) #>  20.                           │ └─base::try(f, silent = TRUE) #>  21.                           │   └─base::tryCatch(...) #>  22.                           │     └─base (local) tryCatchList(expr, classes, parentenv, handlers) #>  23.                           │       └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  24.                           │         └─base (local) doTryCatch(return(expr), name, parentenv, handler) #>  25.                           ├─base::withCallingHandlers(...) #>  26.                           ├─base::withVisible(...) #>  27.                           └─evaluate:::eval_with_user_handlers(expr, envir, enclos, user_handlers) #>  28.                             └─base::eval(expr, envir, enclos) #>  29.                               └─base::eval(expr, envir, enclos) #>  30.                                 ├─testthat::expect_error(bake(test_rec)) #>  31.                                 │ └─testthat:::expect_condition_matching(...) #>  32.                                 │   └─testthat:::quasi_capture(...) #>  33.                                 │     ├─testthat (local) .capture(...) #>  34.                                 │     │ └─base::withCallingHandlers(...) #>  35.                                 │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo)) #>  36.                                 ├─dar::bake(test_rec) #>  37.                                 └─dar::bake(test_rec)  ## We can use the parameter `cout_cutoff` to for example select those OTUs ## shared with at least two methods res <- bake(rec, count_cutoff = 2) cool(res) #> ℹ Bake for count_cutoff = 2 #> # A tibble: 34 × 2 #>    taxa_id taxa            #>    <chr>   <chr>           #>  1 Otu_96  Prevotella      #>  2 Otu_340 Holdemanella    #>  3 Otu_332 Catenibacterium #>  4 Otu_119 Alistipes       #>  5 Otu_45  Slackia         #>  6 Otu_82  Barnesiella     #>  7 Otu_78  Bacteroides     #>  8 Otu_88  Odoribacter     #>  9 Otu_259 Coprococcus     #> 10 Otu_35  Collinsella     #> # ℹ 24 more rows  ## Furthermore, we can exclude methods from the consensus strategy with the  ## `exclude` parameter. res <- bake(rec, exclude = steps_ids(rec, \"da\")[1]) cool(res) #> ℹ Bake for count_cutoff = 2 #> ℹ Results from maaslin__Coussin_de_Lyon are excluded #> # A tibble: 34 × 2 #>    taxa_id taxa                  #>    <chr>   <chr>                 #>  1 Otu_371 Megasphaera           #>  2 Otu_361 Phascolarctobacterium #>  3 Otu_392 Parasutterella        #>  4 Otu_214 Clostridium           #>  5 Otu_365 Mitsuokella           #>  6 Otu_332 Catenibacterium       #>  7 Otu_34  Olsenella             #>  8 Otu_119 Alistipes             #>  9 Otu_397 Bilophila             #> 10 Otu_407 Anaerobiospirillum    #> # ℹ 24 more rows  ## Finally, we can use the `weights` parameter to weigh each method. weights <- c(2, 1, 1) names(weights) <- steps_ids(rec, \"da\") res <- bake(rec, weights = weights) cool(res) #> ℹ Bake for count_cutoff = 3 #> # A tibble: 34 × 2 #>    taxa_id taxa            #>    <chr>   <chr>           #>  1 Otu_96  Prevotella      #>  2 Otu_340 Holdemanella    #>  3 Otu_332 Catenibacterium #>  4 Otu_119 Alistipes       #>  5 Otu_45  Slackia         #>  6 Otu_82  Barnesiella     #>  7 Otu_78  Bacteroides     #>  8 Otu_88  Odoribacter     #>  9 Otu_259 Coprococcus     #> 10 Otu_35  Collinsella     #> # ℹ 24 more rows"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/contains_rarefaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if recipe contains a rarefaction step — contains_rarefaction","title":"Checks if recipe contains a rarefaction step — contains_rarefaction","text":"Checks recipe contains rarefaction step","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/contains_rarefaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if recipe contains a rarefaction step — contains_rarefaction","text":"","code":"contains_rarefaction(rec)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/contains_rarefaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if recipe contains a rarefaction step — contains_rarefaction","text":"rec recipe object. step added sequence operations recipe.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/contains_rarefaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if recipe contains a rarefaction step — contains_rarefaction","text":"boolean","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/contains_rarefaction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks if recipe contains a rarefaction step — contains_rarefaction","text":"","code":"data(GlobalPatterns, package = \"phyloseq\") rec <-   phyloseq::subset_samples(     GlobalPatterns, SampleType %in% c(\"Soil\", \"Skin\")   ) %>%   recipe(var_info  = \"SampleType\", tax_info = \"Genus\") %>%   step_rarefaction()  contains_rarefaction(rec) #> [1] TRUE"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/cool.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract results from defined bake — cool","title":"Extract results from defined bake — cool","text":"Extract results defined bake","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/cool.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract results from defined bake — cool","text":"","code":"cool(rec, bake = 1)  # S4 method for recipe cool(rec, bake = 1)  # S4 method for prep_recipe cool(rec, bake = 1)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/cool.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract results from defined bake — cool","text":"rec recipe object. bake Name index bake extract.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/cool.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract results from defined bake — cool","text":"tbl_df","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/cool.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract results from defined bake — cool","text":"","code":"data(test_prep_rec)  ## First we need to add bakes (extraction strategies) to the prep recipe. rec <- bake(test_prep_rec)  ## Finally we can extract the results with the cool method cool(rec) #> ℹ Bake for count_cutoff = 3 #> # A tibble: 23 × 2 #>    taxa_id taxa            #>    <chr>   <chr>           #>  1 Otu_96  Prevotella      #>  2 Otu_340 Holdemanella    #>  3 Otu_332 Catenibacterium #>  4 Otu_119 Alistipes       #>  5 Otu_45  Slackia         #>  6 Otu_82  Barnesiella     #>  7 Otu_78  Bacteroides     #>  8 Otu_88  Odoribacter     #>  9 Otu_259 Coprococcus     #> 10 Otu_35  Collinsella     #> # ℹ 13 more rows  ## By default cool extracts the results of the first bake. If we have more ## bakes we can extract the one that you want with the bake parameter. rec <- bake(rec, count_cutoff = 1) cool(rec, 2) #> ℹ Bake for count_cutoff = 1 #> # A tibble: 88 × 2 #>    taxa_id taxa            #>    <chr>   <chr>           #>  1 Otu_96  Prevotella      #>  2 Otu_102 Prevotella      #>  3 Otu_340 Holdemanella    #>  4 Otu_332 Catenibacterium #>  5 Otu_108 Prevotella      #>  6 Otu_115 Alistipes       #>  7 Otu_119 Alistipes       #>  8 Otu_45  Slackia         #>  9 Otu_82  Barnesiella     #> 10 Otu_113 Prevotella      #> # ℹ 78 more rows  ## bake and cool methods needs a prep-recipe. If you pass a non-prep recipe ## the output is an error. data(test_rec) err <- testthat::expect_error(cool(test_rec)) err #> <error/rlang_error> #> Error in `cool()`: #> ! This function needs a prep recipe! #> • Run prep(rec) and then try with cool() #> --- #> Backtrace: #>      ▆ #>   1. └─pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE) #>   2.   └─pkgdown::build_site(...) #>   3.     └─pkgdown:::build_site_local(...) #>   4.       └─pkgdown::build_reference(...) #>   5.         └─purrr::map(...) #>   6.           └─purrr:::map_(\"list\", .x, .f, ..., .progress = .progress) #>   7.             ├─purrr:::with_indexed_errors(...) #>   8.             │ └─base::withCallingHandlers(...) #>   9.             ├─purrr:::call_with_cleanup(...) #>  10.             └─pkgdown (local) .f(.x[[i]], ...) #>  11.               ├─base::withCallingHandlers(...) #>  12.               └─pkgdown:::data_reference_topic(...) #>  13.                 └─pkgdown:::run_examples(...) #>  14.                   └─pkgdown:::highlight_examples(code, topic, env = env) #>  15.                     └─downlit::evaluate_and_highlight(...) #>  16.                       └─evaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #>  17.                         └─evaluate:::evaluate_call(...) #>  18.                           ├─evaluate (local) timing_fn(...) #>  19.                           ├─evaluate (local) handle(...) #>  20.                           │ └─base::try(f, silent = TRUE) #>  21.                           │   └─base::tryCatch(...) #>  22.                           │     └─base (local) tryCatchList(expr, classes, parentenv, handlers) #>  23.                           │       └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  24.                           │         └─base (local) doTryCatch(return(expr), name, parentenv, handler) #>  25.                           ├─base::withCallingHandlers(...) #>  26.                           ├─base::withVisible(...) #>  27.                           └─evaluate:::eval_with_user_handlers(expr, envir, enclos, user_handlers) #>  28.                             └─base::eval(expr, envir, enclos) #>  29.                               └─base::eval(expr, envir, enclos) #>  30.                                 ├─testthat::expect_error(cool(test_rec)) #>  31.                                 │ └─testthat:::expect_condition_matching(...) #>  32.                                 │   └─testthat:::quasi_capture(...) #>  33.                                 │     ├─testthat (local) .capture(...) #>  34.                                 │     │ └─base::withCallingHandlers(...) #>  35.                                 │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo)) #>  36.                                 ├─dar::cool(test_rec) #>  37.                                 └─dar::cool(test_rec)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/corr_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot otuput of the overlap_df function as a heatmap. — corr_heatmap","title":"Plot otuput of the overlap_df function as a heatmap. — corr_heatmap","text":"Plot otuput overlap_df function heatmap.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/corr_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot otuput of the overlap_df function as a heatmap. — corr_heatmap","text":"","code":"corr_heatmap(rec, steps = steps_ids(rec, \"da\"), font_size = 15, type = \"all\")  # S4 method for recipe corr_heatmap(rec, steps = steps_ids(rec, \"da\"), font_size = 15, type = \"all\")  # S4 method for prep_recipe corr_heatmap(rec, steps = steps_ids(rec, \"da\"), font_size = 15, type = \"all\")"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/corr_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot otuput of the overlap_df function as a heatmap. — corr_heatmap","text":"rec recipe object. steps Character vector step_ids take account. font_size Size axis font. type Indicates whether use taxa (\"\") differentially abundant least one method (\"da\"). Default \"\".","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/corr_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot otuput of the overlap_df function as a heatmap. — corr_heatmap","text":"heatmap","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/corr_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot otuput of the overlap_df function as a heatmap. — corr_heatmap","text":"","code":"data(test_prep_rec)  ## Running the function returns a UpSet plot ordered by frequency. corr_heatmap(test_prep_rec)  {\"x\":{\"data\":[{\"x\":[1.75,1,null,1,1,null,1.75,2.5,null,2.5,2.5,null,2.5,2,null,2,2,null,2.5,3,null,3,3],\"y\":[0.93861177256733785,0.93861177256733785,null,0.93861177256733785,0,null,0.93861177256733785,0.93861177256733785,null,0.93861177256733785,0.18229656078734624,null,0.18229656078734624,0.18229656078734624,null,0.18229656078734624,0,null,0.18229656078734624,0.18229656078734624,null,0.18229656078734624,0],\"text\":[\"y: 0.9386118\",\"y: 0.9386118\",null,\"y: 0.9386118\",\"y: 0.9386118\",null,\"y: 0.9386118\",\"y: 0.9386118\",null,\"y: 0.9386118\",\"y: 0.9386118\",null,\"y: 0.1822966\",\"y: 0.1822966\",null,\"y: 0.1822966\",\"y: 0.1822966\",null,\"y: 0.1822966\",\"y: 0.1822966\",null,\"y: 0.1822966\",\"y: 0.1822966\"],\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":2.2677165354330708,\"color\":\"rgba(0,0,0,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[1.75,1,2.5,2,3],\"y\":[0.93861177256733785,0,0.18229656078734624,0,0],\"text\":[\"y: 0.9386118\",\"y: 0.0000000\",\"y: 0.1822966\",\"y: 0.0000000\",\"y: 0.0000000\"],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"transparent\",\"opacity\":1,\"size\":null,\"symbol\":null,\"line\":{\"width\":1.8897637795275593,\"color\":\"transparent\"}},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(44,160,44,1)\",\"line\":{\"color\":\"rgba(44,160,44,1)\"}},\"error_y\":{\"color\":\"rgba(44,160,44,1)\"},\"error_x\":{\"color\":\"rgba(44,160,44,1)\"},\"line\":{\"color\":\"rgba(44,160,44,1)\"},\"xaxis\":\"x2\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[1,1,1,2,2,2,3,3,3],\"y\":[1,2,3,1,2,3,1,2,3],\"text\":[\"row: maaslin__Coussin_de_Lyon<br>column: maaslin__Coussin_de_Lyon<br>value: 1.0000 <br> Point size :  1.0000\",\"row: metagenomeseq__Nazook<br>column: maaslin__Coussin_de_Lyon<br>value: 0.4257 <br> Point size :  0.4257\",\"row: deseq__Pan_dulce<br>column: maaslin__Coussin_de_Lyon<br>value: 0.4158 <br> Point size :  0.4158\",\"row: maaslin__Coussin_de_Lyon<br>column: metagenomeseq__Nazook<br>value: 0.4257 <br> Point size :  0.4257\",\"row: metagenomeseq__Nazook<br>column: metagenomeseq__Nazook<br>value: 1.0000 <br> Point size :  1.0000\",\"row: deseq__Pan_dulce<br>column: metagenomeseq__Nazook<br>value: 0.8713 <br> Point size :  0.8713\",\"row: maaslin__Coussin_de_Lyon<br>column: deseq__Pan_dulce<br>value: 0.4158 <br> Point size :  0.4158\",\"row: metagenomeseq__Nazook<br>column: deseq__Pan_dulce<br>value: 0.8713 <br> Point size :  0.8713\",\"row: deseq__Pan_dulce<br>column: deseq__Pan_dulce<br>value: 1.0000 <br> Point size :  1.0000\"],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":[\"rgba(165,0,38,1)\",\"rgba(227,243,152,1)\",\"rgba(223,242,147,1)\",\"rgba(227,243,152,1)\",\"rgba(165,0,38,1)\",\"rgba(224,68,47,1)\",\"rgba(223,242,147,1)\",\"rgba(224,68,47,1)\",\"rgba(165,0,38,1)\"],\"opacity\":1,\"size\":[22.677165354330711,6.2397904437321055,3.7795275590551185,6.2397904437321055,22.677165354330711,20.465842288170109,3.7795275590551185,20.465842288170109,22.677165354330711],\"symbol\":\"circle\",\"line\":{\"width\":1.8897637795275593,\"color\":[\"rgba(165,0,38,1)\",\"rgba(227,243,152,1)\",\"rgba(223,242,147,1)\",\"rgba(227,243,152,1)\",\"rgba(165,0,38,1)\",\"rgba(224,68,47,1)\",\"rgba(223,242,147,1)\",\"rgba(224,68,47,1)\",\"rgba(165,0,38,1)\"]}},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y2\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[1],\"y\":[1],\"name\":\"99_0e1c4cd0ab8b9a97b06de41b32373fad\",\"type\":\"scatter\",\"mode\":\"markers\",\"opacity\":0,\"hoverinfo\":\"skip\",\"showlegend\":false,\"marker\":{\"color\":[0,1],\"colorscale\":[[0,\"#006837\"],[0.0033444816053511705,\"#016A38\"],[0.006688963210702341,\"#016B39\"],[0.010033444816053512,\"#026D39\"],[0.013377926421404682,\"#036E3A\"],[0.016722408026755852,\"#04703B\"],[0.020066889632107024,\"#04713C\"],[0.023411371237458192,\"#05733D\"],[0.026755852842809364,\"#06753E\"],[0.030100334448160536,\"#07763E\"],[0.033444816053511704,\"#08783F\"],[0.036789297658862873,\"#097940\"],[0.040133779264214048,\"#0A7B41\"],[0.043478260869565216,\"#0B7C42\"],[0.046822742474916385,\"#0C7E43\"],[0.05016722408026756,\"#0D8043\"],[0.053511705685618728,\"#0E8144\"],[0.056856187290969896,\"#0F8345\"],[0.060200668896321072,\"#108546\"],[0.06354515050167224,\"#118647\"],[0.066889632107023408,\"#128848\"],[0.070234113712374577,\"#128948\"],[0.073578595317725745,\"#138B49\"],[0.076923076923076927,\"#148D4A\"],[0.080267558528428096,\"#158E4B\"],[0.083612040133779264,\"#16904C\"],[0.086956521739130432,\"#17924D\"],[0.090301003344481601,\"#18934E\"],[0.093645484949832769,\"#18954E\"],[0.096989966555183951,\"#19974F\"],[0.10033444816053512,\"#1A9850\"],[0.10367892976588629,\"#1F9951\"],[0.10702341137123746,\"#229B51\"],[0.11036789297658862,\"#269C52\"],[0.11371237458193979,\"#299D53\"],[0.11705685618729096,\"#2C9E53\"],[0.12040133779264214,\"#2F9F54\"],[0.12374581939799331,\"#32A154\"],[0.12709030100334448,\"#35A255\"],[0.13043478260869565,\"#38A356\"],[0.13377926421404682,\"#3AA456\"],[0.13712374581939799,\"#3DA657\"],[0.14046822742474915,\"#3FA758\"],[0.14381270903010032,\"#42A858\"],[0.14715719063545149,\"#44A959\"],[0.15050167224080269,\"#46AB5A\"],[0.15384615384615385,\"#49AC5A\"],[0.15719063545150502,\"#4BAD5B\"],[0.16053511705685619,\"#4DAE5B\"],[0.16387959866220736,\"#4FB05C\"],[0.16722408026755853,\"#52B15D\"],[0.1705685618729097,\"#54B25D\"],[0.17391304347826086,\"#56B35E\"],[0.17725752508361203,\"#58B55F\"],[0.1806020066889632,\"#5AB65F\"],[0.18394648829431437,\"#5CB760\"],[0.18729096989966554,\"#5EB861\"],[0.19063545150501671,\"#60B961\"],[0.1939799331103679,\"#62BB62\"],[0.19732441471571907,\"#64BC62\"],[0.20066889632107024,\"#66BD63\"],[0.20401337792642141,\"#69BE63\"],[0.20735785953177258,\"#6BBF64\"],[0.21070234113712374,\"#6DC064\"],[0.21404682274247491,\"#70C164\"],[0.21739130434782608,\"#72C264\"],[0.22073578595317725,\"#74C364\"],[0.22408026755852842,\"#76C465\"],[0.22742474916387959,\"#79C565\"],[0.23076923076923075,\"#7BC665\"],[0.23411371237458192,\"#7DC765\"],[0.23745819397993312,\"#7FC766\"],[0.24080267558528429,\"#81C866\"],[0.24414715719063546,\"#83C966\"],[0.24749163879598662,\"#86CA66\"],[0.25083612040133779,\"#88CB67\"],[0.25418060200668896,\"#8ACC67\"],[0.25752508361204013,\"#8CCD67\"],[0.2608695652173913,\"#8ECE67\"],[0.26421404682274247,\"#90CF68\"],[0.26755852842809363,\"#92D068\"],[0.2709030100334448,\"#94D168\"],[0.27424749163879597,\"#96D268\"],[0.27759197324414714,\"#98D368\"],[0.28093645484949831,\"#9AD469\"],[0.28428093645484948,\"#9CD569\"],[0.28762541806020064,\"#9FD669\"],[0.29096989966555181,\"#A1D669\"],[0.29431438127090298,\"#A3D76A\"],[0.29765886287625415,\"#A5D86A\"],[0.30100334448160537,\"#A7D96A\"],[0.30434782608695654,\"#A8DA6B\"],[0.30769230769230771,\"#AADB6D\"],[0.31103678929765888,\"#ACDB6E\"],[0.31438127090301005,\"#ADDC6F\"],[0.31772575250836121,\"#AFDD70\"],[0.32107023411371238,\"#B1DE71\"],[0.32441471571906355,\"#B3DE72\"],[0.32775919732441472,\"#B4DF73\"],[0.33110367892976589,\"#B6E074\"],[0.33444816053511706,\"#B8E175\"],[0.33779264214046822,\"#B9E176\"],[0.34113712374581939,\"#BBE278\"],[0.34448160535117056,\"#BDE379\"],[0.34782608695652173,\"#BFE47A\"],[0.3511705685618729,\"#C0E47B\"],[0.35451505016722407,\"#C2E57C\"],[0.35785953177257523,\"#C4E67D\"],[0.3612040133779264,\"#C5E77E\"],[0.36454849498327757,\"#C7E77F\"],[0.36789297658862874,\"#C9E880\"],[0.37123745819397991,\"#CAE981\"],[0.37458193979933108,\"#CCE983\"],[0.37792642140468224,\"#CEEA84\"],[0.38127090301003341,\"#D0EB85\"],[0.38461538461538458,\"#D1EC86\"],[0.38795986622073581,\"#D3EC87\"],[0.39130434782608697,\"#D5ED88\"],[0.39464882943143814,\"#D6EE89\"],[0.39799331103678931,\"#D8EF8A\"],[0.40133779264214048,\"#DAEF8C\"],[0.40468227424749165,\"#DBF08D\"],[0.40802675585284282,\"#DCF08F\"],[0.41137123745819398,\"#DDF191\"],[0.41471571906354515,\"#DFF193\"],[0.41806020066889632,\"#E0F294\"],[0.42140468227424749,\"#E1F296\"],[0.42474916387959866,\"#E3F398\"],[0.42809364548494983,\"#E4F49A\"],[0.43143812709030099,\"#E5F49B\"],[0.43478260869565216,\"#E6F59D\"],[0.43812709030100333,\"#E8F59F\"],[0.4414715719063545,\"#E9F6A1\"],[0.44481605351170567,\"#EAF6A2\"],[0.44816053511705684,\"#EBF7A4\"],[0.451505016722408,\"#EDF7A6\"],[0.45484949832775917,\"#EEF8A8\"],[0.45819397993311034,\"#EFF8A9\"],[0.46153846153846151,\"#F1F9AB\"],[0.46488294314381268,\"#F2F9AD\"],[0.46822742474916385,\"#F3FAAF\"],[0.47157190635451507,\"#F4FAB0\"],[0.47491638795986624,\"#F6FBB2\"],[0.47826086956521741,\"#F7FCB4\"],[0.48160535117056857,\"#F8FCB5\"],[0.48494983277591974,\"#F9FDB7\"],[0.48829431438127091,\"#FBFDB9\"],[0.49163879598662208,\"#FCFEBB\"],[0.49498327759197325,\"#FDFEBC\"],[0.49832775919732442,\"#FEFFBE\"],[0.50167224080267558,\"#FFFEBE\"],[0.50501672240802675,\"#FFFDBC\"],[0.50836120401337792,\"#FFFCBB\"],[0.51170568561872909,\"#FFFBB9\"],[0.51505016722408026,\"#FFFAB7\"],[0.51839464882943143,\"#FFF9B5\"],[0.52173913043478259,\"#FFF8B4\"],[0.52508361204013376,\"#FFF7B2\"],[0.52842809364548493,\"#FFF6B0\"],[0.5317725752508361,\"#FFF5AE\"],[0.53511705685618727,\"#FFF4AD\"],[0.53846153846153844,\"#FFF3AB\"],[0.5418060200668896,\"#FFF2A9\"],[0.54515050167224077,\"#FFF1A7\"],[0.54849498327759194,\"#FFF0A6\"],[0.55183946488294311,\"#FFEFA4\"],[0.55518394648829428,\"#FFEEA2\"],[0.55852842809364545,\"#FFEDA1\"],[0.56187290969899661,\"#FFEC9F\"],[0.56521739130434778,\"#FFEB9D\"],[0.56856187290969895,\"#FFEA9B\"],[0.57190635451505012,\"#FFE99A\"],[0.57525083612040129,\"#FFE898\"],[0.57859531772575246,\"#FFE796\"],[0.58193979933110362,\"#FFE694\"],[0.58528428093645479,\"#FEE593\"],[0.58862876254180596,\"#FEE391\"],[0.59197324414715713,\"#FEE28F\"],[0.5953177257525083,\"#FEE18D\"],[0.59866220735785947,\"#FEE08C\"],[0.60200668896321075,\"#FEDF8A\"],[0.60535117056856191,\"#FEDD89\"],[0.60869565217391308,\"#FEDC87\"],[0.61204013377926425,\"#FEDA86\"],[0.61538461538461542,\"#FED884\"],[0.61872909698996659,\"#FED783\"],[0.62207357859531776,\"#FED582\"],[0.62541806020066892,\"#FED380\"],[0.62876254180602009,\"#FED27F\"],[0.63210702341137126,\"#FED07D\"],[0.63545150501672243,\"#FECE7C\"],[0.6387959866220736,\"#FECD7B\"],[0.64214046822742477,\"#FECB79\"],[0.64548494983277593,\"#FEC978\"],[0.6488294314381271,\"#FEC876\"],[0.65217391304347827,\"#FEC675\"],[0.65551839464882944,\"#FEC473\"],[0.65886287625418061,\"#FEC372\"],[0.66220735785953178,\"#FEC171\"],[0.66555183946488294,\"#FEBF6F\"],[0.66889632107023411,\"#FEBE6E\"],[0.67224080267558528,\"#FEBC6C\"],[0.67558528428093645,\"#FEBA6B\"],[0.67892976588628762,\"#FEB96A\"],[0.68227424749163879,\"#FEB768\"],[0.68561872909698995,\"#FEB567\"],[0.68896321070234112,\"#FDB466\"],[0.69230769230769229,\"#FDB264\"],[0.69565217391304346,\"#FDB063\"],[0.69899665551839463,\"#FDAF61\"],[0.7023411371237458,\"#FDAD60\"],[0.70568561872909696,\"#FDAB5F\"],[0.70903010033444813,\"#FCA85E\"],[0.7123745819397993,\"#FCA65D\"],[0.71571906354515047,\"#FCA45C\"],[0.71906354515050164,\"#FCA25B\"],[0.72240802675585281,\"#FCA05A\"],[0.72575250836120397,\"#FB9E59\"],[0.72909698996655514,\"#FB9C58\"],[0.73244147157190631,\"#FB9A57\"],[0.73578595317725748,\"#FB9856\"],[0.73913043478260865,\"#FA9655\"],[0.74247491638795982,\"#FA9354\"],[0.74581939799331098,\"#FA9153\"],[0.74916387959866215,\"#F98F52\"],[0.75250836120401332,\"#F98D51\"],[0.75585284280936449,\"#F98B50\"],[0.75919732441471566,\"#F8894F\"],[0.76254180602006683,\"#F8874E\"],[0.76588628762541799,\"#F8844D\"],[0.76923076923076916,\"#F7824C\"],[0.77257525083612044,\"#F7804B\"],[0.77591973244147161,\"#F77E4A\"],[0.77926421404682278,\"#F67B49\"],[0.78260869565217395,\"#F67948\"],[0.78595317725752512,\"#F67747\"],[0.78929765886287628,\"#F57546\"],[0.79264214046822745,\"#F57245\"],[0.79598662207357862,\"#F47044\"],[0.79933110367892979,\"#F46D43\"],[0.80267558528428096,\"#F36C42\"],[0.80602006688963213,\"#F26A41\"],[0.80936454849498329,\"#F16840\"],[0.81270903010033446,\"#F0663F\"],[0.81605351170568563,\"#EF643E\"],[0.8193979933110368,\"#EF633D\"],[0.82274247491638797,\"#EE613C\"],[0.82608695652173914,\"#ED5F3B\"],[0.8294314381270903,\"#EC5D3A\"],[0.83277591973244147,\"#EB5B3A\"],[0.83612040133779264,\"#EA5939\"],[0.83946488294314381,\"#E95738\"],[0.84280936454849498,\"#E85537\"],[0.84615384615384615,\"#E75336\"],[0.84949832775919731,\"#E65135\"],[0.85284280936454848,\"#E54F34\"],[0.85618729096989965,\"#E44D33\"],[0.85953177257525082,\"#E34B32\"],[0.86287625418060199,\"#E24931\"],[0.86622073578595316,\"#E14730\"],[0.86956521739130432,\"#E0452F\"],[0.87290969899665549,\"#DF432E\"],[0.87625418060200666,\"#DE412D\"],[0.87959866220735783,\"#DD3F2C\"],[0.882943143812709,\"#DC3C2C\"],[0.88628762541806017,\"#DB3A2B\"],[0.88963210702341133,\"#DA382A\"],[0.8929765886287625,\"#D93529\"],[0.89632107023411367,\"#D83328\"],[0.89966555183946484,\"#D73027\"],[0.90301003344481601,\"#D52F27\"],[0.90635451505016718,\"#D42E27\"],[0.90969899665551834,\"#D22C27\"],[0.91304347826086951,\"#D02B27\"],[0.91638795986622068,\"#CF2A27\"],[0.91973244147157185,\"#CD2927\"],[0.92307692307692302,\"#CB2727\"],[0.92642140468227419,\"#CA2627\"],[0.92976588628762535,\"#C82527\"],[0.93311036789297652,\"#C62427\"],[0.93645484949832769,\"#C52227\"],[0.93979933110367886,\"#C32127\"],[0.94314381270903014,\"#C11F27\"],[0.94648829431438131,\"#BF1E27\"],[0.94983277591973247,\"#BE1D27\"],[0.95317725752508364,\"#BC1B27\"],[0.95652173913043481,\"#BA1A27\"],[0.95986622073578598,\"#B91827\"],[0.96321070234113715,\"#B71627\"],[0.96655518394648832,\"#B51527\"],[0.96989966555183948,\"#B41327\"],[0.97324414715719065,\"#B21127\"],[0.97658862876254182,\"#B10F27\"],[0.97993311036789299,\"#AF0D26\"],[0.98327759197324416,\"#AD0B26\"],[0.98662207357859533,\"#AC0926\"],[0.98996655518394649,\"#AA0726\"],[0.99331103678929766,\"#A80426\"],[0.99665551839464883,\"#A70226\"],[1,\"#A50026\"]],\"colorbar\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.8897637795275593,\"thickness\":23.039999999999996,\"title\":\"value\",\"titlefont\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"tickmode\":\"array\",\"ticktext\":[\"0.00\",\"0.25\",\"0.50\",\"0.75\",\"1.00\"],\"tickvals\":[0,0.25,0.5,0.75,1],\"tickfont\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.68949771689498},\"ticklen\":2,\"len\":0.5}},\"xaxis\":\"x\",\"yaxis\":\"y2\",\"frame\":null},{\"x\":[0.93861177256733785,0.93861177256733785,null,0.93861177256733785,0,null,0.93861177256733785,0.93861177256733785,null,0.93861177256733785,0.18229656078734624,null,0.18229656078734624,0.18229656078734624,null,0.18229656078734624,0,null,0.18229656078734624,0.18229656078734624,null,0.18229656078734624,0],\"y\":[1.75,1,null,1,1,null,1.75,2.5,null,2.5,2.5,null,2.5,2,null,2,2,null,2.5,3,null,3,3],\"text\":[\"y: 0.9386118\",\"y: 0.9386118\",null,\"y: 0.9386118\",\"y: 0.9386118\",null,\"y: 0.9386118\",\"y: 0.9386118\",null,\"y: 0.9386118\",\"y: 0.9386118\",null,\"y: 0.1822966\",\"y: 0.1822966\",null,\"y: 0.1822966\",\"y: 0.1822966\",null,\"y: 0.1822966\",\"y: 0.1822966\",null,\"y: 0.1822966\",\"y: 0.1822966\"],\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":2.2677165354330708,\"color\":\"rgba(0,0,0,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x2\",\"yaxis\":\"y2\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[0.93861177256733785,0,0.18229656078734624,0,0],\"y\":[1.75,1,2.5,2,3],\"text\":[\"y: 0.9386118\",\"y: 0.0000000\",\"y: 0.1822966\",\"y: 0.0000000\",\"y: 0.0000000\"],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"transparent\",\"opacity\":1,\"size\":null,\"symbol\":null,\"line\":{\"width\":1.8897637795275593,\"color\":\"transparent\"}},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x2\",\"yaxis\":\"y2\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"xaxis\":{\"domain\":[0,0.80000000000000004],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[0.40000000000000002,3.6000000000000001],\"tickmode\":\"array\",\"ticktext\":[\"maaslin__Coussin_de_Lyon\",\"metagenomeseq__Nazook\",\"deseq__Pan_dulce\"],\"tickvals\":[1,2,3],\"categoryorder\":\"array\",\"categoryarray\":[\"maaslin__Coussin_de_Lyon\",\"metagenomeseq__Nazook\",\"deseq__Pan_dulce\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"Arial\",\"size\":19.9252801992528},\"tickangle\":-45,\"showline\":true,\"linecolor\":\"rgba(0,0,0,1)\",\"linewidth\":0.66417600664176002,\"showgrid\":false,\"gridcolor\":null,\"gridwidth\":0,\"zeroline\":false,\"anchor\":\"y2\",\"title\":\"\",\"hoverformat\":\".2f\"},\"xaxis2\":{\"domain\":[0.80000000000000004,1],\"automargin\":true,\"showticklabels\":false,\"showgrid\":false,\"zeroline\":false,\"anchor\":\"y2\",\"type\":\"linear\",\"autorange\":false,\"range\":[0,0.93861177256733785],\"tickmode\":\"array\",\"ticktext\":[\"0.00\",\"0.25\",\"0.50\",\"0.75\"],\"tickvals\":[0,0.25,0.5,0.75],\"categoryorder\":\"array\",\"categoryarray\":[\"0.00\",\"0.25\",\"0.50\",\"0.75\"],\"nticks\":null,\"ticks\":\"\",\"tickcolor\":null,\"ticklen\":3.6529680365296811,\"tickwidth\":0,\"tickfont\":{\"color\":null,\"family\":null,\"size\":0},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"gridcolor\":null,\"gridwidth\":0,\"title\":{\"text\":\"\",\"font\":{\"color\":null,\"family\":null,\"size\":0}},\"hoverformat\":\".2f\"},\"yaxis2\":{\"domain\":[0,0.80000000000000004],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[0.40000000000000002,3.6000000000000001],\"tickmode\":\"array\",\"ticktext\":[\"maaslin__Coussin_de_Lyon\",\"metagenomeseq__Nazook\",\"deseq__Pan_dulce\"],\"tickvals\":[1,2,3],\"categoryorder\":\"array\",\"categoryarray\":[\"maaslin__Coussin_de_Lyon\",\"metagenomeseq__Nazook\",\"deseq__Pan_dulce\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"Arial\",\"size\":19.9252801992528},\"tickangle\":-0,\"showline\":true,\"linecolor\":\"rgba(0,0,0,1)\",\"linewidth\":0.66417600664176002,\"showgrid\":false,\"gridcolor\":null,\"gridwidth\":0,\"zeroline\":false,\"anchor\":\"x\",\"title\":\"\",\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0.80000000000000004,1],\"automargin\":true,\"showticklabels\":false,\"showgrid\":false,\"zeroline\":false,\"anchor\":\"x\",\"type\":\"linear\",\"autorange\":false,\"range\":[0,0.93861177256733785],\"tickmode\":\"array\",\"ticktext\":[\"0.00\",\"0.25\",\"0.50\",\"0.75\"],\"tickvals\":[0,0.25,0.5,0.75],\"categoryorder\":\"array\",\"categoryarray\":[\"0.00\",\"0.25\",\"0.50\",\"0.75\"],\"nticks\":null,\"ticks\":\"\",\"tickcolor\":null,\"ticklen\":3.6529680365296811,\"tickwidth\":0,\"tickfont\":{\"color\":null,\"family\":null,\"size\":0},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"gridcolor\":null,\"gridwidth\":0,\"title\":{\"text\":\"\",\"font\":{\"color\":null,\"family\":null,\"size\":0}},\"hoverformat\":\".2f\"},\"annotations\":[],\"shapes\":[{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":0.80000000000000004,\"y0\":0.80000000000000004,\"y1\":1},{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":0.80000000000000004,\"y0\":0,\"y1\":0.80000000000000004},{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0.80000000000000004,\"x1\":1,\"y0\":0,\"y1\":0.80000000000000004}],\"images\":[],\"margin\":{\"t\":0,\"r\":null,\"b\":286.9240348692403,\"l\":286.9240348692403},\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"showlegend\":false,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.8897637795275593,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.68949771689498},\"title\":{\"text\":\"Point size\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"y\":1,\"yanchor\":\"top\"},\"hovermode\":\"closest\",\"barmode\":\"relative\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"title\":\"\"},\"attrs\":{\"3f67359b8151\":{\"xend\":{},\"yend\":{},\"colour\":{},\"linetype\":{},\"size\":{},\"x\":{},\"y\":{},\"type\":\"scatter\"},\"3f675e9ba1bc\":{\"colour\":{},\"shape\":{},\"size\":{},\"x\":{},\"y\":{}},\"3f6757ef9a6c\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20]},\"3f6767a87c42\":{\"x\":{},\"y\":{},\"colour\":{},\"text\":{},\"size\":{},\"type\":\"scatter\"},\"3f671b593513\":{\"xend\":{},\"yend\":{},\"colour\":{},\"linetype\":{},\"size\":{},\"x\":{},\"y\":{},\"type\":\"scatter\"},\"3f676aa5517d\":{\"colour\":{},\"shape\":{},\"size\":{},\"x\":{},\"y\":{}}},\"source\":\"A\",\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false,\"displaylogo\":false,\"modeBarButtonsToRemove\":[\"sendDataToCloud\",\"select2d\",\"lasso2d\",\"autoScale2d\",\"hoverClosestCartesian\",\"hoverCompareCartesian\",\"sendDataToCloud\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"subplot\":true,\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]} ## If you want to exclude a method for the plot, you can remove it with the ## step parameter. In the following example we eliminate from the graph the ## results of maaslin corr_heatmap(test_prep_rec, steps = steps_ids(test_prep_rec, \"da\")[-1])  {\"x\":{\"data\":[{\"x\":[1.5,1,null,1,1,null,1.5,2,null,2,2],\"y\":[0.18202748822623996,0.18202748822623996,null,0.18202748822623996,0,null,0.18202748822623996,0.18202748822623996,null,0.18202748822623996,0],\"text\":\"y: 0.1820275\",\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":2.2677165354330708,\"color\":\"rgba(0,0,0,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[1.5,1,2],\"y\":[0.18202748822623996,0,0],\"text\":[\"y: 0.1820275\",\"y: 0.0000000\",\"y: 0.0000000\"],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"transparent\",\"opacity\":1,\"size\":null,\"symbol\":null,\"line\":{\"width\":1.8897637795275593,\"color\":\"transparent\"}},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(44,160,44,1)\",\"line\":{\"color\":\"rgba(44,160,44,1)\"}},\"error_y\":{\"color\":\"rgba(44,160,44,1)\"},\"error_x\":{\"color\":\"rgba(44,160,44,1)\"},\"line\":{\"color\":\"rgba(44,160,44,1)\"},\"xaxis\":\"x2\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[1,1,2,2],\"y\":[1,2,1,2],\"text\":[\"row: metagenomeseq__Nazook<br>column: metagenomeseq__Nazook<br>value: 1.0000 <br> Point size :  1.0000\",\"row: deseq__Pan_dulce<br>column: metagenomeseq__Nazook<br>value: 0.8713 <br> Point size :  0.8713\",\"row: metagenomeseq__Nazook<br>column: deseq__Pan_dulce<br>value: 0.8713 <br> Point size :  0.8713\",\"row: deseq__Pan_dulce<br>column: deseq__Pan_dulce<br>value: 1.0000 <br> Point size :  1.0000\"],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":[\"rgba(165,0,38,1)\",\"rgba(224,68,47,1)\",\"rgba(224,68,47,1)\",\"rgba(165,0,38,1)\"],\"opacity\":1,\"size\":[22.677165354330711,3.7795275590551185,3.7795275590551185,22.677165354330711],\"symbol\":\"circle\",\"line\":{\"width\":1.8897637795275593,\"color\":[\"rgba(165,0,38,1)\",\"rgba(224,68,47,1)\",\"rgba(224,68,47,1)\",\"rgba(165,0,38,1)\"]}},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y2\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[1],\"y\":[1],\"name\":\"99_0e1c4cd0ab8b9a97b06de41b32373fad\",\"type\":\"scatter\",\"mode\":\"markers\",\"opacity\":0,\"hoverinfo\":\"skip\",\"showlegend\":false,\"marker\":{\"color\":[0,1],\"colorscale\":[[0,\"#006837\"],[0.0033444816053511705,\"#016A38\"],[0.006688963210702341,\"#016B39\"],[0.010033444816053512,\"#026D39\"],[0.013377926421404682,\"#036E3A\"],[0.016722408026755852,\"#04703B\"],[0.020066889632107024,\"#04713C\"],[0.023411371237458192,\"#05733D\"],[0.026755852842809364,\"#06753E\"],[0.030100334448160536,\"#07763E\"],[0.033444816053511704,\"#08783F\"],[0.036789297658862873,\"#097940\"],[0.040133779264214048,\"#0A7B41\"],[0.043478260869565216,\"#0B7C42\"],[0.046822742474916385,\"#0C7E43\"],[0.05016722408026756,\"#0D8043\"],[0.053511705685618728,\"#0E8144\"],[0.056856187290969896,\"#0F8345\"],[0.060200668896321072,\"#108546\"],[0.06354515050167224,\"#118647\"],[0.066889632107023408,\"#128848\"],[0.070234113712374577,\"#128948\"],[0.073578595317725745,\"#138B49\"],[0.076923076923076927,\"#148D4A\"],[0.080267558528428096,\"#158E4B\"],[0.083612040133779264,\"#16904C\"],[0.086956521739130432,\"#17924D\"],[0.090301003344481601,\"#18934E\"],[0.093645484949832769,\"#18954E\"],[0.096989966555183951,\"#19974F\"],[0.10033444816053512,\"#1A9850\"],[0.10367892976588629,\"#1F9951\"],[0.10702341137123746,\"#229B51\"],[0.11036789297658862,\"#269C52\"],[0.11371237458193979,\"#299D53\"],[0.11705685618729096,\"#2C9E53\"],[0.12040133779264214,\"#2F9F54\"],[0.12374581939799331,\"#32A154\"],[0.12709030100334448,\"#35A255\"],[0.13043478260869565,\"#38A356\"],[0.13377926421404682,\"#3AA456\"],[0.13712374581939799,\"#3DA657\"],[0.14046822742474915,\"#3FA758\"],[0.14381270903010032,\"#42A858\"],[0.14715719063545149,\"#44A959\"],[0.15050167224080269,\"#46AB5A\"],[0.15384615384615385,\"#49AC5A\"],[0.15719063545150502,\"#4BAD5B\"],[0.16053511705685619,\"#4DAE5B\"],[0.16387959866220736,\"#4FB05C\"],[0.16722408026755853,\"#52B15D\"],[0.1705685618729097,\"#54B25D\"],[0.17391304347826086,\"#56B35E\"],[0.17725752508361203,\"#58B55F\"],[0.1806020066889632,\"#5AB65F\"],[0.18394648829431437,\"#5CB760\"],[0.18729096989966554,\"#5EB861\"],[0.19063545150501671,\"#60B961\"],[0.1939799331103679,\"#62BB62\"],[0.19732441471571907,\"#64BC62\"],[0.20066889632107024,\"#66BD63\"],[0.20401337792642141,\"#69BE63\"],[0.20735785953177258,\"#6BBF64\"],[0.21070234113712374,\"#6DC064\"],[0.21404682274247491,\"#70C164\"],[0.21739130434782608,\"#72C264\"],[0.22073578595317725,\"#74C364\"],[0.22408026755852842,\"#76C465\"],[0.22742474916387959,\"#79C565\"],[0.23076923076923075,\"#7BC665\"],[0.23411371237458192,\"#7DC765\"],[0.23745819397993312,\"#7FC766\"],[0.24080267558528429,\"#81C866\"],[0.24414715719063546,\"#83C966\"],[0.24749163879598662,\"#86CA66\"],[0.25083612040133779,\"#88CB67\"],[0.25418060200668896,\"#8ACC67\"],[0.25752508361204013,\"#8CCD67\"],[0.2608695652173913,\"#8ECE67\"],[0.26421404682274247,\"#90CF68\"],[0.26755852842809363,\"#92D068\"],[0.2709030100334448,\"#94D168\"],[0.27424749163879597,\"#96D268\"],[0.27759197324414714,\"#98D368\"],[0.28093645484949831,\"#9AD469\"],[0.28428093645484948,\"#9CD569\"],[0.28762541806020064,\"#9FD669\"],[0.29096989966555181,\"#A1D669\"],[0.29431438127090298,\"#A3D76A\"],[0.29765886287625415,\"#A5D86A\"],[0.30100334448160537,\"#A7D96A\"],[0.30434782608695654,\"#A8DA6B\"],[0.30769230769230771,\"#AADB6D\"],[0.31103678929765888,\"#ACDB6E\"],[0.31438127090301005,\"#ADDC6F\"],[0.31772575250836121,\"#AFDD70\"],[0.32107023411371238,\"#B1DE71\"],[0.32441471571906355,\"#B3DE72\"],[0.32775919732441472,\"#B4DF73\"],[0.33110367892976589,\"#B6E074\"],[0.33444816053511706,\"#B8E175\"],[0.33779264214046822,\"#B9E176\"],[0.34113712374581939,\"#BBE278\"],[0.34448160535117056,\"#BDE379\"],[0.34782608695652173,\"#BFE47A\"],[0.3511705685618729,\"#C0E47B\"],[0.35451505016722407,\"#C2E57C\"],[0.35785953177257523,\"#C4E67D\"],[0.3612040133779264,\"#C5E77E\"],[0.36454849498327757,\"#C7E77F\"],[0.36789297658862874,\"#C9E880\"],[0.37123745819397991,\"#CAE981\"],[0.37458193979933108,\"#CCE983\"],[0.37792642140468224,\"#CEEA84\"],[0.38127090301003341,\"#D0EB85\"],[0.38461538461538458,\"#D1EC86\"],[0.38795986622073581,\"#D3EC87\"],[0.39130434782608697,\"#D5ED88\"],[0.39464882943143814,\"#D6EE89\"],[0.39799331103678931,\"#D8EF8A\"],[0.40133779264214048,\"#DAEF8C\"],[0.40468227424749165,\"#DBF08D\"],[0.40802675585284282,\"#DCF08F\"],[0.41137123745819398,\"#DDF191\"],[0.41471571906354515,\"#DFF193\"],[0.41806020066889632,\"#E0F294\"],[0.42140468227424749,\"#E1F296\"],[0.42474916387959866,\"#E3F398\"],[0.42809364548494983,\"#E4F49A\"],[0.43143812709030099,\"#E5F49B\"],[0.43478260869565216,\"#E6F59D\"],[0.43812709030100333,\"#E8F59F\"],[0.4414715719063545,\"#E9F6A1\"],[0.44481605351170567,\"#EAF6A2\"],[0.44816053511705684,\"#EBF7A4\"],[0.451505016722408,\"#EDF7A6\"],[0.45484949832775917,\"#EEF8A8\"],[0.45819397993311034,\"#EFF8A9\"],[0.46153846153846151,\"#F1F9AB\"],[0.46488294314381268,\"#F2F9AD\"],[0.46822742474916385,\"#F3FAAF\"],[0.47157190635451507,\"#F4FAB0\"],[0.47491638795986624,\"#F6FBB2\"],[0.47826086956521741,\"#F7FCB4\"],[0.48160535117056857,\"#F8FCB5\"],[0.48494983277591974,\"#F9FDB7\"],[0.48829431438127091,\"#FBFDB9\"],[0.49163879598662208,\"#FCFEBB\"],[0.49498327759197325,\"#FDFEBC\"],[0.49832775919732442,\"#FEFFBE\"],[0.50167224080267558,\"#FFFEBE\"],[0.50501672240802675,\"#FFFDBC\"],[0.50836120401337792,\"#FFFCBB\"],[0.51170568561872909,\"#FFFBB9\"],[0.51505016722408026,\"#FFFAB7\"],[0.51839464882943143,\"#FFF9B5\"],[0.52173913043478259,\"#FFF8B4\"],[0.52508361204013376,\"#FFF7B2\"],[0.52842809364548493,\"#FFF6B0\"],[0.5317725752508361,\"#FFF5AE\"],[0.53511705685618727,\"#FFF4AD\"],[0.53846153846153844,\"#FFF3AB\"],[0.5418060200668896,\"#FFF2A9\"],[0.54515050167224077,\"#FFF1A7\"],[0.54849498327759194,\"#FFF0A6\"],[0.55183946488294311,\"#FFEFA4\"],[0.55518394648829428,\"#FFEEA2\"],[0.55852842809364545,\"#FFEDA1\"],[0.56187290969899661,\"#FFEC9F\"],[0.56521739130434778,\"#FFEB9D\"],[0.56856187290969895,\"#FFEA9B\"],[0.57190635451505012,\"#FFE99A\"],[0.57525083612040129,\"#FFE898\"],[0.57859531772575246,\"#FFE796\"],[0.58193979933110362,\"#FFE694\"],[0.58528428093645479,\"#FEE593\"],[0.58862876254180596,\"#FEE391\"],[0.59197324414715713,\"#FEE28F\"],[0.5953177257525083,\"#FEE18D\"],[0.59866220735785947,\"#FEE08C\"],[0.60200668896321075,\"#FEDF8A\"],[0.60535117056856191,\"#FEDD89\"],[0.60869565217391308,\"#FEDC87\"],[0.61204013377926425,\"#FEDA86\"],[0.61538461538461542,\"#FED884\"],[0.61872909698996659,\"#FED783\"],[0.62207357859531776,\"#FED582\"],[0.62541806020066892,\"#FED380\"],[0.62876254180602009,\"#FED27F\"],[0.63210702341137126,\"#FED07D\"],[0.63545150501672243,\"#FECE7C\"],[0.6387959866220736,\"#FECD7B\"],[0.64214046822742477,\"#FECB79\"],[0.64548494983277593,\"#FEC978\"],[0.6488294314381271,\"#FEC876\"],[0.65217391304347827,\"#FEC675\"],[0.65551839464882944,\"#FEC473\"],[0.65886287625418061,\"#FEC372\"],[0.66220735785953178,\"#FEC171\"],[0.66555183946488294,\"#FEBF6F\"],[0.66889632107023411,\"#FEBE6E\"],[0.67224080267558528,\"#FEBC6C\"],[0.67558528428093645,\"#FEBA6B\"],[0.67892976588628762,\"#FEB96A\"],[0.68227424749163879,\"#FEB768\"],[0.68561872909698995,\"#FEB567\"],[0.68896321070234112,\"#FDB466\"],[0.69230769230769229,\"#FDB264\"],[0.69565217391304346,\"#FDB063\"],[0.69899665551839463,\"#FDAF61\"],[0.7023411371237458,\"#FDAD60\"],[0.70568561872909696,\"#FDAB5F\"],[0.70903010033444813,\"#FCA85E\"],[0.7123745819397993,\"#FCA65D\"],[0.71571906354515047,\"#FCA45C\"],[0.71906354515050164,\"#FCA25B\"],[0.72240802675585281,\"#FCA05A\"],[0.72575250836120397,\"#FB9E59\"],[0.72909698996655514,\"#FB9C58\"],[0.73244147157190631,\"#FB9A57\"],[0.73578595317725748,\"#FB9856\"],[0.73913043478260865,\"#FA9655\"],[0.74247491638795982,\"#FA9354\"],[0.74581939799331098,\"#FA9153\"],[0.74916387959866215,\"#F98F52\"],[0.75250836120401332,\"#F98D51\"],[0.75585284280936449,\"#F98B50\"],[0.75919732441471566,\"#F8894F\"],[0.76254180602006683,\"#F8874E\"],[0.76588628762541799,\"#F8844D\"],[0.76923076923076916,\"#F7824C\"],[0.77257525083612044,\"#F7804B\"],[0.77591973244147161,\"#F77E4A\"],[0.77926421404682278,\"#F67B49\"],[0.78260869565217395,\"#F67948\"],[0.78595317725752512,\"#F67747\"],[0.78929765886287628,\"#F57546\"],[0.79264214046822745,\"#F57245\"],[0.79598662207357862,\"#F47044\"],[0.79933110367892979,\"#F46D43\"],[0.80267558528428096,\"#F36C42\"],[0.80602006688963213,\"#F26A41\"],[0.80936454849498329,\"#F16840\"],[0.81270903010033446,\"#F0663F\"],[0.81605351170568563,\"#EF643E\"],[0.8193979933110368,\"#EF633D\"],[0.82274247491638797,\"#EE613C\"],[0.82608695652173914,\"#ED5F3B\"],[0.8294314381270903,\"#EC5D3A\"],[0.83277591973244147,\"#EB5B3A\"],[0.83612040133779264,\"#EA5939\"],[0.83946488294314381,\"#E95738\"],[0.84280936454849498,\"#E85537\"],[0.84615384615384615,\"#E75336\"],[0.84949832775919731,\"#E65135\"],[0.85284280936454848,\"#E54F34\"],[0.85618729096989965,\"#E44D33\"],[0.85953177257525082,\"#E34B32\"],[0.86287625418060199,\"#E24931\"],[0.86622073578595316,\"#E14730\"],[0.86956521739130432,\"#E0452F\"],[0.87290969899665549,\"#DF432E\"],[0.87625418060200666,\"#DE412D\"],[0.87959866220735783,\"#DD3F2C\"],[0.882943143812709,\"#DC3C2C\"],[0.88628762541806017,\"#DB3A2B\"],[0.88963210702341133,\"#DA382A\"],[0.8929765886287625,\"#D93529\"],[0.89632107023411367,\"#D83328\"],[0.89966555183946484,\"#D73027\"],[0.90301003344481601,\"#D52F27\"],[0.90635451505016718,\"#D42E27\"],[0.90969899665551834,\"#D22C27\"],[0.91304347826086951,\"#D02B27\"],[0.91638795986622068,\"#CF2A27\"],[0.91973244147157185,\"#CD2927\"],[0.92307692307692302,\"#CB2727\"],[0.92642140468227419,\"#CA2627\"],[0.92976588628762535,\"#C82527\"],[0.93311036789297652,\"#C62427\"],[0.93645484949832769,\"#C52227\"],[0.93979933110367886,\"#C32127\"],[0.94314381270903014,\"#C11F27\"],[0.94648829431438131,\"#BF1E27\"],[0.94983277591973247,\"#BE1D27\"],[0.95317725752508364,\"#BC1B27\"],[0.95652173913043481,\"#BA1A27\"],[0.95986622073578598,\"#B91827\"],[0.96321070234113715,\"#B71627\"],[0.96655518394648832,\"#B51527\"],[0.96989966555183948,\"#B41327\"],[0.97324414715719065,\"#B21127\"],[0.97658862876254182,\"#B10F27\"],[0.97993311036789299,\"#AF0D26\"],[0.98327759197324416,\"#AD0B26\"],[0.98662207357859533,\"#AC0926\"],[0.98996655518394649,\"#AA0726\"],[0.99331103678929766,\"#A80426\"],[0.99665551839464883,\"#A70226\"],[1,\"#A50026\"]],\"colorbar\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.8897637795275593,\"thickness\":23.039999999999996,\"title\":\"value\",\"titlefont\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"tickmode\":\"array\",\"ticktext\":[\"0.00\",\"0.25\",\"0.50\",\"0.75\",\"1.00\"],\"tickvals\":[0,0.25,0.5,0.75,1],\"tickfont\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.68949771689498},\"ticklen\":2,\"len\":0.5}},\"xaxis\":\"x\",\"yaxis\":\"y2\",\"frame\":null},{\"x\":[0.18202748822623996,0.18202748822623996,null,0.18202748822623996,0,null,0.18202748822623996,0.18202748822623996,null,0.18202748822623996,0],\"y\":[1.5,1,null,1,1,null,1.5,2,null,2,2],\"text\":\"y: 0.1820275\",\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":2.2677165354330708,\"color\":\"rgba(0,0,0,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x2\",\"yaxis\":\"y2\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[0.18202748822623996,0,0],\"y\":[1.5,1,2],\"text\":[\"y: 0.1820275\",\"y: 0.0000000\",\"y: 0.0000000\"],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"transparent\",\"opacity\":1,\"size\":null,\"symbol\":null,\"line\":{\"width\":1.8897637795275593,\"color\":\"transparent\"}},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x2\",\"yaxis\":\"y2\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"xaxis\":{\"domain\":[0,0.80000000000000004],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[0.40000000000000002,2.6000000000000001],\"tickmode\":\"array\",\"ticktext\":[\"metagenomeseq__Nazook\",\"deseq__Pan_dulce\"],\"tickvals\":[1,2],\"categoryorder\":\"array\",\"categoryarray\":[\"metagenomeseq__Nazook\",\"deseq__Pan_dulce\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"Arial\",\"size\":19.9252801992528},\"tickangle\":-45,\"showline\":true,\"linecolor\":\"rgba(0,0,0,1)\",\"linewidth\":0.66417600664176002,\"showgrid\":false,\"gridcolor\":null,\"gridwidth\":0,\"zeroline\":false,\"anchor\":\"y2\",\"title\":\"\",\"hoverformat\":\".2f\"},\"xaxis2\":{\"domain\":[0.80000000000000004,1],\"automargin\":true,\"showticklabels\":false,\"showgrid\":false,\"zeroline\":false,\"anchor\":\"y2\",\"type\":\"linear\",\"autorange\":false,\"range\":[0,0.18202748822623996],\"tickmode\":\"array\",\"ticktext\":[\"0.00\",\"0.05\",\"0.10\",\"0.15\"],\"tickvals\":[0,0.050000000000000003,0.10000000000000001,0.15000000000000002],\"categoryorder\":\"array\",\"categoryarray\":[\"0.00\",\"0.05\",\"0.10\",\"0.15\"],\"nticks\":null,\"ticks\":\"\",\"tickcolor\":null,\"ticklen\":3.6529680365296811,\"tickwidth\":0,\"tickfont\":{\"color\":null,\"family\":null,\"size\":0},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"gridcolor\":null,\"gridwidth\":0,\"title\":{\"text\":\"\",\"font\":{\"color\":null,\"family\":null,\"size\":0}},\"hoverformat\":\".2f\"},\"yaxis2\":{\"domain\":[0,0.80000000000000004],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[0.40000000000000002,2.6000000000000001],\"tickmode\":\"array\",\"ticktext\":[\"metagenomeseq__Nazook\",\"deseq__Pan_dulce\"],\"tickvals\":[1,2],\"categoryorder\":\"array\",\"categoryarray\":[\"metagenomeseq__Nazook\",\"deseq__Pan_dulce\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"Arial\",\"size\":19.9252801992528},\"tickangle\":-0,\"showline\":true,\"linecolor\":\"rgba(0,0,0,1)\",\"linewidth\":0.66417600664176002,\"showgrid\":false,\"gridcolor\":null,\"gridwidth\":0,\"zeroline\":false,\"anchor\":\"x\",\"title\":\"\",\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0.80000000000000004,1],\"automargin\":true,\"showticklabels\":false,\"showgrid\":false,\"zeroline\":false,\"anchor\":\"x\",\"type\":\"linear\",\"autorange\":false,\"range\":[0,0.18202748822623996],\"tickmode\":\"array\",\"ticktext\":[\"0.00\",\"0.05\",\"0.10\",\"0.15\"],\"tickvals\":[0,0.050000000000000003,0.10000000000000001,0.15000000000000002],\"categoryorder\":\"array\",\"categoryarray\":[\"0.00\",\"0.05\",\"0.10\",\"0.15\"],\"nticks\":null,\"ticks\":\"\",\"tickcolor\":null,\"ticklen\":3.6529680365296811,\"tickwidth\":0,\"tickfont\":{\"color\":null,\"family\":null,\"size\":0},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"gridcolor\":null,\"gridwidth\":0,\"title\":{\"text\":\"\",\"font\":{\"color\":null,\"family\":null,\"size\":0}},\"hoverformat\":\".2f\"},\"annotations\":[],\"shapes\":[{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":0.80000000000000004,\"y0\":0.80000000000000004,\"y1\":1},{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":0.80000000000000004,\"y0\":0,\"y1\":0.80000000000000004},{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0.80000000000000004,\"x1\":1,\"y0\":0,\"y1\":0.80000000000000004}],\"images\":[],\"margin\":{\"t\":0,\"r\":null,\"b\":251.05853051058529,\"l\":251.05853051058529},\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"showlegend\":false,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.8897637795275593,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.68949771689498},\"title\":{\"text\":\"Point size\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"y\":1,\"yanchor\":\"top\"},\"hovermode\":\"closest\",\"barmode\":\"relative\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"title\":\"\"},\"attrs\":{\"3f67586404ea\":{\"xend\":{},\"yend\":{},\"colour\":{},\"linetype\":{},\"size\":{},\"x\":{},\"y\":{},\"type\":\"scatter\"},\"3f6743b7e282\":{\"colour\":{},\"shape\":{},\"size\":{},\"x\":{},\"y\":{}},\"3f67771171c7\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20]},\"3f677a610102\":{\"x\":{},\"y\":{},\"colour\":{},\"text\":{},\"size\":{},\"type\":\"scatter\"},\"3f67120d66f\":{\"xend\":{},\"yend\":{},\"colour\":{},\"linetype\":{},\"size\":{},\"x\":{},\"y\":{},\"type\":\"scatter\"},\"3f675d038c2f\":{\"colour\":{},\"shape\":{},\"size\":{},\"x\":{},\"y\":{}}},\"source\":\"A\",\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false,\"displaylogo\":false,\"modeBarButtonsToRemove\":[\"sendDataToCloud\",\"select2d\",\"lasso2d\",\"autoScale2d\",\"hoverClosestCartesian\",\"hoverCompareCartesian\",\"sendDataToCloud\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"subplot\":true,\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]} ## corr_heatmap function needs a prep-recipe. If you pass a a non-prep ## recipe the output is an error. data(test_rec) err <- testthat::expect_error(corr_heatmap(test_rec)) err #> <error/rlang_error> #> Error in `corr_heatmap()`: #> ! This function needs a prep recipe! #> • Run prep(rec) and then try with corr_heatmap() #> --- #> Backtrace: #>      ▆ #>   1. └─pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE) #>   2.   └─pkgdown::build_site(...) #>   3.     └─pkgdown:::build_site_local(...) #>   4.       └─pkgdown::build_reference(...) #>   5.         └─purrr::map(...) #>   6.           └─purrr:::map_(\"list\", .x, .f, ..., .progress = .progress) #>   7.             ├─purrr:::with_indexed_errors(...) #>   8.             │ └─base::withCallingHandlers(...) #>   9.             ├─purrr:::call_with_cleanup(...) #>  10.             └─pkgdown (local) .f(.x[[i]], ...) #>  11.               ├─base::withCallingHandlers(...) #>  12.               └─pkgdown:::data_reference_topic(...) #>  13.                 └─pkgdown:::run_examples(...) #>  14.                   └─pkgdown:::highlight_examples(code, topic, env = env) #>  15.                     └─downlit::evaluate_and_highlight(...) #>  16.                       └─evaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #>  17.                         └─evaluate:::evaluate_call(...) #>  18.                           ├─evaluate (local) timing_fn(...) #>  19.                           ├─evaluate (local) handle(...) #>  20.                           │ └─base::try(f, silent = TRUE) #>  21.                           │   └─base::tryCatch(...) #>  22.                           │     └─base (local) tryCatchList(expr, classes, parentenv, handlers) #>  23.                           │       └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  24.                           │         └─base (local) doTryCatch(return(expr), name, parentenv, handler) #>  25.                           ├─base::withCallingHandlers(...) #>  26.                           ├─base::withVisible(...) #>  27.                           └─evaluate:::eval_with_user_handlers(expr, envir, enclos, user_handlers) #>  28.                             └─base::eval(expr, envir, enclos) #>  29.                               └─base::eval(expr, envir, enclos) #>  30.                                 ├─testthat::expect_error(corr_heatmap(test_rec)) #>  31.                                 │ └─testthat:::expect_condition_matching(...) #>  32.                                 │   └─testthat:::quasi_capture(...) #>  33.                                 │     ├─testthat (local) .capture(...) #>  34.                                 │     │ └─base::withCallingHandlers(...) #>  35.                                 │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo)) #>  36.                                 ├─dar::corr_heatmap(test_rec) #>  37.                                 └─dar::corr_heatmap(test_rec)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/dar-package.html","id":null,"dir":"Reference","previous_headings":"","what":"dar: Differential Abundance Analysis by Consensus — dar-package","title":"dar: Differential Abundance Analysis by Consensus — dar-package","text":"learn dar, start vignettes: browseVignettes(package = \"dar\")","code":""},{"path":[]},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/dar-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"dar: Differential Abundance Analysis by Consensus — dar-package","text":"Maintainer: Francesc Catala-Moll fcatala@irsicaixa.es (ORCID)","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/data-metaHIV_phy.html","id":null,"dir":"Reference","previous_headings":"","what":"Phyloseq object from metaHIV project — data-metaHIV_phy","title":"Phyloseq object from metaHIV project — data-metaHIV_phy","text":"Phyloseq object containing abundance counts sample_data metaHIV project. Count reads annotated Metaphlan3.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/data-metaHIV_phy.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Phyloseq object from metaHIV project — data-metaHIV_phy","text":"phyloseq object 451 taxas, 30 samples, 3 sample variables 7 taxonomic ranks.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/data-metaHIV_phy.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Phyloseq object from metaHIV project — data-metaHIV_phy","text":"s3://fcatala-09142020-eu-west-1/cloud_test/SpeciesQuantification/Kraken2","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/data-metaHIV_phy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Phyloseq object from metaHIV project — data-metaHIV_phy","text":"function return value explicitly.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/data-metaHIV_phy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Phyloseq object from metaHIV project — data-metaHIV_phy","text":"","code":"data(metaHIV_phy) metaHIV_phy #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 451 taxa and 156 samples ] #> sample_data() Sample Data:       [ 156 samples by 3 sample variables ] #> tax_table()   Taxonomy Table:    [ 451 taxa by 7 taxonomic ranks ]"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/data-pastry_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Pastery data for step id generation — data-pastry_df","title":"Pastery data for step id generation — data-pastry_df","text":"Tibble contain","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/data-pastry_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pastery data for step id generation — data-pastry_df","text":"tbl_df object 228 unique pasteries.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/data-pastry_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pastery data for step id generation — data-pastry_df","text":"https://raw.githubusercontent.com/prasertcbs/basic-dataset/master/pastry.csv","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/data-pastry_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pastery data for step id generation — data-pastry_df","text":"function return value explicitly.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/data-test_prep_rec.html","id":null,"dir":"Reference","previous_headings":"","what":"Prep-recipe for metaHIV_phy data — data-test_prep_rec","title":"Prep-recipe for metaHIV_phy data — data-test_prep_rec","text":"recipe created metaHIV_phy object uning \"Riskgroup2\" var_info \"Genus\" tax_info. Also includes step_deseq, step_maaslin step_metagenomeSeq.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/data-test_prep_rec.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Prep-recipe for metaHIV_phy data — data-test_prep_rec","text":"prep-recipe object.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/data-test_prep_rec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prep-recipe for metaHIV_phy data — data-test_prep_rec","text":"function return value explicitly.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/data-test_rec.html","id":null,"dir":"Reference","previous_headings":"","what":"Recipe for metaHIV_phy data — data-test_rec","title":"Recipe for metaHIV_phy data — data-test_rec","text":"recipe created metaHIV_phy object uning \"Riskgroup2\" var_info \"Genus\" tax_info.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/data-test_rec.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Recipe for metaHIV_phy data — data-test_rec","text":"recipe object.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/data-test_rec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recipe for metaHIV_phy data — data-test_rec","text":"function return value explicitly.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/exclusion_plt.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the number of shared DA OTUs between methods. — exclusion_plt","title":"Plot the number of shared DA OTUs between methods. — exclusion_plt","text":"Plot number shared DA OTUs methods.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/exclusion_plt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the number of shared DA OTUs between methods. — exclusion_plt","text":"","code":"exclusion_plt(rec, steps = steps_ids(rec, \"da\"))  # S4 method for recipe exclusion_plt(rec, steps = steps_ids(rec, \"da\"))  # S4 method for prep_recipe exclusion_plt(rec, steps = steps_ids(rec, \"da\"))"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/exclusion_plt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the number of shared DA OTUs between methods. — exclusion_plt","text":"rec recipe object. steps Character vector step_ids take account.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/exclusion_plt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the number of shared DA OTUs between methods. — exclusion_plt","text":"ggplot2-class object","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/exclusion_plt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the number of shared DA OTUs between methods. — exclusion_plt","text":"","code":"data(test_prep_rec)  ## Running the function returns a barplot plot, exclusion_plt(test_prep_rec)   ## If you want to exclude a method for the plot, you can remove it with the ## step parameter. In the following example we eliminate from the graph the ## results of maaslin exclusion_plt(test_prep_rec, steps = steps_ids(test_prep_rec, \"da\")[-1])   ## intersection_plt function needs a prep-recipe. If you pass a a non-prep ## recipe the output is an error. data(test_rec) err <- testthat::expect_error(exclusion_plt(test_rec)) err #> <error/rlang_error> #> Error in `exclusion_plt()`: #> ! This function needs a prep recipe! #> • Run prep(rec) and then try with exclusion_plt() #> --- #> Backtrace: #>      ▆ #>   1. └─pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE) #>   2.   └─pkgdown::build_site(...) #>   3.     └─pkgdown:::build_site_local(...) #>   4.       └─pkgdown::build_reference(...) #>   5.         └─purrr::map(...) #>   6.           └─purrr:::map_(\"list\", .x, .f, ..., .progress = .progress) #>   7.             ├─purrr:::with_indexed_errors(...) #>   8.             │ └─base::withCallingHandlers(...) #>   9.             ├─purrr:::call_with_cleanup(...) #>  10.             └─pkgdown (local) .f(.x[[i]], ...) #>  11.               ├─base::withCallingHandlers(...) #>  12.               └─pkgdown:::data_reference_topic(...) #>  13.                 └─pkgdown:::run_examples(...) #>  14.                   └─pkgdown:::highlight_examples(code, topic, env = env) #>  15.                     └─downlit::evaluate_and_highlight(...) #>  16.                       └─evaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #>  17.                         └─evaluate:::evaluate_call(...) #>  18.                           ├─evaluate (local) timing_fn(...) #>  19.                           ├─evaluate (local) handle(...) #>  20.                           │ └─base::try(f, silent = TRUE) #>  21.                           │   └─base::tryCatch(...) #>  22.                           │     └─base (local) tryCatchList(expr, classes, parentenv, handlers) #>  23.                           │       └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  24.                           │         └─base (local) doTryCatch(return(expr), name, parentenv, handler) #>  25.                           ├─base::withCallingHandlers(...) #>  26.                           ├─base::withVisible(...) #>  27.                           └─evaluate:::eval_with_user_handlers(expr, envir, enclos, user_handlers) #>  28.                             └─base::eval(expr, envir, enclos) #>  29.                               └─base::eval(expr, envir, enclos) #>  30.                                 ├─testthat::expect_error(exclusion_plt(test_rec)) #>  31.                                 │ └─testthat:::expect_condition_matching(...) #>  32.                                 │   └─testthat:::quasi_capture(...) #>  33.                                 │     ├─testthat (local) .capture(...) #>  34.                                 │     │ └─base::withCallingHandlers(...) #>  35.                                 │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo)) #>  36.                                 ├─dar::exclusion_plt(test_rec) #>  37.                                 └─dar::exclusion_plt(test_rec)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/export_steps.html","id":null,"dir":"Reference","previous_headings":"","what":"Export step parameters as json. — export_steps","title":"Export step parameters as json. — export_steps","text":"Export step parameters json.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/export_steps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export step parameters as json. — export_steps","text":"","code":"export_steps(rec, file_name)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/export_steps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export step parameters as json. — export_steps","text":"rec recipe object. file_name path file name optout file.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/export_steps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export step parameters as json. — export_steps","text":"invisible","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/export_steps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export step parameters as json. — export_steps","text":"","code":"data(metaHIV_phy)  ## Create a recipe with steps rec <-    recipe(metaHIV_phy, \"RiskGroup2\", \"Species\") %>%    step_subset_taxa(expr = 'Kingdom %in% c(\"Bacteria\", \"Archaea\")') %>%   step_filter_taxa(.f = \"function(x) sum(x > 0) >= (0.3 * length(x))\") %>%   step_maaslin()   ## Prep recipe    rec <- prep(rec, parallel = TRUE)  ## Export to json file export_steps(rec, tempfile(fileext = \".json\"))"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/find_intersections.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds common OTU between method results — find_intersections","title":"Finds common OTU between method results — find_intersections","text":"Finds common OTU method results","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/find_intersections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds common OTU between method results — find_intersections","text":"","code":"find_intersections(rec, steps = steps_ids(rec, \"da\"))"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/find_intersections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds common OTU between method results — find_intersections","text":"rec recipe object. steps character vector step ids take account","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/find_intersections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finds common OTU between method results — find_intersections","text":"tibble","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/find_intersections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finds common OTU between method results — find_intersections","text":"","code":"data(test_prep_rec)  ## From a prep-recipe we can extract a tibble with all intersections intersections <- find_intersections(test_prep_rec) intersections #> # A tibble: 88 × 4 #>    taxa_id taxa            step_ids                                  sum_methods #>    <chr>   <chr>           <chr>                                           <dbl> #>  1 Otu_34  Olsenella       maaslin__Coussin_de_Lyon, metagenomeseq_…           3 #>  2 Otu_35  Collinsella     maaslin__Coussin_de_Lyon, metagenomeseq_…           3 #>  3 Otu_45  Slackia         maaslin__Coussin_de_Lyon, metagenomeseq_…           3 #>  4 Otu_78  Bacteroides     maaslin__Coussin_de_Lyon, metagenomeseq_…           3 #>  5 Otu_82  Barnesiella     maaslin__Coussin_de_Lyon, metagenomeseq_…           3 #>  6 Otu_88  Odoribacter     maaslin__Coussin_de_Lyon, metagenomeseq_…           3 #>  7 Otu_94  Paraprevotella  maaslin__Coussin_de_Lyon, metagenomeseq_…           3 #>  8 Otu_96  Prevotella      maaslin__Coussin_de_Lyon, metagenomeseq_…           3 #>  9 Otu_119 Alistipes       maaslin__Coussin_de_Lyon, metagenomeseq_…           3 #> 10 Otu_125 Parabacteroides maaslin__Coussin_de_Lyon, metagenomeseq_…           3 #> # ℹ 78 more rows  ## Additionally, we can exclude some methods form the table intersections <- find_intersections(   test_prep_rec,    steps = steps_ids(test_prep_rec, \"da\")[-1] )  intersections #> # A tibble: 36 × 4 #>    taxa_id taxa            step_ids                                sum_methods #>    <chr>   <chr>           <chr>                                         <dbl> #>  1 Otu_34  Olsenella       metagenomeseq__Nazook, deseq__Pan_dulce           2 #>  2 Otu_35  Collinsella     metagenomeseq__Nazook, deseq__Pan_dulce           2 #>  3 Otu_45  Slackia         metagenomeseq__Nazook, deseq__Pan_dulce           2 #>  4 Otu_78  Bacteroides     metagenomeseq__Nazook, deseq__Pan_dulce           2 #>  5 Otu_82  Barnesiella     metagenomeseq__Nazook, deseq__Pan_dulce           2 #>  6 Otu_88  Odoribacter     metagenomeseq__Nazook, deseq__Pan_dulce           2 #>  7 Otu_94  Paraprevotella  metagenomeseq__Nazook, deseq__Pan_dulce           2 #>  8 Otu_96  Prevotella      metagenomeseq__Nazook, deseq__Pan_dulce           2 #>  9 Otu_119 Alistipes       metagenomeseq__Nazook, deseq__Pan_dulce           2 #> 10 Otu_125 Parabacteroides metagenomeseq__Nazook, deseq__Pan_dulce           2 #> # ℹ 26 more rows"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/get_comparisons.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate all unique contrasts between levels of a categorical variable. — get_comparisons","title":"Generate all unique contrasts between levels of a categorical variable. — get_comparisons","text":"Generate unique contrasts levels categorical variable.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/get_comparisons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate all unique contrasts between levels of a categorical variable. — get_comparisons","text":"","code":"get_comparisons(var, phy, as_list = TRUE, n_cut = 1)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/get_comparisons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate all unique contrasts between levels of a categorical variable. — get_comparisons","text":"var categorical variable phy phyloseq object as_list boolean indicating output must returned list. n_cut minimum observations level.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/get_comparisons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate all unique contrasts between levels of a categorical variable. — get_comparisons","text":"tibble list","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/get_comparisons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate all unique contrasts between levels of a categorical variable. — get_comparisons","text":"","code":"data(test_rec) get_phy(test_rec) %>%    dar:::get_comparisons(\"RiskGroup2\", .) #> [[1]] #> [1] \"hts\" \"msm\" #>  #> [[2]] #> [1] \"hts\"  \"pwid\" #>  #> [[3]] #> [1] \"msm\"  \"pwid\" #>"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/get_phy.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns phyloseq from recipe-class object — get_phy","title":"Returns phyloseq from recipe-class object — get_phy","text":"Returns phyloseq recipe-class object","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/get_phy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns phyloseq from recipe-class object — get_phy","text":"","code":"get_phy(rec)  # S4 method for recipe get_phy(rec)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/get_phy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns phyloseq from recipe-class object — get_phy","text":"rec recipe object","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/get_phy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns phyloseq from recipe-class object — get_phy","text":"Phyloseq class object","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/get_phy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns phyloseq from recipe-class object — get_phy","text":"","code":"data(metaHIV_phy)  ## Define recipe rec <-   recipe(metaHIV_phy, var_info = \"RiskGroup2\", tax_info = \"Species\")  ## Extract phyloseq object get_phy(rec) #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 451 taxa and 156 samples ] #> sample_data() Sample Data:       [ 156 samples by 3 sample variables ] #> tax_table()   Taxonomy Table:    [ 451 taxa by 7 taxonomic ranks ]"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/get_tax.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns tax_info from recipe-class object — get_tax","title":"Returns tax_info from recipe-class object — get_tax","text":"Returns tax_info recipe-class object","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/get_tax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns tax_info from recipe-class object — get_tax","text":"","code":"get_tax(rec)  # S4 method for recipe get_tax(rec)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/get_tax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns tax_info from recipe-class object — get_tax","text":"rec recipe object","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/get_tax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns tax_info from recipe-class object — get_tax","text":"Tibble containing tax_info.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/get_tax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns tax_info from recipe-class object — get_tax","text":"","code":"data(metaHIV_phy)  ## Define recipe rec <-   recipe(metaHIV_phy, var_info = \"RiskGroup2\", tax_info = \"Species\")  ## Extract taxonomic level get_tax(rec) #> # A tibble: 1 × 1 #>   tax_lev #>   <chr>   #> 1 Species"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/get_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns var_info from recipe-class object — get_var","title":"Returns var_info from recipe-class object — get_var","text":"Returns var_info recipe-class object","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/get_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns var_info from recipe-class object — get_var","text":"","code":"get_var(rec)  # S4 method for recipe get_var(rec)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/get_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns var_info from recipe-class object — get_var","text":"rec recipe object","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/get_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns var_info from recipe-class object — get_var","text":"Tibble containing var_info.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/get_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns var_info from recipe-class object — get_var","text":"","code":"data(metaHIV_phy)  ## Define recipe rec <-   recipe(metaHIV_phy, var_info = \"RiskGroup2\", tax_info = \"Species\")  ## Extract variable of interest get_var(rec) #> # A tibble: 1 × 1 #>   vars       #>   <chr>      #> 1 RiskGroup2"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/import_steps.html","id":null,"dir":"Reference","previous_headings":"","what":"Import steps from json file — import_steps","title":"Import steps from json file — import_steps","text":"Import steps json file","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/import_steps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import steps from json file — import_steps","text":"","code":"import_steps(rec, file, parallel = TRUE, workers = 8)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/import_steps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import steps from json file — import_steps","text":"rec recipe object. file Path input file. parallel FALSE, palatalization. TRUE, parallel execution using future furrr packages. workers Number workers palatalization.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/import_steps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import steps from json file — import_steps","text":"recipe-class object","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/import_steps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import steps from json file — import_steps","text":"","code":"data(metaHIV_phy)  ## Initialize the recipe with a phyloseq object rec <- recipe(metaHIV_phy, \"RiskGroup2\", \"Species\") rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #>   ## Import steps json_file <- system.file(\"extdata\", \"test.json\", package = \"dar\") rec <- import_steps(rec, json_file) rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Preporcessing steps: #>  #>      ◉ step_subset_taxa() id = subset_taxa__Jalebi  #>      ◉ step_filter_taxa() id = filter_taxa__Palmier  #>  #> DA steps: #>  #>      ◉ step_maaslin() id = maaslin__Coussin_de_Lyon  #>      ◉ step_metagenomeseq() id = metagenomeseq__Nazook  #>      ◉ step_deseq() id = deseq__Pan_dulce   ## If the json file contains 'bake', the recipe is automatically prepared.  json_file <- system.file(\"extdata\", \"test_bake.json\", package = \"dar\") rec <- recipe(metaHIV_phy, \"RiskGroup2\", \"Species\") %>%    import_steps(json_file) #> ! bakes found in imported recipe #> ℹ running prep()    rec #> ── DAR Results ───────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 101 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Results: #>  #>      ✔ maaslin__Coussin_de_Lyon diff_taxa = 86  #>      ✔ metagenomeseq__Nazook diff_taxa = 69  #>      ✔ deseq__Pan_dulce diff_taxa = 53  #>  #>      ℹ 46 taxa are present in all tested methods  #>  #> Bakes: #>  #>      ◉ 1 -> count_cutoff: NULL, weights: NULL, exclude: NULL, id: bake__Prekmurska_gibanica  cool(rec) #> ℹ Bake for count_cutoff = 3 #> # A tibble: 46 × 2 #>    taxa_id taxa                         #>    <chr>   <chr>                        #>  1 Otu_96  Prevotella_copri             #>  2 Otu_102 Prevotella_sp_AM42_24        #>  3 Otu_340 Holdemanella_biformis        #>  4 Otu_332 Catenibacterium_mitsuokai    #>  5 Otu_108 Prevotella_sp_CAG_520        #>  6 Otu_115 Alistipes_finegoldii         #>  7 Otu_119 Alistipes_putredinis         #>  8 Otu_45  Slackia_isoflavoniconvertens #>  9 Otu_82  Barnesiella_intestinihominis #> 10 Otu_113 Prevotella_stercorea         #> # ℹ 36 more rows"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/intersection_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns data.frame with OTU intersection between methods — intersection_df","title":"Returns data.frame with OTU intersection between methods — intersection_df","text":"Returns data.frame OTU intersection methods","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/intersection_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns data.frame with OTU intersection between methods — intersection_df","text":"","code":"intersection_df(rec, steps = steps_ids(rec, \"da\"), tidy = FALSE)  # S4 method for recipe intersection_df(rec, steps = steps_ids(rec, \"da\"), tidy = FALSE)  # S4 method for prep_recipe intersection_df(rec, steps = steps_ids(rec, \"da\"), tidy = FALSE)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/intersection_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns data.frame with OTU intersection between methods — intersection_df","text":"rec recipe object. steps character vector step_ids take account. tidy Boolan indicating result must tidy format.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/intersection_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns data.frame with OTU intersection between methods — intersection_df","text":"data.frame class object","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/intersection_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns data.frame with OTU intersection between methods — intersection_df","text":"","code":"data(test_prep_rec)  df <- intersection_df(test_prep_rec) head(df) #>   taxa_id maaslin__Coussin_de_Lyon metagenomeseq__Nazook deseq__Pan_dulce #> 1   Otu_1                        1                     0                0 #> 2  Otu_10                        1                     0                0 #> 3  Otu_18                        1                     0                0 #> 4  Otu_34                        1                     1                1 #> 5  Otu_35                        1                     1                1 #> 6  Otu_37                        1                     0                0  ## intersection_df function needs a prep-recipe. If you pass a a non-prep ## recipe the output is an error. data(test_rec) err <- testthat::expect_error(intersection_df(test_rec)) err #> <error/rlang_error> #> Error in `intersection_df()`: #> ! This function needs a prep recipe! #> • Run prep(rec) and then retry last command. #> --- #> Backtrace: #>      ▆ #>   1. └─pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE) #>   2.   └─pkgdown::build_site(...) #>   3.     └─pkgdown:::build_site_local(...) #>   4.       └─pkgdown::build_reference(...) #>   5.         └─purrr::map(...) #>   6.           └─purrr:::map_(\"list\", .x, .f, ..., .progress = .progress) #>   7.             ├─purrr:::with_indexed_errors(...) #>   8.             │ └─base::withCallingHandlers(...) #>   9.             ├─purrr:::call_with_cleanup(...) #>  10.             └─pkgdown (local) .f(.x[[i]], ...) #>  11.               ├─base::withCallingHandlers(...) #>  12.               └─pkgdown:::data_reference_topic(...) #>  13.                 └─pkgdown:::run_examples(...) #>  14.                   └─pkgdown:::highlight_examples(code, topic, env = env) #>  15.                     └─downlit::evaluate_and_highlight(...) #>  16.                       └─evaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #>  17.                         └─evaluate:::evaluate_call(...) #>  18.                           ├─evaluate (local) timing_fn(...) #>  19.                           ├─evaluate (local) handle(...) #>  20.                           │ └─base::try(f, silent = TRUE) #>  21.                           │   └─base::tryCatch(...) #>  22.                           │     └─base (local) tryCatchList(expr, classes, parentenv, handlers) #>  23.                           │       └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  24.                           │         └─base (local) doTryCatch(return(expr), name, parentenv, handler) #>  25.                           ├─base::withCallingHandlers(...) #>  26.                           ├─base::withVisible(...) #>  27.                           └─evaluate:::eval_with_user_handlers(expr, envir, enclos, user_handlers) #>  28.                             └─base::eval(expr, envir, enclos) #>  29.                               └─base::eval(expr, envir, enclos) #>  30.                                 ├─testthat::expect_error(intersection_df(test_rec)) #>  31.                                 │ └─testthat:::expect_condition_matching(...) #>  32.                                 │   └─testthat:::quasi_capture(...) #>  33.                                 │     ├─testthat (local) .capture(...) #>  34.                                 │     │ └─base::withCallingHandlers(...) #>  35.                                 │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo)) #>  36.                                 ├─dar::intersection_df(test_rec) #>  37.                                 └─dar::intersection_df(test_rec)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/intersection_plt.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot results using UpSet plot — intersection_plt","title":"Plot results using UpSet plot — intersection_plt","text":"Plot results using UpSet plot","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/intersection_plt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot results using UpSet plot — intersection_plt","text":"","code":"intersection_plt(   rec,   steps = steps_ids(rec, \"da\"),   ordered_by = c(\"freq\", \"degree\"),   font_size = 2 )  # S4 method for recipe intersection_plt(rec, steps, font_size)  # S4 method for prep_recipe intersection_plt(   rec,   steps = steps_ids(rec, \"da\"),   ordered_by = c(\"freq\", \"degree\"),   font_size = 2 )"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/intersection_plt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot results using UpSet plot — intersection_plt","text":"rec recipe object. steps Character vector step_ids take account. ordered_by intersections matrix ordered . Options include frequency (entered \"freq\"), degree, order. font_size Size font.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/intersection_plt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot results using UpSet plot — intersection_plt","text":"UpSet plot","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/intersection_plt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot results using UpSet plot — intersection_plt","text":"","code":"data(test_prep_rec)  ## Running the function returns a UpSet plot ordered by frequency. intersection_plt(test_prep_rec)   ## Alternatively, you can order the plot by degree intersection_plt(test_prep_rec, ordered_by = \"degree\")   ## If you want to exclude a method for the plot, you can remove it with the ## step parameter. In the following example we eliminate from the graph the ## results of maaslin intersection_plt(test_prep_rec, steps = steps_ids(test_prep_rec, \"da\")[-1])   ## intersection_plt function needs a prep-recipe. If you pass a a non-prep ## recipe the output is an error. data(test_rec) err <- testthat::expect_error(intersection_plt(test_rec)) err #> <error/rlang_error> #> Error in `.local()`: #> ! This function needs a prep recipe! #> • Run prep(rec) and then try with intersection_plt() #> --- #> Backtrace: #>      ▆ #>   1. └─pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE) #>   2.   └─pkgdown::build_site(...) #>   3.     └─pkgdown:::build_site_local(...) #>   4.       └─pkgdown::build_reference(...) #>   5.         └─purrr::map(...) #>   6.           └─purrr:::map_(\"list\", .x, .f, ..., .progress = .progress) #>   7.             ├─purrr:::with_indexed_errors(...) #>   8.             │ └─base::withCallingHandlers(...) #>   9.             ├─purrr:::call_with_cleanup(...) #>  10.             └─pkgdown (local) .f(.x[[i]], ...) #>  11.               ├─base::withCallingHandlers(...) #>  12.               └─pkgdown:::data_reference_topic(...) #>  13.                 └─pkgdown:::run_examples(...) #>  14.                   └─pkgdown:::highlight_examples(code, topic, env = env) #>  15.                     └─downlit::evaluate_and_highlight(...) #>  16.                       └─evaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #>  17.                         └─evaluate:::evaluate_call(...) #>  18.                           ├─evaluate (local) timing_fn(...) #>  19.                           ├─evaluate (local) handle(...) #>  20.                           │ └─base::try(f, silent = TRUE) #>  21.                           │   └─base::tryCatch(...) #>  22.                           │     └─base (local) tryCatchList(expr, classes, parentenv, handlers) #>  23.                           │       └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  24.                           │         └─base (local) doTryCatch(return(expr), name, parentenv, handler) #>  25.                           ├─base::withCallingHandlers(...) #>  26.                           ├─base::withVisible(...) #>  27.                           └─evaluate:::eval_with_user_handlers(expr, envir, enclos, user_handlers) #>  28.                             └─base::eval(expr, envir, enclos) #>  29.                               └─base::eval(expr, envir, enclos) #>  30.                                 ├─testthat::expect_error(intersection_plt(test_rec)) #>  31.                                 │ └─testthat:::expect_condition_matching(...) #>  32.                                 │   └─testthat:::quasi_capture(...) #>  33.                                 │     ├─testthat (local) .capture(...) #>  34.                                 │     │ └─base::withCallingHandlers(...) #>  35.                                 │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo)) #>  36.                                 ├─dar::intersection_plt(test_rec) #>  37.                                 └─dar::intersection_plt(test_rec) #>  38.                                   └─dar (local) .local(rec, steps, font_size)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/mutual_plt.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutual finding plot — mutual_plt","title":"Mutual finding plot — mutual_plt","text":"Plots number differentially abundant features mutually found defined number methods, colored differential abundance direction separated comparison.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/mutual_plt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutual finding plot — mutual_plt","text":"","code":"mutual_plt(   rec,   count_cutoff = NULL,   comparisons = NULL,   steps = steps_ids(rec, type = \"da\"),   top_n = 20 )  # S4 method for recipe mutual_plt(   rec,   count_cutoff = NULL,   comparisons = NULL,   steps = steps_ids(rec, type = \"da\"),   top_n = 20 )  # S4 method for prep_recipe mutual_plt(   rec,   count_cutoff = NULL,   comparisons = NULL,   steps = steps_ids(rec, type = \"da\"),   top_n = 20 )"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/mutual_plt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutual finding plot — mutual_plt","text":"rec recipe recipe step. count_cutoff Indicates minimum number methods OTU must present (Default: NULL). count_cutoff NULL count_cutoff equal length(steps_ids(rec, \"da\")) * 2 / 3. comparisons default, function plots comparisons. However, user indicates comparison comparisons interest, selected ones plotted. steps Character vector step_ids take account. Default \"da\" methods. top_n Maximum number taxa represent. Default: 20.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/mutual_plt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mutual finding plot — mutual_plt","text":"ggplot2","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/mutual_plt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mutual finding plot — mutual_plt","text":"","code":"data(test_prep_rec)  ## Running the function returns a tile plot, mutual_plt(test_prep_rec) #> ℹ count_cutoff set to 2 #> ! Taxa present in all methods are greater than the cutoff top_n = 20 #> ℹ The top 20 significant taxa with the greatest overlap between methods will be used   ## The count_cutoff indicates the minimum number of methods in which an OTU ## must be present. By default the value is equal to ## length(steps_ids(rec, \"da\")) * 2 / 3 but it is customizable. mutual_plt(test_prep_rec, count_cutoff = length(steps_ids(test_prep_rec,  \"da\"))) #> ! Taxa present in all methods are greater than the cutoff top_n = 20 #> ℹ The top 20 significant taxa with the greatest overlap between methods will be used   ## A single comparisons can be plotted through the comparison parameter. mutual_plt(test_prep_rec, comparisons = c(\"hts_msm\")) #> ℹ count_cutoff set to 2 #> ! Taxa present in all methods are greater than the cutoff top_n = 20 #> ℹ The top 20 significant taxa with the greatest overlap between methods will be used   ## If you want to exclude a method for the plot, you can remove it with the ## step parameter. In the following example we eliminate from the graph the ## results of maaslin. mutual_plt(test_prep_rec, steps = steps_ids(test_prep_rec, \"da\")[-1]) #> ℹ count_cutoff set to 1 #> ! Taxa present in all methods are greater than the cutoff top_n = 20 #> ℹ The top 20 significant taxa with the greatest overlap between methods will be used   ## mutual_plt function needs a prep-recipe. If you pass a a non-prep recipe ## the output is an error. data(test_rec) err <- testthat::expect_error(mutual_plt(test_rec)) err #> <error/rlang_error> #> Error in `mutual_plt()`: #> ! This function needs a prep recipe! #> • Run prep(rec) and then try with mutual_plt() #> --- #> Backtrace: #>      ▆ #>   1. └─pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE) #>   2.   └─pkgdown::build_site(...) #>   3.     └─pkgdown:::build_site_local(...) #>   4.       └─pkgdown::build_reference(...) #>   5.         └─purrr::map(...) #>   6.           └─purrr:::map_(\"list\", .x, .f, ..., .progress = .progress) #>   7.             ├─purrr:::with_indexed_errors(...) #>   8.             │ └─base::withCallingHandlers(...) #>   9.             ├─purrr:::call_with_cleanup(...) #>  10.             └─pkgdown (local) .f(.x[[i]], ...) #>  11.               ├─base::withCallingHandlers(...) #>  12.               └─pkgdown:::data_reference_topic(...) #>  13.                 └─pkgdown:::run_examples(...) #>  14.                   └─pkgdown:::highlight_examples(code, topic, env = env) #>  15.                     └─downlit::evaluate_and_highlight(...) #>  16.                       └─evaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #>  17.                         └─evaluate:::evaluate_call(...) #>  18.                           ├─evaluate (local) timing_fn(...) #>  19.                           ├─evaluate (local) handle(...) #>  20.                           │ └─base::try(f, silent = TRUE) #>  21.                           │   └─base::tryCatch(...) #>  22.                           │     └─base (local) tryCatchList(expr, classes, parentenv, handlers) #>  23.                           │       └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  24.                           │         └─base (local) doTryCatch(return(expr), name, parentenv, handler) #>  25.                           ├─base::withCallingHandlers(...) #>  26.                           ├─base::withVisible(...) #>  27.                           └─evaluate:::eval_with_user_handlers(expr, envir, enclos, user_handlers) #>  28.                             └─base::eval(expr, envir, enclos) #>  29.                               └─base::eval(expr, envir, enclos) #>  30.                                 ├─testthat::expect_error(mutual_plt(test_rec)) #>  31.                                 │ └─testthat:::expect_condition_matching(...) #>  32.                                 │   └─testthat:::quasi_capture(...) #>  33.                                 │     ├─testthat (local) .capture(...) #>  34.                                 │     │ └─base::withCallingHandlers(...) #>  35.                                 │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo)) #>  36.                                 ├─dar::mutual_plt(test_rec) #>  37.                                 └─dar::mutual_plt(test_rec)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/otu_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts otu_table from phyloseq inside a recipe — otu_table","title":"Extracts otu_table from phyloseq inside a recipe — otu_table","text":"Extracts otu_table phyloseq inside recipe","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/otu_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts otu_table from phyloseq inside a recipe — otu_table","text":"","code":"otu_table(rec)  # S4 method for recipe otu_table(rec)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/otu_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts otu_table from phyloseq inside a recipe — otu_table","text":"rec recipe recipe step.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/otu_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts otu_table from phyloseq inside a recipe — otu_table","text":"tibble","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/otu_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts otu_table from phyloseq inside a recipe — otu_table","text":"","code":"data(metaHIV_phy)  ## Define recipe rec <-   recipe(metaHIV_phy, var_info = \"RiskGroup2\", tax_info = \"Species\")  ## Extract otu_table from phyloseq object otu_table(rec) #> # A tibble: 451 × 157 #>    taxa_id Sample_186 Sample_185 Sample_184 Sample_182 Sample_181 Sample_170 #>    <chr>        <dbl>      <dbl>      <dbl>      <dbl>      <dbl>      <dbl> #>  1 Otu_1         2538          0       9026      12049      22126      15374 #>  2 Otu_2            0          0          0        609       2543        988 #>  3 Otu_3            0          0          0          0          0          0 #>  4 Otu_4            0          0          0          0          0          0 #>  5 Otu_5            0          0          0          0          0          0 #>  6 Otu_6            0          0          0          0          0          0 #>  7 Otu_7            0          0          0          0          0          0 #>  8 Otu_8            0          0          0          0          0          0 #>  9 Otu_9            0          0          0          0          0        351 #> 10 Otu_10           0          0      10575      10764        504          0 #> # ℹ 441 more rows #> # ℹ 150 more variables: Sample_169 <dbl>, Sample_168 <dbl>, Sample_167 <dbl>, #> #   Sample_166 <dbl>, Sample_165 <dbl>, Sample_164 <dbl>, Sample_163 <dbl>, #> #   Sample_162 <dbl>, Sample_160 <dbl>, Sample_159 <dbl>, Sample_158 <dbl>, #> #   Sample_157 <dbl>, Sample_156 <dbl>, Sample_155 <dbl>, Sample_153 <dbl>, #> #   Sample_152 <dbl>, Sample_151 <dbl>, Sample_150 <dbl>, Sample_149 <dbl>, #> #   Sample_148 <dbl>, Sample_147 <dbl>, Sample_146 <dbl>, Sample_145 <dbl>, …"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/overlap_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Overlap of significant OTUs between tested methods. — overlap_df","title":"Overlap of significant OTUs between tested methods. — overlap_df","text":"Overlap significant OTUs tested methods.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/overlap_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Overlap of significant OTUs between tested methods. — overlap_df","text":"","code":"overlap_df(rec, steps = steps_ids(rec, \"da\"), type = \"all\")  # S4 method for recipe overlap_df(rec, steps = steps_ids(rec, \"da\"), type = \"all\")  # S4 method for prep_recipe overlap_df(rec, steps = steps_ids(rec, \"da\"), type = \"all\")"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/overlap_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Overlap of significant OTUs between tested methods. — overlap_df","text":"rec recipe object. steps Character vector step_ids take account. type Indicates whether use taxa (\"\") differentially abundant least one method (\"da\"). Default \"\".","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/overlap_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Overlap of significant OTUs between tested methods. — overlap_df","text":"df","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/overlap_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Overlap of significant OTUs between tested methods. — overlap_df","text":"","code":"data(test_prep_rec)  ## Running the function returns a UpSet plot ordered by frequency. df <- overlap_df(test_prep_rec, steps_ids(test_prep_rec, \"da\")) head(df) #>                          maaslin__Coussin_de_Lyon metagenomeseq__Nazook #> maaslin__Coussin_de_Lyon                1.0000000             0.4257426 #> metagenomeseq__Nazook                   0.4257426             1.0000000 #> deseq__Pan_dulce                        0.4158416             0.8712871 #>                          deseq__Pan_dulce #> maaslin__Coussin_de_Lyon        0.4158416 #> metagenomeseq__Nazook           0.8712871 #> deseq__Pan_dulce                1.0000000  ## If you want to exclude a method for the plot, you can remove it with the ## step parameter. In the following example we eliminate from the graph the ## results of maaslin overlap_df(test_prep_rec, steps = steps_ids(test_prep_rec, \"da\")[-1]) #>                       metagenomeseq__Nazook deseq__Pan_dulce #> metagenomeseq__Nazook             1.0000000        0.8712871 #> deseq__Pan_dulce                  0.8712871        1.0000000  ## overlap_df function needs a prep-recipe. If you pass a a non-prep ## recipe the output is an error. data(test_rec) err <- testthat::expect_error(overlap_df(test_rec)) err #> <error/rlang_error> #> Error in `overlap_df()`: #> ! This function needs a prep recipe! #> • Run prep(rec) and then try with overlap_df() #> --- #> Backtrace: #>      ▆ #>   1. └─pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE) #>   2.   └─pkgdown::build_site(...) #>   3.     └─pkgdown:::build_site_local(...) #>   4.       └─pkgdown::build_reference(...) #>   5.         └─purrr::map(...) #>   6.           └─purrr:::map_(\"list\", .x, .f, ..., .progress = .progress) #>   7.             ├─purrr:::with_indexed_errors(...) #>   8.             │ └─base::withCallingHandlers(...) #>   9.             ├─purrr:::call_with_cleanup(...) #>  10.             └─pkgdown (local) .f(.x[[i]], ...) #>  11.               ├─base::withCallingHandlers(...) #>  12.               └─pkgdown:::data_reference_topic(...) #>  13.                 └─pkgdown:::run_examples(...) #>  14.                   └─pkgdown:::highlight_examples(code, topic, env = env) #>  15.                     └─downlit::evaluate_and_highlight(...) #>  16.                       └─evaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #>  17.                         └─evaluate:::evaluate_call(...) #>  18.                           ├─evaluate (local) timing_fn(...) #>  19.                           ├─evaluate (local) handle(...) #>  20.                           │ └─base::try(f, silent = TRUE) #>  21.                           │   └─base::tryCatch(...) #>  22.                           │     └─base (local) tryCatchList(expr, classes, parentenv, handlers) #>  23.                           │       └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  24.                           │         └─base (local) doTryCatch(return(expr), name, parentenv, handler) #>  25.                           ├─base::withCallingHandlers(...) #>  26.                           ├─base::withVisible(...) #>  27.                           └─evaluate:::eval_with_user_handlers(expr, envir, enclos, user_handlers) #>  28.                             └─base::eval(expr, envir, enclos) #>  29.                               └─base::eval(expr, envir, enclos) #>  30.                                 ├─testthat::expect_error(overlap_df(test_rec)) #>  31.                                 │ └─testthat:::expect_condition_matching(...) #>  32.                                 │   └─testthat:::quasi_capture(...) #>  33.                                 │     ├─testthat (local) .capture(...) #>  34.                                 │     │ └─base::withCallingHandlers(...) #>  35.                                 │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo)) #>  36.                                 ├─dar::overlap_df(test_rec) #>  37.                                 └─dar::overlap_df(test_rec)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/phy_qc.html","id":null,"dir":"Reference","previous_headings":"","what":"Phyloseq Quality Control Metrics — phy_qc","title":"Phyloseq Quality Control Metrics — phy_qc","text":"phy_qc() returns tibble. information important metrics sparsity count matrix. content table follows: var_levels: levels categorical variable interest. \"\" refers rows dataset (without splitting categorical levels). n: total number values count matrix. n_zero: number zeros count matrix. pct_zero: percentage zeros count matrix. pct_all_zero: percentage taxa zero counts samples. pct_singletons: percentage taxa counts single sample. pct_doubletons: percentage taxa counts two samples. count_mean: average mean counts per sample. count_min: average min counts per sample. count_max: average max counts per sample.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/phy_qc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Phyloseq Quality Control Metrics — phy_qc","text":"","code":"phy_qc(rec)  # S4 method for recipe phy_qc(rec)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/phy_qc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Phyloseq Quality Control Metrics — phy_qc","text":"rec recipe recipe step.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/phy_qc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Phyloseq Quality Control Metrics — phy_qc","text":"tibble","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/phy_qc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Phyloseq Quality Control Metrics — phy_qc","text":"","code":"data(metaHIV_phy)  ## Define recipe rec <- recipe(metaHIV_phy, var_info = \"RiskGroup2\", tax_info = \"Species\")  phy_qc(rec) #> # A tibble: 4 × 10 #>   var_levels     n n_zero pct_zero pct_all_zero pct_singletons pct_doubletons #>   <chr>      <int>  <int>    <dbl>        <dbl>          <dbl>          <dbl> #> 1 all        70356  57632     81.9          0             20.6           8.87 #> 2 hts        18491  15108     81.7         24.2           22.8           8.43 #> 3 msm        45100  37019     82.1         16.0           20.2           9.53 #> 4 pwid        6765   5505     81.4         41.2           16.6           9.31 #> # ℹ 3 more variables: count_mean <dbl>, count_min <dbl>, count_max <dbl>"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/pipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipe operator — %>%","text":"","code":"# Basic use: iris %>% head #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa  # Use with lhs as first argument iris %>% head(10) #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1           5.1         3.5          1.4         0.2  setosa #> 2           4.9         3.0          1.4         0.2  setosa #> 3           4.7         3.2          1.3         0.2  setosa #> 4           4.6         3.1          1.5         0.2  setosa #> 5           5.0         3.6          1.4         0.2  setosa #> 6           5.4         3.9          1.7         0.4  setosa #> 7           4.6         3.4          1.4         0.3  setosa #> 8           5.0         3.4          1.5         0.2  setosa #> 9           4.4         2.9          1.4         0.2  setosa #> 10          4.9         3.1          1.5         0.1  setosa  # Using the dot place-holder \"Ceci n'est pas une pipe\" %>% gsub(\"une\", \"un\", .) #> [1] \"Ceci n'est pas un pipe\"  # When dot is nested, lhs is still placed first: sample(1:10) %>% paste0(LETTERS[.]) #>  [1] \"2B\"  \"7G\"  \"10J\" \"5E\"  \"4D\"  \"3C\"  \"1A\"  \"6F\"  \"9I\"  \"8H\"   # This can be avoided: rnorm(100) %>% {c(min(.), mean(.), max(.))} %>% floor #> [1] -2  0  2  # Lambda expressions: iris %>%    {      size <- sample(1:10, size = 1)      rbind(head(., size), tail(., size))    } #>     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species #> 1            5.1         3.5          1.4         0.2    setosa #> 2            4.9         3.0          1.4         0.2    setosa #> 3            4.7         3.2          1.3         0.2    setosa #> 4            4.6         3.1          1.5         0.2    setosa #> 5            5.0         3.6          1.4         0.2    setosa #> 6            5.4         3.9          1.7         0.4    setosa #> 7            4.6         3.4          1.4         0.3    setosa #> 8            5.0         3.4          1.5         0.2    setosa #> 143          5.8         2.7          5.1         1.9 virginica #> 144          6.8         3.2          5.9         2.3 virginica #> 145          6.7         3.3          5.7         2.5 virginica #> 146          6.7         3.0          5.2         2.3 virginica #> 147          6.3         2.5          5.0         1.9 virginica #> 148          6.5         3.0          5.2         2.0 virginica #> 149          6.2         3.4          5.4         2.3 virginica #> 150          5.9         3.0          5.1         1.8 virginica    # renaming in lambdas: iris %>%   {     my_data <- .     size <- sample(1:10, size = 1)     rbind(head(my_data, size), tail(my_data, size))   } #>     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species #> 1            5.1         3.5          1.4         0.2    setosa #> 2            4.9         3.0          1.4         0.2    setosa #> 3            4.7         3.2          1.3         0.2    setosa #> 4            4.6         3.1          1.5         0.2    setosa #> 5            5.0         3.6          1.4         0.2    setosa #> 146          6.7         3.0          5.2         2.3 virginica #> 147          6.3         2.5          5.0         1.9 virginica #> 148          6.5         3.0          5.2         2.0 virginica #> 149          6.2         3.4          5.4         2.3 virginica #> 150          5.9         3.0          5.1         1.8 virginica    # Building unary functions with %>% trig_fest <- . %>% tan %>% cos %>% sin  1:10 %>% trig_fest #>  [1]  0.0133878 -0.5449592  0.8359477  0.3906486 -0.8257855  0.8180174 #>  [7]  0.6001744  0.7640323  0.7829771  0.7153150  trig_fest(1:10) #>  [1]  0.0133878 -0.5449592  0.8359477  0.3906486 -0.8257855  0.8180174 #>  [7]  0.6001744  0.7640323  0.7829771  0.7153150"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/prep.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs all the steps defined in a recipe — prep","title":"Performs all the steps defined in a recipe — prep","text":"recipe least one preprocessing DA operation run steps convenient order.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs all the steps defined in a recipe — prep","text":"","code":"prep(rec, parallel = TRUE, workers = 8, force = FALSE)  # S4 method for recipe prep(rec, parallel = TRUE, workers = 8, force = FALSE)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs all the steps defined in a recipe — prep","text":"rec recipe object. furrr packages. parallel FALSE, palatalization. TRUE, parallel execution using future furrr packages. workers Number workers palatalization. force Force reexecution steps. remove previous results.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs all the steps defined in a recipe — prep","text":"prep_recipe object.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/prep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs all the steps defined in a recipe — prep","text":"","code":"data(metaHIV_phy)  ## Define recipe rec <-   recipe(metaHIV_phy, var_info = \"RiskGroup2\", tax_info = \"Species\") %>%   step_subset_taxa(expr = 'Kingdom %in% c(\"Bacteria\", \"Archaea\")') %>%   step_filter_taxa(.f = \"function(x) sum(x > 0) >= (0.03 * length(x))\") %>%   step_maaslin()  ## Prep recipe da_results <- prep(rec)  ## If you try  ## Consensus strategy n_methods <- 2 da_results <- bake(da_results, count_cutoff = n_methods) da_results #> ── DAR Results ───────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 278 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Results: #>  #>      ✔ maaslin__Miguelitos diff_taxa = 146  #>  #>      ℹ 146 taxa are present in all tested methods  #>  #> Bakes: #>  #>      ◉ 1 -> count_cutoff: 2, weights: NULL, exclude: NULL, id: bake__Ensaïmada   ## If you try to run prep on an object of class prep_recipe it returns an  ## error. err <- testthat::expect_error(prep(da_results)) err #> <error/rlang_error> #> Error in `prep()`: #> ! The input recipe has already been prep! #> ℹ To force the rerun of all steps plese run prep(rec, force = T) #> --- #> Backtrace: #>      ▆ #>   1. └─pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE) #>   2.   └─pkgdown::build_site(...) #>   3.     └─pkgdown:::build_site_local(...) #>   4.       └─pkgdown::build_reference(...) #>   5.         └─purrr::map(...) #>   6.           └─purrr:::map_(\"list\", .x, .f, ..., .progress = .progress) #>   7.             ├─purrr:::with_indexed_errors(...) #>   8.             │ └─base::withCallingHandlers(...) #>   9.             ├─purrr:::call_with_cleanup(...) #>  10.             └─pkgdown (local) .f(.x[[i]], ...) #>  11.               ├─base::withCallingHandlers(...) #>  12.               └─pkgdown:::data_reference_topic(...) #>  13.                 └─pkgdown:::run_examples(...) #>  14.                   └─pkgdown:::highlight_examples(code, topic, env = env) #>  15.                     └─downlit::evaluate_and_highlight(...) #>  16.                       └─evaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #>  17.                         └─evaluate:::evaluate_call(...) #>  18.                           ├─evaluate (local) timing_fn(...) #>  19.                           ├─evaluate (local) handle(...) #>  20.                           │ └─base::try(f, silent = TRUE) #>  21.                           │   └─base::tryCatch(...) #>  22.                           │     └─base (local) tryCatchList(expr, classes, parentenv, handlers) #>  23.                           │       └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>  24.                           │         └─base (local) doTryCatch(return(expr), name, parentenv, handler) #>  25.                           ├─base::withCallingHandlers(...) #>  26.                           ├─base::withVisible(...) #>  27.                           └─evaluate:::eval_with_user_handlers(expr, envir, enclos, user_handlers) #>  28.                             └─base::eval(expr, envir, enclos) #>  29.                               └─base::eval(expr, envir, enclos) #>  30.                                 ├─testthat::expect_error(prep(da_results)) #>  31.                                 │ └─testthat:::expect_condition_matching(...) #>  32.                                 │   └─testthat:::quasi_capture(...) #>  33.                                 │     ├─testthat (local) .capture(...) #>  34.                                 │     │ └─base::withCallingHandlers(...) #>  35.                                 │     └─rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo)) #>  36.                                 ├─dar::prep(da_results) #>  37.                                 └─dar::prep(da_results)  ## You can force the overwrite with: prep(rec, force = TRUE) #> ── DAR Results ───────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 278 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Results: #>  #>      ✔ maaslin__Miguelitos diff_taxa = 146  #>  #>      ℹ 146 taxa are present in all tested methods  #>   ## This function can operate in parallel thanks to future and furrr packages. prep(rec, parallel = TRUE, workers = 2) #> ── DAR Results ───────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 278 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Results: #>  #>      ✔ maaslin__Miguelitos diff_taxa = 146  #>  #>      ℹ 146 taxa are present in all tested methods  #>"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/prep_recipe-class.html","id":null,"dir":"Reference","previous_headings":"","what":"prep_recipe-class object — prep_recipe-class","title":"prep_recipe-class object — prep_recipe-class","text":"prep_recipe recipe results corresponding steps defined recipe.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/prep_recipe-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"prep_recipe-class object — prep_recipe-class","text":"prep_recipe-class object","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/prep_recipe-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"prep_recipe-class object — prep_recipe-class","text":"results Contains results defined analysis recipe. bakes Contains executed bakes.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/prep_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a recipe prep_recipe. — prep_recipe","title":"Create a recipe prep_recipe. — prep_recipe","text":"prep_recipe recipe results corresponding steps defined recipe.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/prep_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a recipe prep_recipe. — prep_recipe","text":"","code":"prep_recipe(rec, results, bakes)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/prep_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a recipe prep_recipe. — prep_recipe","text":"rec recipe object. results list results bakes list saved bakes","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/prep_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a recipe prep_recipe. — prep_recipe","text":"object class prep_recipe.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/rand_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a random identification field for steps — rand_id","title":"Make a random identification field for steps — rand_id","text":"Make random identification field steps","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/rand_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a random identification field for steps — rand_id","text":"","code":"rand_id(prefix = \"step\")"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/rand_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a random identification field for steps — rand_id","text":"prefix single character string","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/rand_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a random identification field for steps — rand_id","text":"character string prefix random letters separated underscore. character vector","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/rand_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a random identification field for steps — rand_id","text":"","code":"rand_id(\"step\") #> [1] \"step__Vol_au_vent\""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Loads Phyloseq data — read_data","title":"Loads Phyloseq data — read_data","text":"function returns validated Phyloseq object loading directly file .rds extension. Alternatively, function can also take three text files input used construct validate Phyloseq object: - Counts matrix otu_id first column. - Taxonomic annotation matrix otu_id first column. - Metadata annotation sample_id first column.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loads Phyloseq data — read_data","text":"","code":"read_data(data_path)  validate_otu(otu)  validate_sample_data(sample_data)  validate_tax_table(tax_table)  validate_phyloseq(phy, slots = c(\"sample_data\", \"tax_table\"))  read_phyloseq(file_path)  read_file(file_path, ext = c(\".txt|.csv|.tsv\"))"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loads Phyloseq data — read_data","text":"data_path List length 1 3, paths input files.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loads Phyloseq data — read_data","text":"phylseq-class object","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loads Phyloseq data — read_data","text":"","code":"# From a phyloseq object saved with .rds extension. system.file(\"extdata\", \"metaHIV_phy.rds\", package = \"dar\") %>%   read_data() #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 451 taxa and 156 samples ] #> sample_data() Sample Data:       [ 156 samples by 3 sample variables ] #> tax_table()   Taxonomy Table:    [ 451 taxa by 7 taxonomic ranks ]  # From the three components of a phyloseq object saved as a plain text. data_path <- c(   system.file(\"extdata\", \"metaHIV_counts.txt\", package = \"dar\"),   system.file(\"extdata\", \"metaHIV_metadata.txt\", package = \"dar\"),   system.file(\"extdata\", \"metaHIV_taxas.txt\", package = \"dar\") )  read_data(data_path) #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 451 taxa and 156 samples ] #> sample_data() Sample Data:       [ 156 samples by 3 sample variables ] #> tax_table()   Taxonomy Table:    [ 451 taxa by 7 taxonomic ranks ]"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/recipe-class.html","id":null,"dir":"Reference","previous_headings":"","what":"recipe-class object — phyloseq_or_null-class","title":"recipe-class object — phyloseq_or_null-class","text":"recipe description steps applied data set order prepare data analysis.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/recipe-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"recipe-class object — phyloseq_or_null-class","text":"recipe-class object","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/recipe-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"recipe-class object — phyloseq_or_null-class","text":"phyloseq Phyloseq-class object var_info tibble contains current set terms data set. initially defaults data contained var_info. tax_info tibble contains current set taxonomic levels used analysis. steps List step-class objects used DA.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a recipe for preprocessing data — recipe","title":"Create a recipe for preprocessing data — recipe","text":"recipe description steps applied data set order prepare data analysis.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a recipe for preprocessing data — recipe","text":"","code":"recipe(phyloseq = NULL, var_info = NULL, tax_info = NULL, steps = list())"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a recipe for preprocessing data — recipe","text":"phyloseq Phyloseq-class object. var_info character string column names corresponding variables used context. tax_info character string taxonomic levels used context. steps list steps.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a recipe for preprocessing data — recipe","text":"object class recipe sub-objects: phyloseq object class phyloseq taxa abundance information. var_info tibble contains current set terms data set. initially defaults data contained var_info. tax_info tibble contains current set taxonomic levels used analysis.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/recipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a recipe for preprocessing data — recipe","text":"","code":"data(metaHIV_phy)  ## Define recipe rec <-   recipe(metaHIV_phy, var_info = \"RiskGroup2\", tax_info = \"Species\") %>%   step_subset_taxa(expr = 'Kingdom %in% c(\"Bacteria\", \"Archaea\")') %>%   step_filter_taxa(.f = \"function(x) sum(x > 0) >= (0.3 * length(x))\") %>%   step_metagenomeseq(rm_zeros = 0.01) %>%   step_maaslin()  ## Prep recipe da_results <- prep(rec)  ## Consensus strategy n_methods <- 2 da_results <- bake(da_results, count_cutoff = n_methods)  ## Results cool(da_results) #> ℹ Bake for count_cutoff = 2 #> # A tibble: 66 × 2 #>    taxa_id taxa                         #>    <chr>   <chr>                        #>  1 Otu_108 Prevotella_sp_CAG_520        #>  2 Otu_104 Prevotella_sp_CAG_1092       #>  3 Otu_102 Prevotella_sp_AM42_24        #>  4 Otu_69  Bacteroides_sp_CAG_530       #>  5 Otu_353 Firmicutes_bacterium_CAG_791 #>  6 Otu_109 Prevotella_sp_CAG_5226       #>  7 Otu_113 Prevotella_stercorea         #>  8 Otu_101 Prevotella_sp_885            #>  9 Otu_347 Firmicutes_bacterium_CAG_170 #> 10 Otu_371 Megasphaera_elsdenii         #> # ℹ 56 more rows  ## You can also crate a recipe without var and tax info rec <- recipe(metaHIV_phy)  rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ✖ undefined variable of interest. Use add_var() to add to recipe!  #>      ✖ undefined taxonomic level. Use add_tax() to add to recipe!  #>   ## And define them later rec <- rec %>%   add_var(\"RiskGroup2\") %>%   add_tax(\"Genus\")  rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Genus  #>  #>   ## When trying to add an identical step to an existing one, the system  ## returns an information message. rec <- step_ancom(rec) rec <- step_ancom(rec) #> ! This step is already defined with the same parameters and will be skipped:  #> rec %>% dar:::step_ancom(fix_formula = 'RiskGroup2', rand_formula = NULL, p_adj_method = 'holm', prv_cut = 0.1, lib_cut = 0, s0_perc = 0.05, group = NULL, struc_zero = FALSE, neg_lb = FALSE, alpha = 0.05, n_cl = 1, verbose = FALSE, global = FALSE, pairwise = FALSE, dunnet = FALSE, trend = FALSE, rarefy = FALSE)  ## The same with bake da_results <- bake(da_results) da_results <- bake(da_results) #> ! This step is already defined with the same parameters and will be skipped:  #> rec %>% dar:::step_bake(count_cutoff = NULL, weights = NULL, exclude = NULL)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/recipes_pkg_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Update packages — recipes_pkg_check","title":"Update packages — recipes_pkg_check","text":"check see required packages installed.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/recipes_pkg_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update packages — recipes_pkg_check","text":"","code":"recipes_pkg_check(pkg = NULL, step_name, ...)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/recipes_pkg_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update packages — recipes_pkg_check","text":"pkg character string package checked step_name Name step. ... Extra arguments pass utils::install.packages()","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/recipes_pkg_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update packages — recipes_pkg_check","text":"Nothing returned message printed console packages () installed along code .","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/required_deps.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns required pakcages for recipe object — required_deps","title":"Returns required pakcages for recipe object — required_deps","text":"Returns required pakcages recipe object","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/required_deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns required pakcages for recipe object — required_deps","text":"","code":"required_deps(rec)  # S4 method for recipe required_deps(rec)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/required_deps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns required pakcages for recipe object — required_deps","text":"rec recipe object","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/required_deps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns required pakcages for recipe object — required_deps","text":"character","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/required_deps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns required pakcages for recipe object — required_deps","text":"","code":"data(test_rec)  ## The function returns instructions to install any uninstalled dependencies  ## needed to run the recipe steps required_deps(test_rec)  ## The function also works with prep_recipe-class objects data(test_prep_rec) required_deps(test_prep_rec)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/sample_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts sample_data from phyloseq inside a recipe — sample_data","title":"Extracts sample_data from phyloseq inside a recipe — sample_data","text":"Extracts sample_data phyloseq inside recipe","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/sample_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts sample_data from phyloseq inside a recipe — sample_data","text":"","code":"sample_data(rec)  # S4 method for recipe sample_data(rec)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/sample_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts sample_data from phyloseq inside a recipe — sample_data","text":"rec recipe recipe step.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/sample_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts sample_data from phyloseq inside a recipe — sample_data","text":"tibble","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/sample_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts sample_data from phyloseq inside a recipe — sample_data","text":"","code":"data(metaHIV_phy)  ## Define recipe rec <-   recipe(metaHIV_phy, var_info = \"RiskGroup2\", tax_info = \"Species\")  ## Extract sample_data from phyloseq object sample_data(rec) #> # A tibble: 156 × 2 #>    sample_id  RiskGroup2 #>    <chr>      <chr>      #>  1 Sample_186 msm        #>  2 Sample_185 msm        #>  3 Sample_184 hts        #>  4 Sample_182 pwid       #>  5 Sample_181 msm        #>  6 Sample_170 msm        #>  7 Sample_169 msm        #>  8 Sample_168 pwid       #>  9 Sample_167 hts        #> 10 Sample_166 msm        #> # ℹ 146 more rows"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step.html","id":null,"dir":"Reference","previous_headings":"","what":"Overall Wrappers to Make New step_X or check_Y Objects — step","title":"Overall Wrappers to Make New step_X or check_Y Objects — step","text":"step sets class step check checks.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Overall Wrappers to Make New step_X or check_Y Objects — step","text":"","code":"step(subclass, ..., .prefix = \"step_\")  check(subclass, ..., .prefix = \"check_\")"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Overall Wrappers to Make New step_X or check_Y Objects — step","text":"subclass character string resulting class. example, subclass = \"blah\" step object returned class step_blah check_blah depending context. ... arguments operator returned. .prefix Prefix subclass created.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Overall Wrappers to Make New step_X or check_Y Objects — step","text":"updated step check new class.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_aldex.html","id":null,"dir":"Reference","previous_headings":"","what":"ALDEx2 analysis — step_aldex","title":"ALDEx2 analysis — step_aldex","text":"differential abundance analysis comparison two conditions. example, single-organism meta-RNA-seq high-throughput sequencing assays, selected unselected values -vitro sequence selections. Uses Dirichlet-multinomial model infer abundance counts, optimized three experimental replicates. Infers sampling variation calculates expected false discovery rate given biological sampling variation using Wilcox rank test Welches t-test (aldex.ttest) glm Kruskal Wallis tests (aldex.glm). Reports P fdr values calculated Benjamini Hochberg correction (supported dar package).","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_aldex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ALDEx2 analysis — step_aldex","text":"","code":"step_aldex(   rec,   max_significance = 0.05,   mc.samples = 128,   denom = \"all\",   rarefy = FALSE,   id = rand_id(\"aldex\") )  # S4 method for recipe step_aldex(   rec,   max_significance = 0.05,   mc.samples = 128,   denom = \"all\",   rarefy = FALSE,   id = rand_id(\"aldex\") )  # S4 method for prep_recipe step_aldex(   rec,   max_significance = 0.05,   mc.samples = 128,   denom = \"all\",   rarefy = FALSE,   id = rand_id(\"aldex\") )"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_aldex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ALDEx2 analysis — step_aldex","text":"rec recipe object. step added sequence operations recipe. max_significance Benjamini-Hochberg corrected P value Welch’s t test cutoff. mc.samples number Monte Carlo instances use estimate underlying distributions; since estimating central tendencies, 128 usually sufficient, larger numbers may . denom variable (, iqlr, zero, lvha, median, user) indicating features use denominator Geometric Mean calculation default \"\" uses geometric mean abundance features. Using \"median\" returns median abundance features. Using \"iqlr\" uses features first third quartile variance clr values across samples. Using \"zero\" uses non-zero features grop denominator. approach extreme case many nonzero features one condition many zeros another. Using \"lvha\" uses features low variance (bottom quartile) high relative abundance (top quartile every sample). also possible supply vector row indices use denominator. , experimentalist determining -priori rows thought invariant. case RNA-seq, include ribosomal protein genes house-keeping genes. used caution offsets may different original data data used function features 0 samples removed aldex.clr. rarefy Boolean indicating OTU counts must rarefyed. rarefaction uses standard R sample function resample abundance values otu_table component first argument, physeq. Often one major goals procedure achieve parity total number counts samples, alternative formal normalization procedures, single value sample.size expected. id character string unique step identify .","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_aldex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ALDEx2 analysis — step_aldex","text":"object class recipe","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_aldex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ALDEx2 analysis — step_aldex","text":"run_aldex function wrapper performs log-ratio transformation statistical testing single line code. Specifically, function: () generates Monte Carlo samples Dirichlet distribution sample, (b) converts instance using log-ratio transform, (c) returns test results two sample (Welch's t, Wilcoxon) test. function also estimates effect size two sample analyses.","code":""},{"path":[]},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_aldex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ALDEx2 analysis — step_aldex","text":"","code":"data(metaHIV_phy)  ## Init recipe rec <-    recipe(metaHIV_phy, \"RiskGroup2\", \"Species\") %>%    step_subset_taxa(expr = 'Kingdom %in% c(\"Bacteria\", \"Archaea\")') %>%   step_filter_taxa(.f = \"function(x) sum(x > 0) >= (0.4 * length(x))\")  rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Preporcessing steps: #>  #>      ◉ step_subset_taxa() id = subset_taxa__Kifli  #>      ◉ step_filter_taxa() id = filter_taxa__Klobasnek  #>  #> DA steps: #>   ## Define ALDEX step with default parameters and prep rec <-    step_aldex(rec) %>%    prep(parallel = TRUE)    rec #> ── DAR Results ───────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 76 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Results: #>  #>      ✔ aldex__Tortell diff_taxa = 46  #>  #>      ℹ 46 taxa are present in all tested methods  #>   ## Wearing rarefaction only for this step  rec <-    recipe(metaHIV_phy, \"RiskGroup2\", \"Species\") %>%    step_aldex(rec, rarefy = TRUE)  rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Preporcessing steps: #>  #>  #> DA steps: #>  #>      ◉ step_aldex() id = aldex__Éclair"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_ancom.html","id":null,"dir":"Reference","previous_headings":"","what":"ANCOM analysis — step_ancom","title":"ANCOM analysis — step_ancom","text":"Determine taxa whose absolute abundances, per unit volume, ecosystem (e.g., gut) significantly different changes covariate interest (e.g., group). current version ancombc2 function implements Analysis Compositions Microbiomes Bias Correction (ANCOM-BC2) cross-sectional repeated measurements data. addition two-group comparison, ANCOM-BC2 also supports testing continuous covariates multi-group comparisons, including global test, pairwise directional test, Dunnett's type test, trend test.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_ancom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ANCOM analysis — step_ancom","text":"","code":"step_ancom(   rec,   fix_formula = get_var(rec)[[1]],   rand_formula = NULL,   p_adj_method = \"holm\",   prv_cut = 0.1,   lib_cut = 0,   s0_perc = 0.05,   group = NULL,   struc_zero = FALSE,   neg_lb = FALSE,   alpha = 0.05,   n_cl = 1,   verbose = FALSE,   global = FALSE,   pairwise = FALSE,   dunnet = FALSE,   trend = FALSE,   rarefy = FALSE,   id = rand_id(\"ancom\") )  # S4 method for recipe step_ancom(   rec,   fix_formula = get_var(rec)[[1]],   rand_formula = NULL,   p_adj_method = \"holm\",   prv_cut = 0.1,   lib_cut = 0,   s0_perc = 0.05,   group = NULL,   struc_zero = FALSE,   neg_lb = FALSE,   alpha = 0.05,   n_cl = 1,   verbose = FALSE,   global = FALSE,   pairwise = FALSE,   dunnet = FALSE,   trend = FALSE,   rarefy = FALSE,   id = rand_id(\"ancom\") )"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_ancom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ANCOM analysis — step_ancom","text":"rec recipe object. step added sequence operations recipe. fix_formula character string expresses microbial absolute abundances taxon depend fixed effects metadata. specifying fix_formula, make sure include group variable formula NULL. rand_formula character string expresses microbial absolute abundances taxon depend random effects metadata. ANCOM-BC2 follows lmerTest package formulating random effects. See ?lmerTest::lmer details. Default NULL. p_adj_method character. method adjust p-values. Default \"holm\". Options include \"holm\", \"hochberg\", \"hommel\", \"bonferroni\", \"BH\", \"\", \"fdr\", \"none\". See ?stats::p.adjust details. prv_cut numerical fraction 0 1. Taxa prevalences less prv_cut excluded analysis. instance, suppose 100 samples, taxon nonzero counts presented less 10 samples, analyzed. Default 0.10. lib_cut numerical threshold filtering samples based library sizes. Samples library sizes less lib_cut excluded analysis. Default 0, .e. discard sample. s0_perc numerical fraction 0 1. Inspired Significance Analysis Microarrays (SAM) methodology, small positive constant added denominator ANCOM-BC2 test statistic corresponding taxon avoid significance due extremely small standard errors, especially rare taxa. small positive constant chosen s0_perc-th percentile standard error values fixed effect. Default 0.05 (5th percentile). group character. name group variable metadata. group discrete. Specifying group required detecting structural zeros performing multi-group comparisons (global test, pairwise directional test, Dunnett's type test, trend test). Default NULL. group interest contains two categories, leave NULL. struc_zero logical. Whether detect structural zeros based group. Default FALSE. See Details comprehensive discussion structural zeros. neg_lb logical. Whether classify taxon structural zero using asymptotic lower bound. Default FALSE. alpha numeric. Level significance. Default 0.05. n_cl numeric. number nodes forked. details, see ?parallel::makeCluster. Default 1 (parallel computing). verbose logical. Whether generate verbose output ANCOM-BC2 fitting process. Default FALSE. global logical. Whether perform global test. Default FALSE. pairwise logical. Whether perform pairwise directional test. Default FALSE. dunnet logical. Whether perform Dunnett's type test. Default FALSE. trend logical. Whether perform trend test. Default FALSE. rarefy Boolean indicating OTU counts must rarefyed. rarefaction uses standard R sample function resample abundance values otu_table component first argument, physeq. Often one major goals procedure achieve parity total number counts samples, alternative formal normalization procedures, single value sample.size expected. id character string unique step identify .","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_ancom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ANCOM analysis — step_ancom","text":"object class recipe","code":""},{"path":[]},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_ancom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ANCOM analysis — step_ancom","text":"","code":"data(metaHIV_phy)  ## Init recipe rec <-   recipe(metaHIV_phy, \"RiskGroup2\", \"Species\") %>%   step_subset_taxa(expr = 'Kingdom %in% c(\"Bacteria\", \"Archaea\")') %>%   step_filter_taxa(.f = \"function(x) sum(x > 0) >= (0.4 * length(x))\")  rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Preporcessing steps: #>  #>      ◉ step_subset_taxa() id = subset_taxa__Karakudamono  #>      ◉ step_filter_taxa() id = filter_taxa__Cinnamon_Roll  #>  #> DA steps: #>   ## Define step with default parameters and prep rec <-   step_ancom(rec) %>%   prep(parallel = TRUE) #> Registered S3 methods overwritten by 'proxy': #>   method               from     #>   print.registry_field registry #>   print.registry_entry registry #> Loading required package: foreach #>  #> Attaching package: ‘foreach’ #> The following objects are masked from ‘package:purrr’: #>  #>     accumulate, when #> Loading required package: rngtools #> Warning: NaNs produced  rec #> ── DAR Results ───────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 76 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Results: #>  #>      ✔ ancom__Tortita_negra diff_taxa = 35  #>  #>      ℹ 35 taxa are present in all tested methods  #>   ## Wearing rarefaction only for this step rec <-   recipe(metaHIV_phy, \"RiskGroup2\", \"Species\") %>%   step_ancom(rec, rarefy = TRUE)  rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Preporcessing steps: #>  #>  #> DA steps: #>  #>      ◉ step_ancom() id = ancom__Runebergs_torte"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_corncob.html","id":null,"dir":"Reference","previous_headings":"","what":"corncob analysis — step_corncob","title":"corncob analysis — step_corncob","text":"Corncob individual taxon regression model uses abundance tables sample data. corncob able model differential abundance differential variability, addresses challenges presented :","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_corncob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"corncob analysis — step_corncob","text":"","code":"step_corncob(   rec,   phi.formula = stats::formula(~1),   formula_null = stats::formula(~1),   phi.formula_null = stats::formula(~1),   link = \"logit\",   phi.link = \"logit\",   test = \"Wald\",   boot = FALSE,   B = 1000,   filter_discriminant = TRUE,   fdr_cutoff = 0.05,   fdr = \"fdr\",   log2FC = 0,   rarefy = FALSE,   id = rand_id(\"corncob\") )  # S4 method for recipe step_corncob(   rec,   phi.formula = stats::formula(~1),   formula_null = stats::formula(~1),   phi.formula_null = stats::formula(~1),   link = \"logit\",   phi.link = \"logit\",   test = \"Wald\",   boot = FALSE,   B = 1000,   filter_discriminant = TRUE,   fdr_cutoff = 0.05,   fdr = \"fdr\",   log2FC = 0,   rarefy = FALSE,   id = rand_id(\"corncob\") )  # S4 method for prep_recipe step_corncob(   rec,   phi.formula = stats::formula(~1),   formula_null = stats::formula(~1),   phi.formula_null = stats::formula(~1),   link = \"logit\",   phi.link = \"logit\",   test = \"Wald\",   boot = FALSE,   B = 1000,   filter_discriminant = TRUE,   fdr_cutoff = 0.05,   fdr = \"fdr\",   log2FC = 0,   rarefy = FALSE,   id = rand_id(\"corncob\") )"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_corncob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"corncob analysis — step_corncob","text":"rec recipe object. step added sequence operations recipe. phi.formula object class formula without response: symbolic description model fitted dispersion. formula_null Formula mean null, without response. phi.formula_null Formula overdispersion null, without response. link Link function abundance covariates, defaults \"logit\". phi.link Link function dispersion covariates, defaults \"logit\". test Character. Hypothesis testing procedure use. One \"Wald\" \"LRT\" (likelihood ratio test). boot Boolean. Defaults FALSE. Indicator whether use parametric bootstrap algorithm. (See pbWald pbLRT). B Optional integer. Number bootstrap iterations. Ignored boot FALSE. Otherwise, defaults 1000. filter_discriminant Boolean. Defaults TRUE. FALSE, discriminant taxa filtered . fdr_cutoff Integer. Defaults 0.05. Desired type 1 error rate. fdr Character. Defaults \"fdr\". False discovery rate control method, see p.adjust options. log2FC log2FC cutoff. rarefy Boolean indicating OTU counts must rarefyed. rarefaction uses standard R sample function resample abundance values otu_table component first argument, physeq. Often one major goals procedure achieve parity total number counts samples, alternative formal normalization procedures, single value sample.size expected. id character string unique step identify .","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_corncob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"corncob analysis — step_corncob","text":"object class recipe","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_corncob.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"corncob analysis — step_corncob","text":"different sequencing depth excessive zeros unobserved taxa high variability empirical relative abundances (overdispersion) within-taxon correlation hypothesis testing categorical continuous covariates","code":""},{"path":[]},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_corncob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"corncob analysis — step_corncob","text":"","code":"data(metaHIV_phy)  ## Init recipe rec <-    recipe(metaHIV_phy, \"RiskGroup2\", \"Class\") %>%    step_subset_taxa(expr = 'Kingdom %in% c(\"Bacteria\", \"Archaea\")') %>%   step_filter_taxa(.f = \"function(x) sum(x > 0) >= (0.3 * length(x))\")  rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Class  #>  #> Preporcessing steps: #>  #>      ◉ step_subset_taxa() id = subset_taxa__Birnbrot  #>      ◉ step_filter_taxa() id = filter_taxa__Roti_john  #>  #> DA steps: #>   ## Define step with default parameters and prep rec <-    step_corncob(rec) %>%    prep(parallel = TRUE)    rec #> ── DAR Results ───────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 101 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Class  #>  #> Results: #>  #>      ✔ corncob__ChaSan diff_taxa = 9  #>  #>      ℹ 9 taxa are present in all tested methods  #>   ## Wearing rarefaction only for this step  rec <-    recipe(metaHIV_phy, \"RiskGroup2\", \"Species\") %>%    step_corncob(rec, rarefy = TRUE)  rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Preporcessing steps: #>  #>  #> DA steps: #>  #>      ◉ step_corncob() id = corncob__Kroštule"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_deseq.html","id":null,"dir":"Reference","previous_headings":"","what":"DESeq2 analysis — step_deseq","title":"DESeq2 analysis — step_deseq","text":"Differential expression analysis based Negative Binomial (.k.. Gamma-Poisson) distribution. function performs default analysis steps: 1) estimation size factors: estimateSizeFactors. 2) estimation dispersion: estimateDispersions. 3) Negative Binomial GLM fitting Wald statistics: nbinomWaldTest. complete details step, see manual pages respective functions. DESeq function returns DESeqDataSet object, results tables (log2 fold changes p-values) can generated using results function. Shrunken LFC can generated using lfcShrink function.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_deseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DESeq2 analysis — step_deseq","text":"","code":"step_deseq(   rec,   test = \"Wald\",   fitType = \"parametric\",   betaPrior = FALSE,   type = \"ashr\",   max_significance = 0.05,   log2FC = 0,   rarefy = FALSE,   id = rand_id(\"deseq\") )  # S4 method for recipe step_deseq(   rec,   test = \"Wald\",   fitType = \"parametric\",   betaPrior = FALSE,   type = \"ashr\",   max_significance = 0.05,   log2FC = 0,   rarefy = FALSE,   id = rand_id(\"deseq\") )  # S4 method for prep_recipe step_deseq(   rec,   test = \"Wald\",   fitType = \"parametric\",   betaPrior = FALSE,   type = \"ashr\",   max_significance = 0.05,   log2FC = 0,   rarefy = FALSE,   id = rand_id(\"deseq\") )"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_deseq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DESeq2 analysis — step_deseq","text":"rec recipe object. step added sequence operations recipe. test Either \"Wald\" \"LRT\", use either Wald significance tests (defined nbinomWaldTest), likelihood ratio test difference deviance full reduced model formula (defined nbinomLRT). fitType either \"parametric\", \"local\", \"mean\", \"glmGamPoi\" type fitting dispersions mean intensity. See estimateDispersions description. betaPrior whether put zero-mean normal prior non-intercept coefficients See nbinomWaldTest description calculation beta prior. versions >=1.16, default set FALSE, shrunken LFCs obtained afterwards using lfcShrink. type \"apeglm\" adaptive Student's t prior shrinkage estimator 'apeglm' package; \"ashr\" adaptive shrinkage estimator 'ashr' package, using fitted mixture normals prior - see Stephens (2016) reference citation; \"normal\" 2014 DESeq2 shrinkage estimator using Normal prior. max_significance q-value threshold significance. log2FC log2FC cutoff. rarefy Boolean indicating OTU counts must rarefyed. rarefaction uses standard R sample function resample abundance values otu_table component first argument, physeq. Often one major goals procedure achieve parity total number counts samples, alternative formal normalization procedures, single value sample.size expected. id character string unique step identify .","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_deseq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DESeq2 analysis — step_deseq","text":"object class recipe","code":""},{"path":[]},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_deseq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DESeq2 analysis — step_deseq","text":"","code":"data(metaHIV_phy)  ## Init recipe rec <-   recipe(metaHIV_phy, \"RiskGroup2\", \"Species\") %>%   step_subset_taxa(expr = 'Kingdom %in% c(\"Bacteria\", \"Archaea\")') %>%   step_filter_taxa(.f = \"function(x) sum(x > 0) >= (0.4 * length(x))\")  rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Preporcessing steps: #>  #>      ◉ step_subset_taxa() id = subset_taxa__Sfințișori  #>      ◉ step_filter_taxa() id = filter_taxa__Bundevara  #>  #> DA steps: #>   ## Define step with default parameters and prep rec <-   step_deseq(rec) %>%   prep(parallel = TRUE)  rec #> ── DAR Results ───────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 76 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Results: #>  #>      ✔ deseq__Gulab_jamun diff_taxa = 42  #>  #>      ℹ 42 taxa are present in all tested methods  #>   ## Wearing rarefaction only for this step rec <-   recipe(metaHIV_phy, \"RiskGroup2\", \"Species\") %>%   step_deseq(rec, rarefy = TRUE)  rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Preporcessing steps: #>  #>  #> DA steps: #>  #>      ◉ step_deseq() id = deseq__Vol_au_vent"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_filter_taxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter taxa based on across-sample OTU abundance criteria — step_filter_taxa","title":"Filter taxa based on across-sample OTU abundance criteria — step_filter_taxa","text":"function directly analogous genefilter function microarray filtering, used filtering OTUs phyloseq objects. applies arbitrary set functions — function list, instance, created filterfun — across-sample criteria, one OTU time. takes input phyloseq object, returns logical vector indicating whether OTU passed criteria. Alternatively, \"prune\" option set FALSE, returns already-trimmed version phyloseq object.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_filter_taxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter taxa based on across-sample OTU abundance criteria — step_filter_taxa","text":"","code":"step_filter_taxa(rec, .f, id = rand_id(\"filter_taxa\"))  # S4 method for recipe step_filter_taxa(rec, .f, id = rand_id(\"filter_taxa\"))"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_filter_taxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter taxa based on across-sample OTU abundance criteria — step_filter_taxa","text":"rec recipe object. step added sequence operations recipe. .f function list functions take vector abundance values return logical. canned useful function types included genefilter-package. id character string unique step identify .","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_filter_taxa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter taxa based on across-sample OTU abundance criteria — step_filter_taxa","text":"object class recipe","code":""},{"path":[]},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_filter_taxa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter taxa based on across-sample OTU abundance criteria — step_filter_taxa","text":"","code":"data(metaHIV_phy)  ## Init recipe rec <- recipe(metaHIV_phy, \"RiskGroup2\", \"Species\") rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #>   ## Define filter taxa step with default parameters rec <-    step_filter_taxa(rec, .f = \"function(x) sum(x > 0) >= (0.03 * length(x))\") rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Preporcessing steps: #>  #>      ◉ step_filter_taxa() id = filter_taxa__Turnover  #>  #> DA steps: #>"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_lefse.html","id":null,"dir":"Reference","previous_headings":"","what":"lefse analysis — step_lefse","title":"lefse analysis — step_lefse","text":"Lefser metagenomic biomarker discovery tool based LEfSe tool published Huttenhower et al. 2011. Lefser R implementation LEfSe method. Using statistical analyses, lefser compares microbial populations healthy diseased subjects discover differencially expressed microorganisms. Lefser computes effect size, estimates magnitude differential expression populations differentially expressed microorganism. Subclasses classes can also assigned used within analysis.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_lefse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lefse analysis — step_lefse","text":"","code":"step_lefse(   rec,   kruskal.threshold = 0.05,   wilcox.threshold = 0.05,   lda.threshold = 2,   blockCol = NULL,   assay = 1L,   trim.names = FALSE,   rarefy = TRUE,   id = rand_id(\"lefse\") )  # S4 method for recipe step_lefse(   rec,   kruskal.threshold = 0.05,   wilcox.threshold = 0.05,   lda.threshold = 2,   blockCol = NULL,   assay = 1L,   trim.names = FALSE,   rarefy = TRUE,   id = rand_id(\"lefse\") )  # S4 method for prep_recipe step_lefse(   rec,   kruskal.threshold = 0.05,   wilcox.threshold = 0.05,   lda.threshold = 2,   blockCol = NULL,   assay = 1L,   trim.names = FALSE,   rarefy = TRUE,   id = rand_id(\"lefse\") )"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_lefse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"lefse analysis — step_lefse","text":"rec recipe object. step added sequence operations recipe. kruskal.threshold numeric(1) p-value Kruskal-Wallis Rank Sum Test (default 0.05). wilcox.threshold numeric(1) p-value Wilcoxon Rank-Sum Test 'blockCol' present (default 0.05). lda.threshold numeric(1) effect size threshold (default 2.0). blockCol character(1) Optional column name 'colData(expr)' indicating blocks, usually factor two levels (e.g., 'c(\"adult\", \"senior\")'; default NULL). assay -th assay matrix ‘SummarizedExperiment' (’expr'; default 1). trim.names 'TRUE' extracts specific taxonomic rank organism. rarefy Boolean indicating OTU counts must rarefyed. rarefaction uses standard R sample function resample abundance values otu_table component first argument, physeq. Often one major goals procedure achieve parity total number counts samples, alternative formal normalization procedures, single value sample.size expected. id character string unique step identify .","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_lefse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"lefse analysis — step_lefse","text":"object class recipe","code":""},{"path":[]},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_lefse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"lefse analysis — step_lefse","text":"","code":"data(metaHIV_phy)  ## Init recipe rec <-    recipe(metaHIV_phy, \"RiskGroup2\", \"Species\") %>%    step_subset_taxa(expr = 'Kingdom %in% c(\"Bacteria\", \"Archaea\")') %>%   step_filter_taxa(.f = \"function(x) sum(x > 0) >= (0.3 * length(x))\")  rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Preporcessing steps: #>  #>      ◉ step_subset_taxa() id = subset_taxa__Pastizz  #>      ◉ step_filter_taxa() id = filter_taxa__Taiyaki  #>  #> DA steps: #>   ## Define step with default parameters and prep rec <-    step_lefse(rec) %>%    prep(parallel = TRUE)    rec #> ── DAR Results ───────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 101 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Results: #>  #>      ✔ lefse__Crêpes_Suzette diff_taxa = 72  #>  #>      ℹ 72 taxa are present in all tested methods  #>   ## Wearing rarefaction only for this step  rec <-    recipe(metaHIV_phy, \"RiskGroup2\", \"Species\") %>%    step_lefse(rec, rarefy = TRUE)  ## Running lefse without rarefaction (not recommended) rec <-    recipe(metaHIV_phy, \"RiskGroup2\", \"Species\") %>%    step_lefse(rec, rarefy = FALSE) #> ! Run lefse without rarefaction is not recommended (id = lefse__Sfenj)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_maaslin.html","id":null,"dir":"Reference","previous_headings":"","what":"MaAsLin2 analysis — step_maaslin","title":"MaAsLin2 analysis — step_maaslin","text":"MaAsLin2 finds associations microbiome meta-omics features complex metadata population-scale epidemiological studies. software includes multiple analysis methods (including support multiple covariates repeated measures), filtering, normalization, transform options customize analysis specific study.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_maaslin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MaAsLin2 analysis — step_maaslin","text":"","code":"step_maaslin(   rec,   min_abundance = 0,   min_prevalence = 0.1,   min_variance = 0,   normalization = \"TSS\",   transform = \"LOG\",   analysis_method = \"LM\",   max_significance = 0.25,   random_effects = NULL,   correction = \"BH\",   standardize = TRUE,   reference = NULL,   rarefy = FALSE,   id = rand_id(\"maaslin\") )  # S4 method for recipe step_maaslin(   rec,   min_abundance = 0,   min_prevalence = 0.1,   min_variance = 0,   normalization = \"TSS\",   transform = \"LOG\",   analysis_method = \"LM\",   max_significance = 0.25,   random_effects = NULL,   correction = \"BH\",   standardize = TRUE,   reference = NULL,   rarefy = FALSE,   id = rand_id(\"maaslin\") )  # S4 method for prep_recipe step_maaslin(   rec,   min_abundance = 0,   min_prevalence = 0.1,   min_variance = 0,   normalization = \"TSS\",   transform = \"LOG\",   analysis_method = \"LM\",   max_significance = 0.25,   random_effects = NULL,   correction = \"BH\",   standardize = TRUE,   reference = NULL,   rarefy = FALSE,   id = rand_id(\"maaslin\") )"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_maaslin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MaAsLin2 analysis — step_maaslin","text":"rec recipe object. step added sequence operations recipe. min_abundance minimum abundance feature. min_prevalence minimum percent samples feature detected minimum abundance. min_variance Keep features variance greater . normalization normalization method apply. Default: \"TSS\". Choices: \"TSS\", \"CLR\", \"CSS\", \"NONE\", \"TMM\". transform transform apply. Default: \"LOG\". Choices: \"LOG\", \"LOGIT\", \"AST\", \"NONE\". analysis_method analysis method apply. Default: \"LM\". Choices: \"LM\", \"CPLM\", \"ZICP\", \"NEGBIN\", \"ZINB\". max_significance q-value threshold significance. random_effects random effects model, comma-delimited multiple effects. correction correction method computing q-value. standardize Apply z-score continuous metadata scale. reference factor use reference variable two levels provided string 'variable,reference' semi-colon delimited multiple variables. rarefy Boolean indicating OTU counts must rarefyed. rarefaction uses standard R sample function resample abundance values otu_table component first argument, physeq. Often one major goals procedure achieve parity total number counts samples, alternative formal normalization procedures, single value sample.size expected. id character string unique step identify .","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_maaslin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MaAsLin2 analysis — step_maaslin","text":"object class recipe","code":""},{"path":[]},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_maaslin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MaAsLin2 analysis — step_maaslin","text":"","code":"data(metaHIV_phy)  ## Init recipe rec <-   recipe(metaHIV_phy, \"RiskGroup2\", \"Species\") %>%   step_subset_taxa(expr = 'Kingdom %in% c(\"Bacteria\", \"Archaea\")') %>%   step_filter_taxa(.f = \"function(x) sum(x > 0) >= (0.4 * length(x))\")  rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Preporcessing steps: #>  #>      ◉ step_subset_taxa() id = subset_taxa__Ladies_navels  #>      ◉ step_filter_taxa() id = filter_taxa__Croissant  #>  #> DA steps: #>   ## Define step with default parameters and prep rec <-   step_maaslin(rec) %>%   prep(parallel = TRUE)  rec #> ── DAR Results ───────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 76 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Results: #>  #>      ✔ maaslin__Canelé diff_taxa = 65  #>  #>      ℹ 65 taxa are present in all tested methods  #>   ## Wearing rarefaction only for this step rec <-   recipe(metaHIV_phy, \"RiskGroup2\", \"Species\") %>%   step_maaslin(rec, rarefy = TRUE)  rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Preporcessing steps: #>  #>  #> DA steps: #>  #>      ◉ step_maaslin() id = maaslin__Boyoz"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_metagenomeseq.html","id":null,"dir":"Reference","previous_headings":"","what":"MetagenomeSeq analysis — step_metagenomeseq","title":"MetagenomeSeq analysis — step_metagenomeseq","text":"metagenomeSeq designed determine features (Operational Taxanomic Unit (OTU), species, etc.) differentially abundant two groups multiple samples. metagenomeSeq designed address effects normalization -sampling microbial communities disease association detection testing feature correlations.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_metagenomeseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MetagenomeSeq analysis — step_metagenomeseq","text":"","code":"step_metagenomeseq(   rec,   zeroMod = NULL,   useCSSoffset = TRUE,   useMixedModel = FALSE,   max_significance = 0.05,   log2FC = 0,   rarefy = FALSE,   rm_zeros = 0,   id = rand_id(\"metagenomeseq\") )  # S4 method for recipe step_metagenomeseq(   rec,   zeroMod = NULL,   useCSSoffset = TRUE,   useMixedModel = FALSE,   max_significance = 0.05,   log2FC = 0,   rarefy = FALSE,   rm_zeros = 0,   id = rand_id(\"metagenomeseq\") )  # S4 method for prep_recipe step_metagenomeseq(   rec,   zeroMod = NULL,   useCSSoffset = TRUE,   useMixedModel = FALSE,   max_significance = 0.05,   log2FC = 0,   rarefy = FALSE,   rm_zeros = 0,   id = rand_id(\"metagenomeseq\") )"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_metagenomeseq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MetagenomeSeq analysis — step_metagenomeseq","text":"rec recipe object. step added sequence operations recipe. zeroMod zero model, model account change number OTUs observed linear effect depth coverage. useCSSoffset Boolean, whether include default scaling parameters model . useMixedModel Estimate correlation duplicate features replicates using duplicateCorrelation. max_significance q-value threshold significance. log2FC log2FC cutoff. rarefy Boolean indicating OTU counts must rarefyed. rarefaction uses standard R sample function resample abundance values otu_table component first argument, physeq. Often one major goals procedure achieve parity total number counts samples, alternative formal normalization procedures, single value sample.size expected. rm_zeros Proportion samples categorical level 0 counts. id character string unique step identify .","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_metagenomeseq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MetagenomeSeq analysis — step_metagenomeseq","text":"object class recipe","code":""},{"path":[]},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_metagenomeseq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MetagenomeSeq analysis — step_metagenomeseq","text":"","code":"data(metaHIV_phy)  ## Init recipe rec <-   recipe(metaHIV_phy, \"RiskGroup2\", \"Species\") %>%   step_subset_taxa(expr = 'Kingdom %in% c(\"Bacteria\", \"Archaea\")') %>%   step_filter_taxa(.f = \"function(x) sum(x > 0) >= (0.02 * length(x))\")  rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Preporcessing steps: #>  #>      ◉ step_subset_taxa() id = subset_taxa__Börek  #>      ◉ step_filter_taxa() id = filter_taxa__Komaj_sehen  #>  #> DA steps: #>   ## Define step with default parameters and prep rec <-   step_metagenomeseq(rec, rm_zeros = 0.01) %>%   prep(parallel = TRUE) #> Warning: NaNs produced  rec #> ── DAR Results ───────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 291 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Results: #>  #>      ✔ metagenomeseq__Börek diff_taxa = 244  #>  #>      ℹ 244 taxa are present in all tested methods  #>   ## Wearing rarefaction only for this step rec <-   recipe(metaHIV_phy, \"RiskGroup2\", \"Species\") %>%   step_metagenomeseq(rec, rarefy = TRUE)  rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Preporcessing steps: #>  #>  #> DA steps: #>  #>      ◉ step_metagenomeseq() id = metagenomeseq__Leipziger_Lerche"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_rarefaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Resample an OTU table such that all samples have the same library size. — step_rarefaction","title":"Resample an OTU table such that all samples have the same library size. — step_rarefaction","text":"Please note authors phyloseq advocate using normalization procedure, despite recent popularity. justifications using alternative approaches address disparities library sizes made available article PLoS Computational Biology. See phyloseq_to_deseq2 recommended alternative rarefying directly supported phyloseq package, well supplemental materials PLoS-CB article phyloseq extensions repository GitHub. Nevertheless, comparison demonstration, rarefying procedure implemented good faith options hope useful. function uses standard R sample function resample abundance values otu_table component first argument, physeq. Often one major goals procedure achieve parity total number counts samples, alternative formal normalization procedures, single value sample.size expected. kind resampling can performed without replacement, replacement computationally-efficient, default setting. See replace parameter documentation details. recommended explicitly select random number generator seed invoking function, , alternatively, explicitly provide single positive integer argument rngseed.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_rarefaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resample an OTU table such that all samples have the same library size. — step_rarefaction","text":"","code":"step_rarefaction(rec, id = rand_id(\"rarefaction\"))  # S4 method for recipe step_rarefaction(rec, id = rand_id(\"rarefaction\"))  # S4 method for prep_recipe step_rarefaction(rec, id = rand_id(\"rarefaction\"))"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_rarefaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resample an OTU table such that all samples have the same library size. — step_rarefaction","text":"rec recipe object. step added sequence operations recipe. id character string unique step identify .","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_rarefaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resample an OTU table such that all samples have the same library size. — step_rarefaction","text":"object class recipe","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_rarefaction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resample an OTU table such that all samples have the same library size. — step_rarefaction","text":"","code":"data(metaHIV_phy)  ## Init recipe rec <-    recipe(metaHIV_phy, \"RiskGroup2\", \"Species\")  rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #>   ## Define step with default parameters and prep rec <-    step_rarefaction(rec) %>%    prep(parallel = TRUE)    rec #> ── DAR Results ───────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Results: #>"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_subset_taxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset species by taxonomic expression — step_subset_taxa","title":"Subset species by taxonomic expression — step_subset_taxa","text":"convenience wrapper around subset function. intended speed subsetting complex experimental objects one function call. case subset_taxa, subsetting based expression related columns values within tax_table (taxonomyTable component) slot physeq. OTUs retained dataset equivalent x[subset & !.na(subset)], x vector OTU IDs subset logical results subsetting expression. important keep mind, users often unaware subsetting step also removes/omits OTUs missing value result, NA, somewhere expression.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_subset_taxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset species by taxonomic expression — step_subset_taxa","text":"","code":"step_subset_taxa(rec, expr, id = rand_id(\"subset_taxa\"))  # S4 method for recipe step_subset_taxa(rec, expr, id = rand_id(\"subset_taxa\"))"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_subset_taxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset species by taxonomic expression — step_subset_taxa","text":"rec recipe object. step added sequence operations recipe. expr subsetting expression applied taxonomyTable. passed subset, details examples functions can found documentation. id character string unique step identify .","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_subset_taxa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset species by taxonomic expression — step_subset_taxa","text":"object class recipe","code":""},{"path":[]},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_subset_taxa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset species by taxonomic expression — step_subset_taxa","text":"","code":"data(metaHIV_phy)  ## Init recipe rec <- recipe(metaHIV_phy, \"RiskGroup2\", \"Species\") rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #>   ## Define subset taxa step with default parameters rec <- step_subset_taxa(rec, expr = 'Kingdom %in% c(\"Bacteria\", \"Archaea\")') rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Preporcessing steps: #>  #>      ◉ step_subset_taxa() id = subset_taxa__Jalebi  #>  #> DA steps: #>"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_to_expr.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts parameters from steps and makes a character vector with the expression to evaluate — step_to_expr","title":"Extracts parameters from steps and makes a character vector with the expression to evaluate — step_to_expr","text":"Extracts parameters steps makes character vector expression evaluate","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_to_expr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts parameters from steps and makes a character vector with the expression to evaluate — step_to_expr","text":"","code":"step_to_expr(step)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_to_expr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts parameters from steps and makes a character vector with the expression to evaluate — step_to_expr","text":"step object class step","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_to_expr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts parameters from steps and makes a character vector with the expression to evaluate — step_to_expr","text":"character vector","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_wilcox.html","id":null,"dir":"Reference","previous_headings":"","what":"Wilcox analysis — step_wilcox","title":"Wilcox analysis — step_wilcox","text":"Performs wilcox test determine features (Operational Taxanomic Unit (OTU), species, etc.) differentially abundant two groups multiple samples.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_wilcox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wilcox analysis — step_wilcox","text":"","code":"step_wilcox(   rec,   norm_method = \"compositional\",   max_significance = 0.05,   p_adj_method = \"BH\",   rarefy = FALSE,   id = rand_id(\"wilcox\") )  # S4 method for recipe step_wilcox(   rec,   norm_method = \"compositional\",   max_significance = 0.05,   p_adj_method = \"BH\",   rarefy = FALSE,   id = rand_id(\"wilcox\") )  # S4 method for prep_recipe step_wilcox(   rec,   norm_method = \"compositional\",   max_significance = 0.05,   p_adj_method = \"BH\",   rarefy = FALSE,   id = rand_id(\"wilcox\") )"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_wilcox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wilcox analysis — step_wilcox","text":"rec recipe object. step added sequence operations recipe. norm_method Transformation apply. options include: 'compositional' (ie relative abundance), 'Z', 'log10', 'log10p', 'hellinger', 'identity', 'clr', 'alr', method vegan::decostand function. max_significance q-value threshold significance. p_adj_method Character. Specifying method adjust p-values multiple comparisons. Default “BH” (Benjamini-Hochberg procedure). rarefy Boolean indicating OTU counts must rarefyed. rarefaction uses standard R sample function resample abundance values otu_table component first argument, physeq. Often one major goals procedure achieve parity total number counts samples, alternative formal normalization procedures, single value sample.size expected. id character string unique step identify .","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_wilcox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wilcox analysis — step_wilcox","text":"object class recipe","code":""},{"path":[]},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/step_wilcox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wilcox analysis — step_wilcox","text":"","code":"data(metaHIV_phy)  ## Init recipe rec <-   recipe(metaHIV_phy, \"RiskGroup2\", \"Species\") %>%   step_subset_taxa(expr = 'Kingdom %in% c(\"Bacteria\", \"Archaea\")') %>%   step_filter_taxa(.f = \"function(x) sum(x > 0) >= (0.4 * length(x))\")  rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Preporcessing steps: #>  #>      ◉ step_subset_taxa() id = subset_taxa__Trdelník  #>      ◉ step_filter_taxa() id = filter_taxa__Pot_pie  #>  #> DA steps: #>   ## Define step with default parameters and prep rec <-   step_wilcox(rec) %>%   prep(parallel = TRUE) #> ! Run wilcox without rarefaction is not recommended (id = wilcox__Kolompeh)  rec #> ── DAR Results ───────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 76 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Results: #>  #>      ✔ wilcox__Kolompeh diff_taxa = 50  #>  #>      ℹ 50 taxa are present in all tested methods  #>   ## Wearing rarefaction only for this step rec <-   recipe(metaHIV_phy, \"RiskGroup2\", \"Species\") %>%   step_wilcox(rec, rarefy = TRUE)  rec #> ── DAR Recipe ────────────────────────────────────────────────────────────────── #> Inputs: #>  #>      ℹ phyloseq object with 451 taxa and 156 samples  #>      ℹ variable of interes RiskGroup2 (class: character, levels: hts, msm, pwid)  #>      ℹ taxonomic level Species  #>  #> Preporcessing steps: #>  #>  #> DA steps: #>  #>      ◉ step_wilcox() id = wilcox__Carac"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/steps_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get step_ids from recipe — steps_ids","title":"Get step_ids from recipe — steps_ids","text":"Get step_ids recipe","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/steps_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get step_ids from recipe — steps_ids","text":"","code":"steps_ids(rec, type = \"all\")"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/steps_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get step_ids from recipe — steps_ids","text":"rec recipe object. type character vector indicating type class. Options c(\"\", \"da\", \"prepro\").","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/steps_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get step_ids from recipe — steps_ids","text":"character vector","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/steps_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get step_ids from recipe — steps_ids","text":"","code":"data(test_rec)  ## We can extract the step identifiers from a recipe with `step_ids` ids <- steps_ids(test_rec) ids #> [1] \"subset_taxa__Jalebi\"      \"filter_taxa__Palmier\"     #> [3] \"maaslin__Coussin_de_Lyon\" \"metagenomeseq__Nazook\"    #> [5] \"deseq__Pan_dulce\"          ## With the `type` parameter, extract the prepro and da steps separately. da_ids <- steps_ids(test_rec, type = \"da\") da_ids #> [1] \"maaslin__Coussin_de_Lyon\" \"metagenomeseq__Nazook\"    #> [3] \"deseq__Pan_dulce\"          prepro_ids <- steps_ids(test_rec, type = \"prepro\") prepro_ids #> [1] \"subset_taxa__Jalebi\"  \"filter_taxa__Palmier\""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/tax_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts tax_table from phyloseq inside a recipe — tax_table","title":"Extracts tax_table from phyloseq inside a recipe — tax_table","text":"Extracts tax_table phyloseq inside recipe","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/tax_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts tax_table from phyloseq inside a recipe — tax_table","text":"","code":"tax_table(rec)  # S4 method for recipe tax_table(rec)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/tax_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts tax_table from phyloseq inside a recipe — tax_table","text":"rec recipe recipe step.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/tax_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts tax_table from phyloseq inside a recipe — tax_table","text":"tibble","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/tax_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts tax_table from phyloseq inside a recipe — tax_table","text":"","code":"data(metaHIV_phy)  ## Define recipe rec <-   recipe(metaHIV_phy, var_info = \"RiskGroup2\", tax_info = \"Species\")  ## Extract tax_table from phyloseq object tax_table(rec) #> # A tibble: 451 × 2 #>    taxa_id taxa                          #>    <chr>   <chr>                         #>  1 Otu_1   Methanobrevibacter_smithii    #>  2 Otu_2   Methanosphaera_stadtmanae     #>  3 Otu_3   Actinomyces_odontolyticus     #>  4 Otu_4   Actinomyces_radicidentis      #>  5 Otu_5   Actinomyces_sp_HPA0247        #>  6 Otu_6   Actinomyces_sp_oral_taxon_181 #>  7 Otu_7   Actinomyces_turicensis        #>  8 Otu_8   Aeriscardovia_aeriphila       #>  9 Otu_9   Alloscardovia_omnicolens      #> 10 Otu_10  Bifidobacterium_adolescentis  #> # ℹ 441 more rows"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"page lists tidy eval tools reexported package rlang. learn using tidy eval scripts packages high level, see dplyr programming vignette ggplot2 packages vignette. Metaprogramming section Advanced R may also useful deeper dive. tidy eval operators {{, !!, !!! syntactic constructs specially interpreted tidy eval functions. mostly need {{, !! !!! advanced operators use simple cases. curly-curly operator {{ allows tunnel data-variables passed function arguments inside tidy eval functions. {{ designed individual arguments. pass multiple arguments contained dots, use ... normal way.   enquo() enquos() delay execution one several function arguments. former returns single expression, latter returns list expressions. defused, expressions longer evaluate . must injected back evaluation context !! (single expression) !!! (list expressions).   simple case, code equivalent usage {{ ... . Defusing enquo() enquos() needed complex cases, instance need inspect modify expressions way. .data pronoun object represents current slice data. variable name string, use .data pronoun subset variable [[.   Another tidy eval operator :=. makes possible use glue curly-curly syntax LHS =. technical reasons, R language support complex expressions left =, use := workaround.   Many tidy eval functions like dplyr::mutate() dplyr::summarise() give automatic name unnamed inputs. need create sort automatic names , use as_label(). instance, glue-tunnelling syntax can reproduced manually :   Expressions defused enquo() (tunnelled {{) need simple column names, can arbitrarily complex. as_label() handles cases gracefully. code assumes simple column name, use as_name() instead. safer throws error input name expected.","code":"my_function <- function(data, var, ...) {   data %>%     group_by(...) %>%     summarise(mean = mean({{ var }})) } my_function <- function(data, var, ...) {   # Defuse   var <- enquo(var)   dots <- enquos(...)    # Inject   data %>%     group_by(!!!dots) %>%     summarise(mean = mean(!!var)) } my_var <- \"disp\" mtcars %>% summarise(mean = mean(.data[[my_var]])) my_function <- function(data, var, suffix = \"foo\") {   # Use `{{` to tunnel function arguments and the usual glue   # operator `{` to interpolate plain strings.   data %>%     summarise(\"{{ var }}_mean_{suffix}\" := mean({{ var }})) } my_function <- function(data, var, suffix = \"foo\") {   var <- enquo(var)   prefix <- as_label(var)   data %>%     summarise(\"{prefix}_mean_{suffix}\" := mean(!!var)) }"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/tidyeval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy eval helpers — tidyeval","text":"function return value explicitly.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/tidyeval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidy eval helpers — tidyeval","text":"","code":"# `enquo()` defuses the expression supplied by your user f <- function(arg) {   rlang::enquo(arg) }  f(1 + 1) #> <quosure> #> expr: ^1 + 1 #> env:  0x5653dcf68448  # `enquos()` works with arguments and dots. It returns a list of # expressions f <- function(...) {   rlang::enquos(...) }  f(1 + 1, 2 * 10) #> <list_of<quosure>> #>  #> [[1]] #> <quosure> #> expr: ^1 + 1 #> env:  0x5653dcf68448 #>  #> [[2]] #> <quosure> #> expr: ^2 * 10 #> env:  0x5653dcf68448 #>   # Let's create some symbols: foo <- quote(foo) bar <- rlang::sym(\"bar\")  # as_name() converts symbols to strings: foo #> foo  rlang::as_name(foo) #> [1] \"foo\"  typeof(bar) #> [1] \"symbol\"  typeof(rlang::as_name(bar)) #> [1] \"character\"  # as_name() unwraps quosured symbols automatically: rlang::as_name(rlang::quo(foo)) #> [1] \"foo\"  # as_label() is useful with quoted expressions: rlang::as_label(rlang::expr(foo(bar))) #> [1] \"foo(bar)\"  rlang::as_label(rlang::expr(foobar)) #> [1] \"foobar\"  # It works with any R object. This is also useful for quoted # arguments because the user might unquote constant objects: rlang::as_label(1:3) #> [1] \"<int>\"  rlang::as_label(base::list) #> [1] \"<fn>\""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/to_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper to convert phyloseq slots to tibble — to_tibble","title":"Wrapper to convert phyloseq slots to tibble — to_tibble","text":"Wrapper convert phyloseq slots tibble","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/to_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper to convert phyloseq slots to tibble — to_tibble","text":"","code":"to_tibble(df, id_name = \"otu_id\")"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/to_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper to convert phyloseq slots to tibble — to_tibble","text":"df output otu_table(), sample_data() tax_table() phyloseq functions. id_name Name new column generated rownames","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/to_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper to convert phyloseq slots to tibble — to_tibble","text":"tibble","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/to_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper to convert phyloseq slots to tibble — to_tibble","text":"","code":"data(test_rec) otu_table <-    get_phy(test_rec) %>%    phyloseq::otu_table()  dar:::to_tibble(otu_table) #> # A tibble: 451 × 157 #>    otu_id Sample_186 Sample_185 Sample_184 Sample_182 Sample_181 Sample_170 #>    <chr>       <dbl>      <dbl>      <dbl>      <dbl>      <dbl>      <dbl> #>  1 Otu_1        2538          0       9026      12049      22126      15374 #>  2 Otu_2           0          0          0        609       2543        988 #>  3 Otu_3           0          0          0          0          0          0 #>  4 Otu_4           0          0          0          0          0          0 #>  5 Otu_5           0          0          0          0          0          0 #>  6 Otu_6           0          0          0          0          0          0 #>  7 Otu_7           0          0          0          0          0          0 #>  8 Otu_8           0          0          0          0          0          0 #>  9 Otu_9           0          0          0          0          0        351 #> 10 Otu_10          0          0      10575      10764        504          0 #> # ℹ 441 more rows #> # ℹ 150 more variables: Sample_169 <dbl>, Sample_168 <dbl>, Sample_167 <dbl>, #> #   Sample_166 <dbl>, Sample_165 <dbl>, Sample_164 <dbl>, Sample_163 <dbl>, #> #   Sample_162 <dbl>, Sample_160 <dbl>, Sample_159 <dbl>, Sample_158 <dbl>, #> #   Sample_157 <dbl>, Sample_156 <dbl>, Sample_155 <dbl>, Sample_153 <dbl>, #> #   Sample_152 <dbl>, Sample_151 <dbl>, Sample_150 <dbl>, Sample_149 <dbl>, #> #   Sample_148 <dbl>, Sample_147 <dbl>, Sample_146 <dbl>, Sample_145 <dbl>, …"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/zero_otu.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract outs with all 0 values in at least on level of the variable — zero_otu","title":"Extract outs with all 0 values in at least on level of the variable — zero_otu","text":"Extract outs 0 values least level variable","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/zero_otu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract outs with all 0 values in at least on level of the variable — zero_otu","text":"","code":"zero_otu(obj, var = NULL, pct_cutoff = 0)  # S4 method for recipe zero_otu(obj, var = NULL, pct_cutoff = 0)  # S4 method for phyloseq zero_otu(obj, var = NULL, pct_cutoff = 0)"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/zero_otu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract outs with all 0 values in at least on level of the variable — zero_otu","text":"obj recipe phyloseq object. var Variable interest. Must present metadata. pct_cutoff Minimum pct counts samples counts taxa.","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/zero_otu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract outs with all 0 values in at least on level of the variable — zero_otu","text":"character vector","code":""},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/reference/zero_otu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract outs with all 0 values in at least on level of the variable — zero_otu","text":"","code":"data(metaHIV_phy)  ## Init recipe rec <- recipe(metaHIV_phy, \"RiskGroup2\", \"Species\")  ## Extract outs with all 0 values zero_otu(rec) #> # A tibble: 1,353 × 5 #>    taxa_id RiskGroup2 no_zero total   pct #>    <chr>   <chr>        <dbl> <int> <dbl> #>  1 Otu_100 hts              0    41     0 #>  2 Otu_100 pwid             0    15     0 #>  3 Otu_103 msm              0   100     0 #>  4 Otu_103 pwid             0    15     0 #>  5 Otu_104 pwid             0    15     0 #>  6 Otu_105 hts              0    41     0 #>  7 Otu_105 msm              0   100     0 #>  8 Otu_108 pwid             0    15     0 #>  9 Otu_109 pwid             0    15     0 #> 10 Otu_11  pwid             0    15     0 #> # ℹ 1,343 more rows"},{"path":"https://microbialgenomics-irsicaixaorg.github.io/dar/news/index.html","id":"dar-0990","dir":"Changelog","previous_headings":"","what":"dar 0.99.0","title":"dar 0.99.0","text":"Initial Bioconductor submission.","code":""}]
